
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	78 dc 00 20 55 97 00 00 7b e7 00 00 29 97 00 00     x.. U...{...)...
    8010:	29 97 00 00 29 97 00 00 29 97 00 00 29 97 00 00     )...)...)...)...
	...
    802c:	c1 93 00 00 29 97 00 00 00 00 00 00 61 93 00 00     ....).......a...
    803c:	29 97 00 00                                         )...

00008040 <_irq_vector_table>:
    8040:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    8050:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    8060:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    8070:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    8080:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    8090:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    80a0:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    80b0:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    80c0:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    80d0:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    80e0:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    80f0:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    8100:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    8110:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    8120:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    8130:	45 94 00 00 45 94 00 00 45 94 00 00 45 94 00 00     E...E...E...E...
    8140:	45 94 00 00                                         E...

Disassembly of section text:

00008144 <__aeabi_uldivmod>:
    8144:	b953      	cbnz	r3, 815c <__aeabi_uldivmod+0x18>
    8146:	b94a      	cbnz	r2, 815c <__aeabi_uldivmod+0x18>
    8148:	2900      	cmp	r1, #0
    814a:	bf08      	it	eq
    814c:	2800      	cmpeq	r0, #0
    814e:	bf1c      	itt	ne
    8150:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    8154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    8158:	f000 b80c 	b.w	8174 <__aeabi_idiv0>
    815c:	f1ad 0c08 	sub.w	ip, sp, #8
    8160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8164:	f000 f808 	bl	8178 <__udivmoddi4>
    8168:	f8dd e004 	ldr.w	lr, [sp, #4]
    816c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8170:	b004      	add	sp, #16
    8172:	4770      	bx	lr

00008174 <__aeabi_idiv0>:
    8174:	4770      	bx	lr
    8176:	bf00      	nop

00008178 <__udivmoddi4>:
    8178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    817c:	4686      	mov	lr, r0
    817e:	468c      	mov	ip, r1
    8180:	4608      	mov	r0, r1
    8182:	9e08      	ldr	r6, [sp, #32]
    8184:	4615      	mov	r5, r2
    8186:	4674      	mov	r4, lr
    8188:	4619      	mov	r1, r3
    818a:	2b00      	cmp	r3, #0
    818c:	f040 80c1 	bne.w	8312 <__udivmoddi4+0x19a>
    8190:	4285      	cmp	r5, r0
    8192:	fab2 f282 	clz	r2, r2
    8196:	d945      	bls.n	8224 <__udivmoddi4+0xac>
    8198:	b14a      	cbz	r2, 81ae <__udivmoddi4+0x36>
    819a:	f1c2 0320 	rsb	r3, r2, #32
    819e:	fa00 fc02 	lsl.w	ip, r0, r2
    81a2:	4095      	lsls	r5, r2
    81a4:	4094      	lsls	r4, r2
    81a6:	fa2e f303 	lsr.w	r3, lr, r3
    81aa:	ea43 0c0c 	orr.w	ip, r3, ip
    81ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    81b2:	b2a8      	uxth	r0, r5
    81b4:	0c23      	lsrs	r3, r4, #16
    81b6:	fbbc f8fe 	udiv	r8, ip, lr
    81ba:	fb0e cc18 	mls	ip, lr, r8, ip
    81be:	fb08 f900 	mul.w	r9, r8, r0
    81c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    81c6:	4599      	cmp	r9, r3
    81c8:	d928      	bls.n	821c <__udivmoddi4+0xa4>
    81ca:	18eb      	adds	r3, r5, r3
    81cc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    81d0:	d204      	bcs.n	81dc <__udivmoddi4+0x64>
    81d2:	4599      	cmp	r9, r3
    81d4:	d902      	bls.n	81dc <__udivmoddi4+0x64>
    81d6:	f1a8 0702 	sub.w	r7, r8, #2
    81da:	442b      	add	r3, r5
    81dc:	eba3 0309 	sub.w	r3, r3, r9
    81e0:	b2a4      	uxth	r4, r4
    81e2:	fbb3 fcfe 	udiv	ip, r3, lr
    81e6:	fb0e 331c 	mls	r3, lr, ip, r3
    81ea:	fb0c f000 	mul.w	r0, ip, r0
    81ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    81f2:	42a0      	cmp	r0, r4
    81f4:	d914      	bls.n	8220 <__udivmoddi4+0xa8>
    81f6:	192c      	adds	r4, r5, r4
    81f8:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    81fc:	d204      	bcs.n	8208 <__udivmoddi4+0x90>
    81fe:	42a0      	cmp	r0, r4
    8200:	d902      	bls.n	8208 <__udivmoddi4+0x90>
    8202:	f1ac 0302 	sub.w	r3, ip, #2
    8206:	442c      	add	r4, r5
    8208:	1a24      	subs	r4, r4, r0
    820a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    820e:	b11e      	cbz	r6, 8218 <__udivmoddi4+0xa0>
    8210:	40d4      	lsrs	r4, r2
    8212:	2300      	movs	r3, #0
    8214:	6034      	str	r4, [r6, #0]
    8216:	6073      	str	r3, [r6, #4]
    8218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    821c:	4647      	mov	r7, r8
    821e:	e7dd      	b.n	81dc <__udivmoddi4+0x64>
    8220:	4663      	mov	r3, ip
    8222:	e7f1      	b.n	8208 <__udivmoddi4+0x90>
    8224:	bb92      	cbnz	r2, 828c <__udivmoddi4+0x114>
    8226:	1b43      	subs	r3, r0, r5
    8228:	2101      	movs	r1, #1
    822a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    822e:	b2af      	uxth	r7, r5
    8230:	0c20      	lsrs	r0, r4, #16
    8232:	fbb3 fcfe 	udiv	ip, r3, lr
    8236:	fb0e 331c 	mls	r3, lr, ip, r3
    823a:	fb0c f807 	mul.w	r8, ip, r7
    823e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    8242:	4598      	cmp	r8, r3
    8244:	d961      	bls.n	830a <__udivmoddi4+0x192>
    8246:	18eb      	adds	r3, r5, r3
    8248:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    824c:	d204      	bcs.n	8258 <__udivmoddi4+0xe0>
    824e:	4598      	cmp	r8, r3
    8250:	d902      	bls.n	8258 <__udivmoddi4+0xe0>
    8252:	f1ac 0002 	sub.w	r0, ip, #2
    8256:	442b      	add	r3, r5
    8258:	eba3 0308 	sub.w	r3, r3, r8
    825c:	b2a4      	uxth	r4, r4
    825e:	fbb3 fcfe 	udiv	ip, r3, lr
    8262:	fb0e 331c 	mls	r3, lr, ip, r3
    8266:	fb0c f707 	mul.w	r7, ip, r7
    826a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    826e:	42a7      	cmp	r7, r4
    8270:	d94d      	bls.n	830e <__udivmoddi4+0x196>
    8272:	192c      	adds	r4, r5, r4
    8274:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    8278:	d204      	bcs.n	8284 <__udivmoddi4+0x10c>
    827a:	42a7      	cmp	r7, r4
    827c:	d902      	bls.n	8284 <__udivmoddi4+0x10c>
    827e:	f1ac 0302 	sub.w	r3, ip, #2
    8282:	442c      	add	r4, r5
    8284:	1be4      	subs	r4, r4, r7
    8286:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    828a:	e7c0      	b.n	820e <__udivmoddi4+0x96>
    828c:	f1c2 0320 	rsb	r3, r2, #32
    8290:	4095      	lsls	r5, r2
    8292:	4094      	lsls	r4, r2
    8294:	fa20 f103 	lsr.w	r1, r0, r3
    8298:	fa2e f303 	lsr.w	r3, lr, r3
    829c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    82a0:	4090      	lsls	r0, r2
    82a2:	b2af      	uxth	r7, r5
    82a4:	4303      	orrs	r3, r0
    82a6:	fbb1 fcfe 	udiv	ip, r1, lr
    82aa:	fb0e 101c 	mls	r0, lr, ip, r1
    82ae:	0c19      	lsrs	r1, r3, #16
    82b0:	fb0c f807 	mul.w	r8, ip, r7
    82b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    82b8:	4588      	cmp	r8, r1
    82ba:	d922      	bls.n	8302 <__udivmoddi4+0x18a>
    82bc:	1869      	adds	r1, r5, r1
    82be:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    82c2:	d204      	bcs.n	82ce <__udivmoddi4+0x156>
    82c4:	4588      	cmp	r8, r1
    82c6:	d902      	bls.n	82ce <__udivmoddi4+0x156>
    82c8:	f1ac 0002 	sub.w	r0, ip, #2
    82cc:	4429      	add	r1, r5
    82ce:	eba1 0108 	sub.w	r1, r1, r8
    82d2:	b29b      	uxth	r3, r3
    82d4:	fbb1 fcfe 	udiv	ip, r1, lr
    82d8:	fb0e 111c 	mls	r1, lr, ip, r1
    82dc:	fb0c f707 	mul.w	r7, ip, r7
    82e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    82e4:	429f      	cmp	r7, r3
    82e6:	d90e      	bls.n	8306 <__udivmoddi4+0x18e>
    82e8:	18eb      	adds	r3, r5, r3
    82ea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    82ee:	d204      	bcs.n	82fa <__udivmoddi4+0x182>
    82f0:	429f      	cmp	r7, r3
    82f2:	d902      	bls.n	82fa <__udivmoddi4+0x182>
    82f4:	f1ac 0102 	sub.w	r1, ip, #2
    82f8:	442b      	add	r3, r5
    82fa:	1bdb      	subs	r3, r3, r7
    82fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8300:	e793      	b.n	822a <__udivmoddi4+0xb2>
    8302:	4660      	mov	r0, ip
    8304:	e7e3      	b.n	82ce <__udivmoddi4+0x156>
    8306:	4661      	mov	r1, ip
    8308:	e7f7      	b.n	82fa <__udivmoddi4+0x182>
    830a:	4660      	mov	r0, ip
    830c:	e7a4      	b.n	8258 <__udivmoddi4+0xe0>
    830e:	4663      	mov	r3, ip
    8310:	e7b8      	b.n	8284 <__udivmoddi4+0x10c>
    8312:	4283      	cmp	r3, r0
    8314:	d906      	bls.n	8324 <__udivmoddi4+0x1ac>
    8316:	b916      	cbnz	r6, 831e <__udivmoddi4+0x1a6>
    8318:	2100      	movs	r1, #0
    831a:	4608      	mov	r0, r1
    831c:	e77c      	b.n	8218 <__udivmoddi4+0xa0>
    831e:	e9c6 e000 	strd	lr, r0, [r6]
    8322:	e7f9      	b.n	8318 <__udivmoddi4+0x1a0>
    8324:	fab3 f783 	clz	r7, r3
    8328:	b98f      	cbnz	r7, 834e <__udivmoddi4+0x1d6>
    832a:	4283      	cmp	r3, r0
    832c:	d301      	bcc.n	8332 <__udivmoddi4+0x1ba>
    832e:	4572      	cmp	r2, lr
    8330:	d808      	bhi.n	8344 <__udivmoddi4+0x1cc>
    8332:	ebbe 0402 	subs.w	r4, lr, r2
    8336:	eb60 0303 	sbc.w	r3, r0, r3
    833a:	2001      	movs	r0, #1
    833c:	469c      	mov	ip, r3
    833e:	b91e      	cbnz	r6, 8348 <__udivmoddi4+0x1d0>
    8340:	2100      	movs	r1, #0
    8342:	e769      	b.n	8218 <__udivmoddi4+0xa0>
    8344:	4638      	mov	r0, r7
    8346:	e7fa      	b.n	833e <__udivmoddi4+0x1c6>
    8348:	e9c6 4c00 	strd	r4, ip, [r6]
    834c:	e7f8      	b.n	8340 <__udivmoddi4+0x1c8>
    834e:	f1c7 0c20 	rsb	ip, r7, #32
    8352:	40bb      	lsls	r3, r7
    8354:	fa0e f507 	lsl.w	r5, lr, r7
    8358:	fa22 f40c 	lsr.w	r4, r2, ip
    835c:	fa2e f10c 	lsr.w	r1, lr, ip
    8360:	40ba      	lsls	r2, r7
    8362:	431c      	orrs	r4, r3
    8364:	fa20 f30c 	lsr.w	r3, r0, ip
    8368:	40b8      	lsls	r0, r7
    836a:	ea4f 4914 	mov.w	r9, r4, lsr #16
    836e:	4301      	orrs	r1, r0
    8370:	fa1f fe84 	uxth.w	lr, r4
    8374:	fbb3 f8f9 	udiv	r8, r3, r9
    8378:	fb09 3018 	mls	r0, r9, r8, r3
    837c:	0c0b      	lsrs	r3, r1, #16
    837e:	fb08 fa0e 	mul.w	sl, r8, lr
    8382:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    8386:	459a      	cmp	sl, r3
    8388:	d940      	bls.n	840c <__udivmoddi4+0x294>
    838a:	18e3      	adds	r3, r4, r3
    838c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    8390:	d204      	bcs.n	839c <__udivmoddi4+0x224>
    8392:	459a      	cmp	sl, r3
    8394:	d902      	bls.n	839c <__udivmoddi4+0x224>
    8396:	f1a8 0002 	sub.w	r0, r8, #2
    839a:	4423      	add	r3, r4
    839c:	eba3 030a 	sub.w	r3, r3, sl
    83a0:	b289      	uxth	r1, r1
    83a2:	fbb3 f8f9 	udiv	r8, r3, r9
    83a6:	fb09 3318 	mls	r3, r9, r8, r3
    83aa:	fb08 fe0e 	mul.w	lr, r8, lr
    83ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    83b2:	458e      	cmp	lr, r1
    83b4:	d92c      	bls.n	8410 <__udivmoddi4+0x298>
    83b6:	1861      	adds	r1, r4, r1
    83b8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    83bc:	d204      	bcs.n	83c8 <__udivmoddi4+0x250>
    83be:	458e      	cmp	lr, r1
    83c0:	d902      	bls.n	83c8 <__udivmoddi4+0x250>
    83c2:	f1a8 0302 	sub.w	r3, r8, #2
    83c6:	4421      	add	r1, r4
    83c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    83cc:	eba1 010e 	sub.w	r1, r1, lr
    83d0:	fba0 9802 	umull	r9, r8, r0, r2
    83d4:	4541      	cmp	r1, r8
    83d6:	46ce      	mov	lr, r9
    83d8:	4643      	mov	r3, r8
    83da:	d302      	bcc.n	83e2 <__udivmoddi4+0x26a>
    83dc:	d106      	bne.n	83ec <__udivmoddi4+0x274>
    83de:	454d      	cmp	r5, r9
    83e0:	d204      	bcs.n	83ec <__udivmoddi4+0x274>
    83e2:	3801      	subs	r0, #1
    83e4:	ebb9 0e02 	subs.w	lr, r9, r2
    83e8:	eb68 0304 	sbc.w	r3, r8, r4
    83ec:	2e00      	cmp	r6, #0
    83ee:	d0a7      	beq.n	8340 <__udivmoddi4+0x1c8>
    83f0:	ebb5 020e 	subs.w	r2, r5, lr
    83f4:	eb61 0103 	sbc.w	r1, r1, r3
    83f8:	fa01 fc0c 	lsl.w	ip, r1, ip
    83fc:	fa22 f307 	lsr.w	r3, r2, r7
    8400:	40f9      	lsrs	r1, r7
    8402:	ea4c 0303 	orr.w	r3, ip, r3
    8406:	e9c6 3100 	strd	r3, r1, [r6]
    840a:	e799      	b.n	8340 <__udivmoddi4+0x1c8>
    840c:	4640      	mov	r0, r8
    840e:	e7c5      	b.n	839c <__udivmoddi4+0x224>
    8410:	4643      	mov	r3, r8
    8412:	e7d9      	b.n	83c8 <__udivmoddi4+0x250>

00008414 <strlen>:
    8414:	4603      	mov	r3, r0
    8416:	f813 2b01 	ldrb.w	r2, [r3], #1
    841a:	2a00      	cmp	r2, #0
    841c:	d1fb      	bne.n	8416 <strlen+0x2>
    841e:	1a18      	subs	r0, r3, r0
    8420:	3801      	subs	r0, #1
    8422:	4770      	bx	lr

00008424 <uart_cb>:
/* STEP 10.1.2 - Define the receive buffer */
static uint8_t rx_buf[RECEIVE_BUFF_SIZE] = {0};

/* STEP 7 - Define the callback function for UART */
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    8424:	b410      	push	{r4}
	switch (evt->type) {
    8426:	780a      	ldrb	r2, [r1, #0]
    8428:	2a02      	cmp	r2, #2
    842a:	d003      	beq.n	8434 <uart_cb+0x10>
    842c:	2a05      	cmp	r2, #5
    842e:	d019      	beq.n	8464 <uart_cb+0x40>
		break;
		
	default:
		break;
	}
}
    8430:	bc10      	pop	{r4}
    8432:	4770      	bx	lr
	if((evt->data.rx.len) == 1){
    8434:	68cb      	ldr	r3, [r1, #12]
    8436:	2b01      	cmp	r3, #1
    8438:	d1fa      	bne.n	8430 <uart_cb+0xc>
		if(evt->data.rx.buf[evt->data.rx.offset] == '1')
    843a:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    843e:	5cd3      	ldrb	r3, [r2, r3]
    8440:	2b31      	cmp	r3, #49	; 0x31
    8442:	d103      	bne.n	844c <uart_cb+0x28>
			gpio_pin_toggle_dt(&led0);
    8444:	480b      	ldr	r0, [pc, #44]	; (8474 <uart_cb+0x50>)
}
    8446:	bc10      	pop	{r4}
			gpio_pin_toggle_dt(&led1);
    8448:	f005 be9f 	b.w	e18a <gpio_pin_toggle_dt.isra.0>
		else if (evt->data.rx.buf[evt->data.rx.offset] == '2')
    844c:	2b32      	cmp	r3, #50	; 0x32
    844e:	d101      	bne.n	8454 <uart_cb+0x30>
			gpio_pin_toggle_dt(&led1);
    8450:	4809      	ldr	r0, [pc, #36]	; (8478 <uart_cb+0x54>)
    8452:	e7f8      	b.n	8446 <uart_cb+0x22>
		else if (evt->data.rx.buf[evt->data.rx.offset] == '3')
    8454:	2b33      	cmp	r3, #51	; 0x33
    8456:	d101      	bne.n	845c <uart_cb+0x38>
			gpio_pin_toggle_dt(&led2);	
    8458:	4808      	ldr	r0, [pc, #32]	; (847c <uart_cb+0x58>)
    845a:	e7f4      	b.n	8446 <uart_cb+0x22>
		else if (evt->data.rx.buf[evt->data.rx.offset] == '4')
    845c:	2b34      	cmp	r3, #52	; 0x34
    845e:	d1e7      	bne.n	8430 <uart_cb+0xc>
			gpio_pin_toggle_dt(&led3);				
    8460:	4807      	ldr	r0, [pc, #28]	; (8480 <uart_cb+0x5c>)
    8462:	e7f0      	b.n	8446 <uart_cb+0x22>
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
    8464:	6883      	ldr	r3, [r0, #8]
    8466:	220a      	movs	r2, #10
    8468:	68dc      	ldr	r4, [r3, #12]
    846a:	4906      	ldr	r1, [pc, #24]	; (8484 <uart_cb+0x60>)
    846c:	46a4      	mov	ip, r4
    846e:	2364      	movs	r3, #100	; 0x64
}
    8470:	bc10      	pop	{r4}
    8472:	4760      	bx	ip
    8474:	0000fe10 	.word	0x0000fe10
    8478:	0000fe08 	.word	0x0000fe08
    847c:	0000fe00 	.word	0x0000fe00
    8480:	0000fdf8 	.word	0x0000fdf8
    8484:	2000cf10 	.word	0x2000cf10

00008488 <main>:

int main(void)
{
    8488:	b538      	push	{r3, r4, r5, lr}
	int ret;

/* STEP 4.2 - Verify that the UART device is ready */ 
	if (!device_is_ready(uart)){
    848a:	4c23      	ldr	r4, [pc, #140]	; (8518 <main+0x90>)
    848c:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    848e:	f006 ff37 	bl	f300 <z_device_is_ready>
    8492:	b920      	cbnz	r0, 849e <main+0x16>
		printk("UART device not ready\r\n");
    8494:	4821      	ldr	r0, [pc, #132]	; (851c <main+0x94>)
		return 1 ;
	}
/* STEP 5.2 - Verify that the LED devices are ready */
	if (!device_is_ready(led0.port)){
		printk("GPIO device is not ready\r\n");
    8496:	f005 fe82 	bl	e19e <printk>
	}
	while (1) {
		k_msleep(SLEEP_TIME_MS);
	}

    849a:	2001      	movs	r0, #1
    849c:	bd38      	pop	{r3, r4, r5, pc}
    849e:	4820      	ldr	r0, [pc, #128]	; (8520 <main+0x98>)
    84a0:	f006 ff2e 	bl	f300 <z_device_is_ready>
	if (!device_is_ready(led0.port)){
    84a4:	b908      	cbnz	r0, 84aa <main+0x22>
		printk("GPIO device is not ready\r\n");
    84a6:	481f      	ldr	r0, [pc, #124]	; (8524 <main+0x9c>)
    84a8:	e7f5      	b.n	8496 <main+0xe>
ret = gpio_pin_configure_dt(&led0, GPIO_OUTPUT_ACTIVE);
    84aa:	481f      	ldr	r0, [pc, #124]	; (8528 <main+0xa0>)
    84ac:	f005 fe53 	bl	e156 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) {
    84b0:	2800      	cmp	r0, #0
    84b2:	dbf2      	blt.n	849a <main+0x12>
	ret = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_ACTIVE);
    84b4:	481d      	ldr	r0, [pc, #116]	; (852c <main+0xa4>)
    84b6:	f005 fe4e 	bl	e156 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) {
    84ba:	2800      	cmp	r0, #0
    84bc:	dbed      	blt.n	849a <main+0x12>
	ret = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_ACTIVE);
    84be:	481c      	ldr	r0, [pc, #112]	; (8530 <main+0xa8>)
    84c0:	f005 fe49 	bl	e156 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) {
    84c4:	2800      	cmp	r0, #0
    84c6:	dbe8      	blt.n	849a <main+0x12>
	ret = gpio_pin_configure_dt(&led3, GPIO_OUTPUT_ACTIVE);
    84c8:	481a      	ldr	r0, [pc, #104]	; (8534 <main+0xac>)
    84ca:	f005 fe44 	bl	e156 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0) {
    84ce:	2800      	cmp	r0, #0
    84d0:	dbe3      	blt.n	849a <main+0x12>
	ret = uart_callback_set(uart, uart_cb, NULL);
    84d2:	6820      	ldr	r0, [r4, #0]
	if (api->callback_set == NULL) {
    84d4:	6883      	ldr	r3, [r0, #8]
    84d6:	681b      	ldr	r3, [r3, #0]
    84d8:	2b00      	cmp	r3, #0
    84da:	d0de      	beq.n	849a <main+0x12>
	return api->callback_set(dev, callback, user_data);
    84dc:	2200      	movs	r2, #0
    84de:	4916      	ldr	r1, [pc, #88]	; (8538 <main+0xb0>)
    84e0:	4798      	blx	r3
		if (ret) {
    84e2:	2800      	cmp	r0, #0
    84e4:	d1d9      	bne.n	849a <main+0x12>
	ret = uart_tx(uart, tx_buf, sizeof(tx_buf), SYS_FOREVER_MS);
    84e6:	6820      	ldr	r0, [r4, #0]
	return api->tx(dev, buf, len, timeout);
    84e8:	6883      	ldr	r3, [r0, #8]
    84ea:	226d      	movs	r2, #109	; 0x6d
    84ec:	685d      	ldr	r5, [r3, #4]
    84ee:	4913      	ldr	r1, [pc, #76]	; (853c <main+0xb4>)
    84f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    84f4:	47a8      	blx	r5
	if (ret) {
    84f6:	2800      	cmp	r0, #0
    84f8:	d1cf      	bne.n	849a <main+0x12>
	ret = uart_rx_enable(uart ,rx_buf,sizeof rx_buf,RECEIVE_TIMEOUT);
    84fa:	6820      	ldr	r0, [r4, #0]
	return api->rx_enable(dev, buf, len, timeout);
    84fc:	6883      	ldr	r3, [r0, #8]
    84fe:	220a      	movs	r2, #10
    8500:	68dc      	ldr	r4, [r3, #12]
    8502:	490f      	ldr	r1, [pc, #60]	; (8540 <main+0xb8>)
    8504:	2364      	movs	r3, #100	; 0x64
    8506:	47a0      	blx	r4
	if (ret) {
    8508:	2800      	cmp	r0, #0
    850a:	d1c6      	bne.n	849a <main+0x12>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    850c:	2100      	movs	r1, #0
    850e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    8512:	f005 f817 	bl	d544 <z_impl_k_sleep>
    8516:	e7f9      	b.n	850c <main+0x84>
    8518:	2000c650 	.word	0x2000c650
    851c:	0001018c 	.word	0x0001018c
    8520:	0000fb10 	.word	0x0000fb10
    8524:	000101a4 	.word	0x000101a4
    8528:	0000fe10 	.word	0x0000fe10
    852c:	0000fe08 	.word	0x0000fe08
    8530:	0000fe00 	.word	0x0000fe00
    8534:	0000fdf8 	.word	0x0000fdf8
    8538:	00008425 	.word	0x00008425
    853c:	2000c778 	.word	0x2000c778
    8540:	2000cf10 	.word	0x2000cf10

00008544 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    8544:	4b01      	ldr	r3, [pc, #4]	; (854c <char_out+0x8>)
    8546:	681b      	ldr	r3, [r3, #0]
    8548:	4718      	bx	r3
    854a:	bf00      	nop
    854c:	2000c654 	.word	0x2000c654

00008550 <__printk_hook_install>:
	_char_out = fn;
    8550:	4b01      	ldr	r3, [pc, #4]	; (8558 <__printk_hook_install+0x8>)
    8552:	6018      	str	r0, [r3, #0]
}
    8554:	4770      	bx	lr
    8556:	bf00      	nop
    8558:	2000c654 	.word	0x2000c654

0000855c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    855c:	b507      	push	{r0, r1, r2, lr}
    855e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    8560:	2100      	movs	r1, #0
    8562:	4602      	mov	r2, r0
    8564:	9100      	str	r1, [sp, #0]
    8566:	4803      	ldr	r0, [pc, #12]	; (8574 <vprintk+0x18>)
    8568:	f000 f976 	bl	8858 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    856c:	b003      	add	sp, #12
    856e:	f85d fb04 	ldr.w	pc, [sp], #4
    8572:	bf00      	nop
    8574:	00008545 	.word	0x00008545

00008578 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    8578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    857c:	8b05      	ldrh	r5, [r0, #24]
{
    857e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    8580:	0728      	lsls	r0, r5, #28
{
    8582:	4690      	mov	r8, r2
	if (processing) {
    8584:	d411      	bmi.n	85aa <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    8586:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8588:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    858c:	f040 80cd 	bne.w	872a <_flash_used+0x12>
			evt = process_recheck(mgr);
    8590:	4620      	mov	r0, r4
    8592:	f005 ffe5 	bl	e560 <process_recheck>
		}

		if (evt == EVT_NOP) {
    8596:	b178      	cbz	r0, 85b8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    8598:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    859a:	8b21      	ldrh	r1, [r4, #24]
    859c:	2804      	cmp	r0, #4
    859e:	d811      	bhi.n	85c4 <process_event+0x4c>
    85a0:	e8df f000 	tbb	[pc, r0]
    85a4:	856d10c3 	.word	0x856d10c3
    85a8:	95          	.byte	0x95
    85a9:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    85aa:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    85ac:	bf0c      	ite	eq
    85ae:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    85b2:	f045 0520 	orrne.w	r5, r5, #32
    85b6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    85b8:	f388 8811 	msr	BASEPRI, r8
    85bc:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    85c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    85c4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    85c8:	45aa      	cmp	sl, r5
    85ca:	f000 80a6 	beq.w	871a <_flash_used+0x2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    85ce:	2700      	movs	r7, #0
    85d0:	46b9      	mov	r9, r7
    85d2:	463e      	mov	r6, r7
    85d4:	68a3      	ldr	r3, [r4, #8]
    85d6:	2b00      	cmp	r3, #0
    85d8:	f000 80bd 	beq.w	8756 <_flash_used+0x3e>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    85dc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    85e0:	8321      	strh	r1, [r4, #24]
    85e2:	f388 8811 	msr	BASEPRI, r8
    85e6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    85ea:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    85ec:	2900      	cmp	r1, #0
    85ee:	f000 80bb 	beq.w	8768 <_flash_used+0x50>
	return node->next;
    85f2:	680d      	ldr	r5, [r1, #0]
    85f4:	2900      	cmp	r1, #0
    85f6:	f000 80b7 	beq.w	8768 <_flash_used+0x50>
		mon->callback(mgr, mon, state, res);
    85fa:	4633      	mov	r3, r6
    85fc:	4652      	mov	r2, sl
    85fe:	4620      	mov	r0, r4
    8600:	f8d1 8004 	ldr.w	r8, [r1, #4]
    8604:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    8606:	2d00      	cmp	r5, #0
    8608:	d076      	beq.n	86f8 <process_event+0x180>
    860a:	682b      	ldr	r3, [r5, #0]
    860c:	4629      	mov	r1, r5
    860e:	461d      	mov	r5, r3
    8610:	e7f0      	b.n	85f4 <process_event+0x7c>
    8612:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    8616:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    8618:	2a01      	cmp	r2, #1
    861a:	d81b      	bhi.n	8654 <process_event+0xdc>
	list->head = NULL;
    861c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    861e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    8622:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    8624:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8626:	b289      	uxth	r1, r1
	list->tail = NULL;
    8628:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    862c:	d109      	bne.n	8642 <process_event+0xca>
    862e:	463b      	mov	r3, r7
    8630:	e003      	b.n	863a <process_event+0xc2>
				mgr->refs += 1U;
    8632:	8b62      	ldrh	r2, [r4, #26]
    8634:	3201      	adds	r2, #1
    8636:	8362      	strh	r2, [r4, #26]
	return node->next;
    8638:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    863a:	2b00      	cmp	r3, #0
    863c:	d1f9      	bne.n	8632 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    863e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    8642:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8644:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    8646:	f005 ff8b 	bl	e560 <process_recheck>
    864a:	2800      	cmp	r0, #0
    864c:	d07b      	beq.n	8746 <_flash_used+0x2e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    864e:	f041 0120 	orr.w	r1, r1, #32
    8652:	e077      	b.n	8744 <_flash_used+0x2c>
	} else if (state == ONOFF_STATE_TO_OFF) {
    8654:	2b04      	cmp	r3, #4
    8656:	d10a      	bne.n	866e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8658:	f021 0107 	bic.w	r1, r1, #7
    865c:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    865e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    8660:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    8662:	f005 ff7d 	bl	e560 <process_recheck>
    8666:	b110      	cbz	r0, 866e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8668:	f041 0120 	orr.w	r1, r1, #32
    866c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    866e:	8b21      	ldrh	r1, [r4, #24]
    8670:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8674:	45aa      	cmp	sl, r5
    8676:	d050      	beq.n	871a <_flash_used+0x2>
    8678:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    867a:	46b9      	mov	r9, r7
    867c:	e7aa      	b.n	85d4 <process_event+0x5c>
			transit = mgr->transitions->start;
    867e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    8680:	f021 0107 	bic.w	r1, r1, #7
    8684:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    8688:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    868a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    868e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    8690:	d12d      	bne.n	86ee <process_event+0x176>
		    || (transit != NULL)) {
    8692:	f1b9 0f00 	cmp.w	r9, #0
    8696:	d040      	beq.n	871a <_flash_used+0x2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    8698:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    869c:	8321      	strh	r1, [r4, #24]
    869e:	f388 8811 	msr	BASEPRI, r8
    86a2:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    86a6:	4620      	mov	r0, r4
    86a8:	4939      	ldr	r1, [pc, #228]	; (8790 <_flash_used+0x78>)
    86aa:	47c8      	blx	r9
    86ac:	e029      	b.n	8702 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    86ae:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    86b2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    86b4:	f041 0104 	orr.w	r1, r1, #4
    86b8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    86ba:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    86bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    86c0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    86c2:	d0e6      	beq.n	8692 <process_event+0x11a>
    86c4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    86c6:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    86ca:	463e      	mov	r6, r7
    86cc:	e782      	b.n	85d4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    86ce:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    86d2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    86d4:	f041 0105 	orr.w	r1, r1, #5
    86d8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    86da:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    86dc:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    86e0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    86e2:	d0d6      	beq.n	8692 <process_event+0x11a>
    86e4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    86e6:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    86ea:	463e      	mov	r6, r7
    86ec:	e772      	b.n	85d4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    86ee:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    86f0:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    86f4:	463e      	mov	r6, r7
    86f6:	e76d      	b.n	85d4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    86f8:	462b      	mov	r3, r5
    86fa:	e787      	b.n	860c <process_event+0x94>
			if (transit != NULL) {
    86fc:	f1b9 0f00 	cmp.w	r9, #0
    8700:	d1d1      	bne.n	86a6 <process_event+0x12e>
	__asm__ volatile(
    8702:	f04f 0320 	mov.w	r3, #32
    8706:	f3ef 8811 	mrs	r8, BASEPRI
    870a:	f383 8812 	msr	BASEPRI_MAX, r3
    870e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    8712:	8b23      	ldrh	r3, [r4, #24]
    8714:	f023 0308 	bic.w	r3, r3, #8
    8718:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    871a:	8b25      	ldrh	r5, [r4, #24]
    871c:	06ea      	lsls	r2, r5, #27
    871e:	d52e      	bpl.n	877e <_flash_used+0x66>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    8720:	f025 0310 	bic.w	r3, r5, #16
    8724:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    8726:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    872a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    872c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    872e:	2e00      	cmp	r6, #0
    8730:	f6bf af6f 	bge.w	8612 <process_event+0x9a>
	list->head = NULL;
    8734:	2300      	movs	r3, #0
		*clients = mgr->clients;
    8736:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    8738:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    873c:	f021 0107 	bic.w	r1, r1, #7
    8740:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    8744:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    8746:	8b21      	ldrh	r1, [r4, #24]
    8748:	f04f 0900 	mov.w	r9, #0
    874c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    8750:	45aa      	cmp	sl, r5
    8752:	f47f af3f 	bne.w	85d4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    8756:	2f00      	cmp	r7, #0
    8758:	d09b      	beq.n	8692 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    875a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    875e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    8760:	f388 8811 	msr	BASEPRI, r8
    8764:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    8768:	2f00      	cmp	r7, #0
    876a:	d0c7      	beq.n	86fc <process_event+0x184>
	return node->next;
    876c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    876e:	4639      	mov	r1, r7
    8770:	4633      	mov	r3, r6
    8772:	4652      	mov	r2, sl
    8774:	4620      	mov	r0, r4
    8776:	f005 ff1f 	bl	e5b8 <notify_one>
	list->head = node;
    877a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    877c:	e7f4      	b.n	8768 <_flash_used+0x50>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    877e:	06ab      	lsls	r3, r5, #26
    8780:	f57f af1a 	bpl.w	85b8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    8784:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    8788:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    878a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    878e:	e6ff      	b.n	8590 <process_event+0x18>
    8790:	0000e5e5 	.word	0x0000e5e5

00008794 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    8794:	b5f0      	push	{r4, r5, r6, r7, lr}
    8796:	4602      	mov	r2, r0
    8798:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp) != 0) {
		val = 10U * val + *sp++ - '0';
    879a:	270a      	movs	r7, #10
	size_t val = 0;
    879c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp) != 0) {
    879e:	4e07      	ldr	r6, [pc, #28]	; (87bc <extract_decimal+0x28>)
    87a0:	460b      	mov	r3, r1
    87a2:	781c      	ldrb	r4, [r3, #0]
    87a4:	3101      	adds	r1, #1
    87a6:	5d35      	ldrb	r5, [r6, r4]
    87a8:	076d      	lsls	r5, r5, #29
    87aa:	d401      	bmi.n	87b0 <extract_decimal+0x1c>
	}
	*str = sp;
    87ac:	6013      	str	r3, [r2, #0]
	return val;
}
    87ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    87b0:	fb07 4300 	mla	r3, r7, r0, r4
    87b4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    87b8:	e7f2      	b.n	87a0 <extract_decimal+0xc>
    87ba:	bf00      	nop
    87bc:	00010312 	.word	0x00010312

000087c0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    87c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87c4:	4615      	mov	r5, r2
    87c6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    87c8:	78d3      	ldrb	r3, [r2, #3]
    87ca:	4a22      	ldr	r2, [pc, #136]	; (8854 <encode_uint+0x94>)
	switch (specifier) {
    87cc:	2b6f      	cmp	r3, #111	; 0x6f
    87ce:	f812 b003 	ldrb.w	fp, [r2, r3]
{
    87d2:	4680      	mov	r8, r0
    87d4:	460f      	mov	r7, r1
    87d6:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    87da:	d029      	beq.n	8830 <encode_uint+0x70>
    87dc:	d824      	bhi.n	8828 <encode_uint+0x68>
		return 10;
    87de:	2b58      	cmp	r3, #88	; 0x58
    87e0:	bf0c      	ite	eq
    87e2:	2610      	moveq	r6, #16
    87e4:	260a      	movne	r6, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    87e6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    87ea:	4632      	mov	r2, r6
    87ec:	2300      	movs	r3, #0
    87ee:	4640      	mov	r0, r8
    87f0:	4639      	mov	r1, r7
    87f2:	f7ff fca7 	bl	8144 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    87f6:	2a09      	cmp	r2, #9
    87f8:	b2d4      	uxtb	r4, r2
    87fa:	d81e      	bhi.n	883a <encode_uint+0x7a>
    87fc:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    87fe:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8800:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    8802:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8806:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    880a:	d301      	bcc.n	8810 <encode_uint+0x50>
    880c:	45d1      	cmp	r9, sl
    880e:	d811      	bhi.n	8834 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    8810:	782b      	ldrb	r3, [r5, #0]
    8812:	069b      	lsls	r3, r3, #26
    8814:	d505      	bpl.n	8822 <encode_uint+0x62>
		if (radix == 8) {
    8816:	2e08      	cmp	r6, #8
    8818:	d115      	bne.n	8846 <encode_uint+0x86>
			conv->altform_0 = true;
    881a:	78ab      	ldrb	r3, [r5, #2]
    881c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    8820:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    8822:	4648      	mov	r0, r9
    8824:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8828:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    882c:	2b70      	cmp	r3, #112	; 0x70
    882e:	e7d7      	b.n	87e0 <encode_uint+0x20>
	switch (specifier) {
    8830:	2608      	movs	r6, #8
    8832:	e7d8      	b.n	87e6 <encode_uint+0x26>
		value /= radix;
    8834:	4680      	mov	r8, r0
    8836:	460f      	mov	r7, r1
    8838:	e7d7      	b.n	87ea <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    883a:	f1bb 0f01 	cmp.w	fp, #1
    883e:	bf0c      	ite	eq
    8840:	3437      	addeq	r4, #55	; 0x37
    8842:	3457      	addne	r4, #87	; 0x57
    8844:	e7db      	b.n	87fe <encode_uint+0x3e>
		} else if (radix == 16) {
    8846:	2e10      	cmp	r6, #16
    8848:	d1eb      	bne.n	8822 <encode_uint+0x62>
			conv->altform_0c = true;
    884a:	78ab      	ldrb	r3, [r5, #2]
    884c:	f043 0310 	orr.w	r3, r3, #16
    8850:	e7e6      	b.n	8820 <encode_uint+0x60>
    8852:	bf00      	nop
    8854:	00010312 	.word	0x00010312

00008858 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    8858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    885c:	468a      	mov	sl, r1
    885e:	4616      	mov	r6, r2
    8860:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    8862:	2500      	movs	r5, #0
{
    8864:	b097      	sub	sp, #92	; 0x5c
    8866:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    8868:	7830      	ldrb	r0, [r6, #0]
    886a:	b908      	cbnz	r0, 8870 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    886c:	4628      	mov	r0, r5
    886e:	e34a      	b.n	8f06 <z_cbvprintf_impl+0x6ae>
			OUTC(*fp++);
    8870:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    8872:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    8874:	9304      	str	r3, [sp, #16]
		if (*fp != '%') {
    8876:	d007      	beq.n	8888 <z_cbvprintf_impl+0x30>
			OUTC('%');
    8878:	4651      	mov	r1, sl
    887a:	9b03      	ldr	r3, [sp, #12]
    887c:	4798      	blx	r3
    887e:	2800      	cmp	r0, #0
    8880:	f2c0 8341 	blt.w	8f06 <z_cbvprintf_impl+0x6ae>
    8884:	3501      	adds	r5, #1
		if (bps == NULL) {
    8886:	e1f0      	b.n	8c6a <z_cbvprintf_impl+0x412>
		} state = {
    8888:	2218      	movs	r2, #24
    888a:	2100      	movs	r1, #0
    888c:	a810      	add	r0, sp, #64	; 0x40
    888e:	f006 ff79 	bl	f784 <memset>
	if (*sp == '%') {
    8892:	7873      	ldrb	r3, [r6, #1]
    8894:	2b25      	cmp	r3, #37	; 0x25
    8896:	f000 80a3 	beq.w	89e0 <z_cbvprintf_impl+0x188>
    889a:	2300      	movs	r3, #0
    889c:	4698      	mov	r8, r3
    889e:	469e      	mov	lr, r3
    88a0:	469c      	mov	ip, r3
    88a2:	4618      	mov	r0, r3
    88a4:	1c71      	adds	r1, r6, #1
    88a6:	460f      	mov	r7, r1
		switch (*sp) {
    88a8:	f811 2b01 	ldrb.w	r2, [r1], #1
    88ac:	2a2b      	cmp	r2, #43	; 0x2b
    88ae:	f000 80c6 	beq.w	8a3e <z_cbvprintf_impl+0x1e6>
    88b2:	f200 80bd 	bhi.w	8a30 <z_cbvprintf_impl+0x1d8>
    88b6:	2a20      	cmp	r2, #32
    88b8:	f000 80c4 	beq.w	8a44 <z_cbvprintf_impl+0x1ec>
    88bc:	2a23      	cmp	r2, #35	; 0x23
    88be:	f000 80c4 	beq.w	8a4a <z_cbvprintf_impl+0x1f2>
    88c2:	b12b      	cbz	r3, 88d0 <z_cbvprintf_impl+0x78>
    88c4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    88c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    88cc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    88d0:	f1b8 0f00 	cmp.w	r8, #0
    88d4:	d005      	beq.n	88e2 <z_cbvprintf_impl+0x8a>
    88d6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    88da:	f043 0320 	orr.w	r3, r3, #32
    88de:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    88e2:	f1be 0f00 	cmp.w	lr, #0
    88e6:	d005      	beq.n	88f4 <z_cbvprintf_impl+0x9c>
    88e8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    88ec:	f043 0310 	orr.w	r3, r3, #16
    88f0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    88f4:	f1bc 0f00 	cmp.w	ip, #0
    88f8:	d005      	beq.n	8906 <z_cbvprintf_impl+0xae>
    88fa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    88fe:	f043 0308 	orr.w	r3, r3, #8
    8902:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    8906:	b128      	cbz	r0, 8914 <z_cbvprintf_impl+0xbc>
    8908:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    890c:	f043 0304 	orr.w	r3, r3, #4
    8910:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    8914:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8918:	f003 0144 	and.w	r1, r3, #68	; 0x44
    891c:	2944      	cmp	r1, #68	; 0x44
    891e:	d103      	bne.n	8928 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
    8920:	f36f 1386 	bfc	r3, #6, #1
    8924:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    8928:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    892c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    892e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8932:	9709      	str	r7, [sp, #36]	; 0x24
    8934:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    8938:	f040 808c 	bne.w	8a54 <z_cbvprintf_impl+0x1fc>
		conv->width_star = true;
    893c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8940:	f043 0301 	orr.w	r3, r3, #1
    8944:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    8948:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    894a:	781a      	ldrb	r2, [r3, #0]
    894c:	2a2e      	cmp	r2, #46	; 0x2e
    894e:	bf0c      	ite	eq
    8950:	2101      	moveq	r1, #1
    8952:	2100      	movne	r1, #0
    8954:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8958:	f361 0241 	bfi	r2, r1, #1, #1
    895c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    8960:	d10c      	bne.n	897c <z_cbvprintf_impl+0x124>
	++sp;
    8962:	1c5a      	adds	r2, r3, #1
    8964:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
    8966:	785a      	ldrb	r2, [r3, #1]
    8968:	2a2a      	cmp	r2, #42	; 0x2a
    896a:	f040 8083 	bne.w	8a74 <z_cbvprintf_impl+0x21c>
		conv->prec_star = true;
    896e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    8972:	3302      	adds	r3, #2
		conv->prec_star = true;
    8974:	f042 0204 	orr.w	r2, r2, #4
    8978:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	switch (*sp) {
    897c:	781a      	ldrb	r2, [r3, #0]
    897e:	2a6c      	cmp	r2, #108	; 0x6c
    8980:	f000 80a4 	beq.w	8acc <z_cbvprintf_impl+0x274>
    8984:	f200 8086 	bhi.w	8a94 <z_cbvprintf_impl+0x23c>
    8988:	2a68      	cmp	r2, #104	; 0x68
    898a:	f000 808c 	beq.w	8aa6 <z_cbvprintf_impl+0x24e>
    898e:	2a6a      	cmp	r2, #106	; 0x6a
    8990:	f000 80a5 	beq.w	8ade <z_cbvprintf_impl+0x286>
    8994:	2a4c      	cmp	r2, #76	; 0x4c
    8996:	f000 80aa 	beq.w	8aee <z_cbvprintf_impl+0x296>
	conv->specifier = *sp++;
    899a:	461a      	mov	r2, r3
    899c:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    89a0:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    89a2:	9204      	str	r2, [sp, #16]
    89a4:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->length_mod == LENGTH_UPPER_L) {
    89a8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
	switch (conv->specifier) {
    89ac:	f200 8117 	bhi.w	8bde <z_cbvprintf_impl+0x386>
    89b0:	2b6d      	cmp	r3, #109	; 0x6d
    89b2:	f200 80a9 	bhi.w	8b08 <z_cbvprintf_impl+0x2b0>
    89b6:	2b69      	cmp	r3, #105	; 0x69
    89b8:	f200 8111 	bhi.w	8bde <z_cbvprintf_impl+0x386>
    89bc:	2b57      	cmp	r3, #87	; 0x57
    89be:	f200 80be 	bhi.w	8b3e <z_cbvprintf_impl+0x2e6>
    89c2:	2b41      	cmp	r3, #65	; 0x41
    89c4:	d003      	beq.n	89ce <z_cbvprintf_impl+0x176>
    89c6:	3b45      	subs	r3, #69	; 0x45
    89c8:	2b02      	cmp	r3, #2
    89ca:	f200 8108 	bhi.w	8bde <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_FP;
    89ce:	2204      	movs	r2, #4
    89d0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    89d4:	f362 0302 	bfi	r3, r2, #0, #3
    89d8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			unsupported = true;
    89dc:	2301      	movs	r3, #1
			break;
    89de:	e0ca      	b.n	8b76 <z_cbvprintf_impl+0x31e>
		conv->specifier = *sp++;
    89e0:	1cb2      	adds	r2, r6, #2
    89e2:	9204      	str	r2, [sp, #16]
    89e4:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    89e8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    89ec:	07d9      	lsls	r1, r3, #31
    89ee:	f140 80fd 	bpl.w	8bec <z_cbvprintf_impl+0x394>
			width = va_arg(ap, int);
    89f2:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    89f6:	f1b8 0f00 	cmp.w	r8, #0
    89fa:	da07      	bge.n	8a0c <z_cbvprintf_impl+0x1b4>
				conv->flag_dash = true;
    89fc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				width = -width;
    8a00:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    8a04:	f042 0204 	orr.w	r2, r2, #4
    8a08:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		if (conv->prec_star) {
    8a0c:	075a      	lsls	r2, r3, #29
    8a0e:	f140 80f6 	bpl.w	8bfe <z_cbvprintf_impl+0x3a6>
			int arg = va_arg(ap, int);
    8a12:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    8a16:	f1bb 0f00 	cmp.w	fp, #0
    8a1a:	f280 80f5 	bge.w	8c08 <z_cbvprintf_impl+0x3b0>
				conv->prec_present = false;
    8a1e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    8a22:	f36f 0341 	bfc	r3, #1, #1
    8a26:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    8a2a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    8a2e:	e0eb      	b.n	8c08 <z_cbvprintf_impl+0x3b0>
		switch (*sp) {
    8a30:	2a2d      	cmp	r2, #45	; 0x2d
    8a32:	d00d      	beq.n	8a50 <z_cbvprintf_impl+0x1f8>
    8a34:	2a30      	cmp	r2, #48	; 0x30
    8a36:	f47f af44 	bne.w	88c2 <z_cbvprintf_impl+0x6a>
    8a3a:	2301      	movs	r3, #1
	} while (loop);
    8a3c:	e733      	b.n	88a6 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    8a3e:	f04f 0c01 	mov.w	ip, #1
    8a42:	e730      	b.n	88a6 <z_cbvprintf_impl+0x4e>
    8a44:	f04f 0e01 	mov.w	lr, #1
    8a48:	e72d      	b.n	88a6 <z_cbvprintf_impl+0x4e>
    8a4a:	f04f 0801 	mov.w	r8, #1
    8a4e:	e72a      	b.n	88a6 <z_cbvprintf_impl+0x4e>
    8a50:	2001      	movs	r0, #1
    8a52:	e728      	b.n	88a6 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    8a54:	a809      	add	r0, sp, #36	; 0x24
    8a56:	f7ff fe9d 	bl	8794 <extract_decimal>
	if (sp != wp) {
    8a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8a5c:	42bb      	cmp	r3, r7
    8a5e:	f43f af74 	beq.w	894a <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    8a62:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    8a66:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    8a68:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    8a6a:	f360 0241 	bfi	r2, r0, #1, #1
    8a6e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    8a72:	e76a      	b.n	894a <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
    8a74:	a809      	add	r0, sp, #36	; 0x24
    8a76:	f7ff fe8d 	bl	8794 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    8a7a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    8a7e:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    8a80:	f3c3 0240 	ubfx	r2, r3, #1, #1
    8a84:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    8a88:	f362 0341 	bfi	r3, r2, #1, #1
    8a8c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    8a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8a92:	e773      	b.n	897c <z_cbvprintf_impl+0x124>
	switch (*sp) {
    8a94:	2a74      	cmp	r2, #116	; 0x74
    8a96:	d026      	beq.n	8ae6 <z_cbvprintf_impl+0x28e>
    8a98:	2a7a      	cmp	r2, #122	; 0x7a
    8a9a:	f47f af7e 	bne.w	899a <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
    8a9e:	2106      	movs	r1, #6
    8aa0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8aa4:	e00c      	b.n	8ac0 <z_cbvprintf_impl+0x268>
		if (*++sp == 'h') {
    8aa6:	785a      	ldrb	r2, [r3, #1]
    8aa8:	2a68      	cmp	r2, #104	; 0x68
    8aaa:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8aae:	d106      	bne.n	8abe <z_cbvprintf_impl+0x266>
			conv->length_mod = LENGTH_HH;
    8ab0:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    8ab2:	f361 02c6 	bfi	r2, r1, #3, #4
    8ab6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    8aba:	3302      	adds	r3, #2
    8abc:	e76d      	b.n	899a <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
    8abe:	2102      	movs	r1, #2
    8ac0:	f361 02c6 	bfi	r2, r1, #3, #4
    8ac4:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    8ac8:	3301      	adds	r3, #1
    8aca:	e766      	b.n	899a <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
    8acc:	785a      	ldrb	r2, [r3, #1]
    8ace:	2a6c      	cmp	r2, #108	; 0x6c
    8ad0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8ad4:	d101      	bne.n	8ada <z_cbvprintf_impl+0x282>
			conv->length_mod = LENGTH_LL;
    8ad6:	2104      	movs	r1, #4
    8ad8:	e7eb      	b.n	8ab2 <z_cbvprintf_impl+0x25a>
			conv->length_mod = LENGTH_L;
    8ada:	2103      	movs	r1, #3
    8adc:	e7f0      	b.n	8ac0 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_J;
    8ade:	2105      	movs	r1, #5
    8ae0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8ae4:	e7ec      	b.n	8ac0 <z_cbvprintf_impl+0x268>
		conv->length_mod = LENGTH_T;
    8ae6:	2107      	movs	r1, #7
    8ae8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    8aec:	e7e8      	b.n	8ac0 <z_cbvprintf_impl+0x268>
		conv->unsupported = true;
    8aee:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    8af2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    8af6:	f022 0202 	bic.w	r2, r2, #2
    8afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    8afe:	f042 0202 	orr.w	r2, r2, #2
    8b02:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    8b06:	e7df      	b.n	8ac8 <z_cbvprintf_impl+0x270>
	switch (conv->specifier) {
    8b08:	3b6e      	subs	r3, #110	; 0x6e
    8b0a:	b2d9      	uxtb	r1, r3
    8b0c:	2301      	movs	r3, #1
    8b0e:	408b      	lsls	r3, r1
    8b10:	f240 4182 	movw	r1, #1154	; 0x482
    8b14:	420b      	tst	r3, r1
    8b16:	d138      	bne.n	8b8a <z_cbvprintf_impl+0x332>
    8b18:	f013 0f24 	tst.w	r3, #36	; 0x24
    8b1c:	d152      	bne.n	8bc4 <z_cbvprintf_impl+0x36c>
    8b1e:	07df      	lsls	r7, r3, #31
    8b20:	d55d      	bpl.n	8bde <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_PTR;
    8b22:	2103      	movs	r1, #3
    8b24:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8b28:	f361 0302 	bfi	r3, r1, #0, #3
    8b2c:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b30:	f002 0378 	and.w	r3, r2, #120	; 0x78
    8b34:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
    8b38:	4243      	negs	r3, r0
    8b3a:	4143      	adcs	r3, r0
    8b3c:	e01b      	b.n	8b76 <z_cbvprintf_impl+0x31e>
    8b3e:	2001      	movs	r0, #1
	switch (conv->specifier) {
    8b40:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    8b44:	b2c9      	uxtb	r1, r1
    8b46:	fa00 f101 	lsl.w	r1, r0, r1
    8b4a:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    8b4e:	f47f af3e 	bne.w	89ce <z_cbvprintf_impl+0x176>
    8b52:	f640 0701 	movw	r7, #2049	; 0x801
    8b56:	4239      	tst	r1, r7
    8b58:	d11d      	bne.n	8b96 <z_cbvprintf_impl+0x33e>
    8b5a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    8b5e:	d03e      	beq.n	8bde <z_cbvprintf_impl+0x386>
		conv->specifier_cat = SPECIFIER_SINT;
    8b60:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8b64:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b68:	f002 0278 	and.w	r2, r2, #120	; 0x78
    8b6c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    8b6e:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b72:	d034      	beq.n	8bde <z_cbvprintf_impl+0x386>
	bool unsupported = false;
    8b74:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    8b76:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    8b7a:	f3c2 0140 	ubfx	r1, r2, #1, #1
    8b7e:	430b      	orrs	r3, r1
    8b80:	f363 0241 	bfi	r2, r3, #1, #1
    8b84:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    8b88:	e72e      	b.n	89e8 <z_cbvprintf_impl+0x190>
		conv->specifier_cat = SPECIFIER_UINT;
    8b8a:	2102      	movs	r1, #2
    8b8c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8b90:	f361 0302 	bfi	r3, r1, #0, #3
    8b94:	e7e8      	b.n	8b68 <z_cbvprintf_impl+0x310>
    8b96:	2002      	movs	r0, #2
    8b98:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    8b9c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    8ba0:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    8ba4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    8ba6:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    8baa:	bf02      	ittt	eq
    8bac:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    8bb0:	f041 0101 	orreq.w	r1, r1, #1
    8bb4:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    8bb8:	2b63      	cmp	r3, #99	; 0x63
    8bba:	d1db      	bne.n	8b74 <z_cbvprintf_impl+0x31c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    8bbc:	1e13      	subs	r3, r2, #0
    8bbe:	bf18      	it	ne
    8bc0:	2301      	movne	r3, #1
    8bc2:	e7d8      	b.n	8b76 <z_cbvprintf_impl+0x31e>
		conv->specifier_cat = SPECIFIER_PTR;
    8bc4:	2103      	movs	r1, #3
    8bc6:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    8bca:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    8bce:	f361 0302 	bfi	r3, r1, #0, #3
    8bd2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    8bd6:	bf14      	ite	ne
    8bd8:	2301      	movne	r3, #1
    8bda:	2300      	moveq	r3, #0
    8bdc:	e7cb      	b.n	8b76 <z_cbvprintf_impl+0x31e>
		conv->invalid = true;
    8bde:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8be2:	f043 0301 	orr.w	r3, r3, #1
    8be6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    8bea:	e7c3      	b.n	8b74 <z_cbvprintf_impl+0x31c>
		} else if (conv->width_present) {
    8bec:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    8bf0:	2a00      	cmp	r2, #0
		int width = -1;
    8bf2:	bfac      	ite	ge
    8bf4:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
    8bf8:	f8dd 804c 	ldrlt.w	r8, [sp, #76]	; 0x4c
    8bfc:	e706      	b.n	8a0c <z_cbvprintf_impl+0x1b4>
		} else if (conv->prec_present) {
    8bfe:	079f      	lsls	r7, r3, #30
    8c00:	f57f af13 	bpl.w	8a2a <z_cbvprintf_impl+0x1d2>
			precision = conv->prec_value;
    8c04:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    8c08:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    8c0a:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
			= (enum specifier_cat_enum)conv->specifier_cat;
    8c0e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			= (enum length_mod_enum)conv->length_mod;
    8c12:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		enum specifier_cat_enum specifier_cat
    8c16:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    8c1a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    8c1c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    8c20:	d133      	bne.n	8c8a <z_cbvprintf_impl+0x432>
			switch (length_mod) {
    8c22:	1ecb      	subs	r3, r1, #3
    8c24:	2b04      	cmp	r3, #4
    8c26:	d804      	bhi.n	8c32 <z_cbvprintf_impl+0x3da>
    8c28:	e8df f003 	tbb	[pc, r3]
    8c2c:	21464621 	.word	0x21464621
    8c30:	21          	.byte	0x21
    8c31:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    8c32:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    8c34:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    8c36:	ea4f 72e3 	mov.w	r2, r3, asr #31
    8c3a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    8c3e:	d11c      	bne.n	8c7a <z_cbvprintf_impl+0x422>
				value->sint = (signed char)value->sint;
    8c40:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    8c44:	17da      	asrs	r2, r3, #31
    8c46:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    8c4a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    8c4c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8c50:	f013 0703 	ands.w	r7, r3, #3
    8c54:	d050      	beq.n	8cf8 <z_cbvprintf_impl+0x4a0>
			OUTS(sp, fp);
    8c56:	4632      	mov	r2, r6
    8c58:	4651      	mov	r1, sl
    8c5a:	9b04      	ldr	r3, [sp, #16]
    8c5c:	9803      	ldr	r0, [sp, #12]
    8c5e:	f005 fd58 	bl	e712 <outs>
    8c62:	2800      	cmp	r0, #0
    8c64:	f2c0 814f 	blt.w	8f06 <z_cbvprintf_impl+0x6ae>
    8c68:	4405      	add	r5, r0
			continue;
    8c6a:	9e04      	ldr	r6, [sp, #16]
    8c6c:	e5fc      	b.n	8868 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    8c6e:	f854 3b04 	ldr.w	r3, [r4], #4
    8c72:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    8c74:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    8c78:	e7e8      	b.n	8c4c <z_cbvprintf_impl+0x3f4>
			} else if (length_mod == LENGTH_H) {
    8c7a:	2902      	cmp	r1, #2
    8c7c:	d1e5      	bne.n	8c4a <z_cbvprintf_impl+0x3f2>
				value->sint = (short)value->sint;
    8c7e:	b21a      	sxth	r2, r3
    8c80:	f343 33c0 	sbfx	r3, r3, #15, #1
    8c84:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    8c88:	e7df      	b.n	8c4a <z_cbvprintf_impl+0x3f2>
		} else if (specifier_cat == SPECIFIER_UINT) {
    8c8a:	2b02      	cmp	r3, #2
    8c8c:	d124      	bne.n	8cd8 <z_cbvprintf_impl+0x480>
			switch (length_mod) {
    8c8e:	1ecb      	subs	r3, r1, #3
    8c90:	2b04      	cmp	r3, #4
    8c92:	d804      	bhi.n	8c9e <z_cbvprintf_impl+0x446>
    8c94:	e8df f003 	tbb	[pc, r3]
    8c98:	18101018 	.word	0x18101018
    8c9c:	18          	.byte	0x18
    8c9d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    8c9e:	2901      	cmp	r1, #1
    8ca0:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    8ca4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    8ca8:	d014      	beq.n	8cd4 <z_cbvprintf_impl+0x47c>
			} else if (length_mod == LENGTH_H) {
    8caa:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    8cac:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    8cb0:	d1cc      	bne.n	8c4c <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned short)value->uint;
    8cb2:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    8cb4:	9310      	str	r3, [sp, #64]	; 0x40
    8cb6:	e7c9      	b.n	8c4c <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap,
    8cb8:	3407      	adds	r4, #7
    8cba:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    8cbe:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    8cc2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    8cc6:	e7c1      	b.n	8c4c <z_cbvprintf_impl+0x3f4>
					(uint_value_type)va_arg(ap, size_t);
    8cc8:	f854 3b04 	ldr.w	r3, [r4], #4
    8ccc:	9310      	str	r3, [sp, #64]	; 0x40
    8cce:	2300      	movs	r3, #0
    8cd0:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    8cd2:	e7bb      	b.n	8c4c <z_cbvprintf_impl+0x3f4>
				value->uint = (unsigned char)value->uint;
    8cd4:	b2db      	uxtb	r3, r3
    8cd6:	e7cd      	b.n	8c74 <z_cbvprintf_impl+0x41c>
		} else if (specifier_cat == SPECIFIER_FP) {
    8cd8:	2b04      	cmp	r3, #4
    8cda:	d108      	bne.n	8cee <z_cbvprintf_impl+0x496>
					(sint_value_type)va_arg(ap, long long);
    8cdc:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    8cde:	f024 0407 	bic.w	r4, r4, #7
    8ce2:	e9d4 2300 	ldrd	r2, r3, [r4]
    8ce6:	3408      	adds	r4, #8
    8ce8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    8cec:	e7ae      	b.n	8c4c <z_cbvprintf_impl+0x3f4>
		} else if (specifier_cat == SPECIFIER_PTR) {
    8cee:	2b03      	cmp	r3, #3
    8cf0:	d1ac      	bne.n	8c4c <z_cbvprintf_impl+0x3f4>
			value->ptr = va_arg(ap, void *);
    8cf2:	f854 3b04 	ldr.w	r3, [r4], #4
    8cf6:	e7dd      	b.n	8cb4 <z_cbvprintf_impl+0x45c>
		switch (conv->specifier) {
    8cf8:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    8cfc:	2878      	cmp	r0, #120	; 0x78
    8cfe:	d8b4      	bhi.n	8c6a <z_cbvprintf_impl+0x412>
    8d00:	2862      	cmp	r0, #98	; 0x62
    8d02:	d81d      	bhi.n	8d40 <z_cbvprintf_impl+0x4e8>
    8d04:	2825      	cmp	r0, #37	; 0x25
    8d06:	f43f adb7 	beq.w	8878 <z_cbvprintf_impl+0x20>
    8d0a:	2858      	cmp	r0, #88	; 0x58
    8d0c:	d1ad      	bne.n	8c6a <z_cbvprintf_impl+0x412>
			bps = encode_uint(value->uint, conv, buf, bpe);
    8d0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    8d12:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    8d16:	9300      	str	r3, [sp, #0]
    8d18:	aa12      	add	r2, sp, #72	; 0x48
    8d1a:	ab0a      	add	r3, sp, #40	; 0x28
    8d1c:	f7ff fd50 	bl	87c0 <encode_uint>
			if (precision >= 0) {
    8d20:	f1bb 0f00 	cmp.w	fp, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    8d24:	4681      	mov	r9, r0
			if (precision >= 0) {
    8d26:	f280 8098 	bge.w	8e5a <z_cbvprintf_impl+0x602>
		if (bps == NULL) {
    8d2a:	f1b9 0f00 	cmp.w	r9, #0
    8d2e:	d09c      	beq.n	8c6a <z_cbvprintf_impl+0x412>
		size_t nj_len = (bpe - bps);
    8d30:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    8d34:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    8d38:	2f00      	cmp	r7, #0
    8d3a:	d050      	beq.n	8dde <z_cbvprintf_impl+0x586>
			nj_len += 1U;
    8d3c:	3301      	adds	r3, #1
    8d3e:	e04e      	b.n	8dde <z_cbvprintf_impl+0x586>
		switch (conv->specifier) {
    8d40:	3863      	subs	r0, #99	; 0x63
    8d42:	2815      	cmp	r0, #21
    8d44:	d891      	bhi.n	8c6a <z_cbvprintf_impl+0x412>
    8d46:	a201      	add	r2, pc, #4	; (adr r2, 8d4c <z_cbvprintf_impl+0x4f4>)
    8d48:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    8d4c:	00008dcd 	.word	0x00008dcd
    8d50:	00008e31 	.word	0x00008e31
    8d54:	00008c6b 	.word	0x00008c6b
    8d58:	00008c6b 	.word	0x00008c6b
    8d5c:	00008c6b 	.word	0x00008c6b
    8d60:	00008c6b 	.word	0x00008c6b
    8d64:	00008e31 	.word	0x00008e31
    8d68:	00008c6b 	.word	0x00008c6b
    8d6c:	00008c6b 	.word	0x00008c6b
    8d70:	00008c6b 	.word	0x00008c6b
    8d74:	00008c6b 	.word	0x00008c6b
    8d78:	00008ebb 	.word	0x00008ebb
    8d7c:	00008e55 	.word	0x00008e55
    8d80:	00008e7d 	.word	0x00008e7d
    8d84:	00008c6b 	.word	0x00008c6b
    8d88:	00008c6b 	.word	0x00008c6b
    8d8c:	00008da5 	.word	0x00008da5
    8d90:	00008c6b 	.word	0x00008c6b
    8d94:	00008e55 	.word	0x00008e55
    8d98:	00008c6b 	.word	0x00008c6b
    8d9c:	00008c6b 	.word	0x00008c6b
    8da0:	00008e55 	.word	0x00008e55
			if (precision >= 0) {
    8da4:	f1bb 0f00 	cmp.w	fp, #0
			bps = (const char *)value->ptr;
    8da8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
			if (precision >= 0) {
    8dac:	db0a      	blt.n	8dc4 <z_cbvprintf_impl+0x56c>
				len = strnlen(bps, precision);
    8dae:	4659      	mov	r1, fp
    8db0:	4648      	mov	r0, r9
    8db2:	f006 fd02 	bl	f7ba <strnlen>
		if (bps == NULL) {
    8db6:	f1b9 0f00 	cmp.w	r9, #0
    8dba:	f43f af56 	beq.w	8c6a <z_cbvprintf_impl+0x412>
			bpe = bps + len;
    8dbe:	eb09 0600 	add.w	r6, r9, r0
    8dc2:	e076      	b.n	8eb2 <z_cbvprintf_impl+0x65a>
				len = strlen(bps);
    8dc4:	4648      	mov	r0, r9
    8dc6:	f7ff fb25 	bl	8414 <strlen>
    8dca:	e7f8      	b.n	8dbe <z_cbvprintf_impl+0x566>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    8dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
		char sign = 0;
    8dce:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    8dd0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		size_t nj_len = (bpe - bps);
    8dd4:	2301      	movs	r3, #1
			bpe = buf + 1;
    8dd6:	f10d 0629 	add.w	r6, sp, #41	; 0x29
			bps = buf;
    8dda:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		if (conv->altform_0c) {
    8dde:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    8de2:	f011 0210 	ands.w	r2, r1, #16
    8de6:	9206      	str	r2, [sp, #24]
    8de8:	f000 8081 	beq.w	8eee <z_cbvprintf_impl+0x696>
			nj_len += 2U;
    8dec:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    8dee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8df0:	4413      	add	r3, r2
    8df2:	9205      	str	r2, [sp, #20]
		if (conv->pad_fp) {
    8df4:	064a      	lsls	r2, r1, #25
			nj_len += conv->pad0_pre_exp;
    8df6:	bf44      	itt	mi
    8df8:	9914      	ldrmi	r1, [sp, #80]	; 0x50
    8dfa:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    8dfc:	f1b8 0f00 	cmp.w	r8, #0
    8e00:	f340 808e 	ble.w	8f20 <z_cbvprintf_impl+0x6c8>
			width -= (int)nj_len;
    8e04:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    8e08:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    8e0c:	0758      	lsls	r0, r3, #29
    8e0e:	f3c3 0b80 	ubfx	fp, r3, #2, #1
    8e12:	f100 8085 	bmi.w	8f20 <z_cbvprintf_impl+0x6c8>
				if (conv->flag_zero) {
    8e16:	0659      	lsls	r1, r3, #25
    8e18:	d578      	bpl.n	8f0c <z_cbvprintf_impl+0x6b4>
					if (sign != 0) {
    8e1a:	b13f      	cbz	r7, 8e2c <z_cbvprintf_impl+0x5d4>
						OUTC(sign);
    8e1c:	4651      	mov	r1, sl
    8e1e:	4638      	mov	r0, r7
    8e20:	9b03      	ldr	r3, [sp, #12]
    8e22:	4798      	blx	r3
    8e24:	2800      	cmp	r0, #0
    8e26:	db6e      	blt.n	8f06 <z_cbvprintf_impl+0x6ae>
    8e28:	465f      	mov	r7, fp
    8e2a:	3501      	adds	r5, #1
					pad = '0';
    8e2c:	2330      	movs	r3, #48	; 0x30
    8e2e:	e06e      	b.n	8f0e <z_cbvprintf_impl+0x6b6>
			if (conv->flag_plus) {
    8e30:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    8e32:	bf5a      	itte	pl
    8e34:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    8e38:	015f      	lslpl	r7, r3, #5
				sign = '+';
    8e3a:	272b      	movmi	r7, #43	; 0x2b
			sint = value->sint;
    8e3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			if (sint < 0) {
    8e40:	2b00      	cmp	r3, #0
    8e42:	f6bf af64 	bge.w	8d0e <z_cbvprintf_impl+0x4b6>
				value->uint = (uint_value_type)-sint;
    8e46:	4252      	negs	r2, r2
    8e48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    8e4c:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    8e4e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    8e52:	e75c      	b.n	8d0e <z_cbvprintf_impl+0x4b6>
		switch (conv->specifier) {
    8e54:	2700      	movs	r7, #0
    8e56:	e75a      	b.n	8d0e <z_cbvprintf_impl+0x4b6>
		char sign = 0;
    8e58:	2700      	movs	r7, #0
				conv->flag_zero = false;
    8e5a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    8e5e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    8e62:	eba3 0309 	sub.w	r3, r3, r9
				conv->flag_zero = false;
    8e66:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    8e6a:	459b      	cmp	fp, r3
				conv->flag_zero = false;
    8e6c:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    8e70:	f67f af5b 	bls.w	8d2a <z_cbvprintf_impl+0x4d2>
					conv->pad0_value = precision - (int)len;
    8e74:	ebab 0303 	sub.w	r3, fp, r3
    8e78:	9313      	str	r3, [sp, #76]	; 0x4c
    8e7a:	e756      	b.n	8d2a <z_cbvprintf_impl+0x4d2>
			if (value->ptr != NULL) {
    8e7c:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e7e:	b380      	cbz	r0, 8ee2 <z_cbvprintf_impl+0x68a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    8e80:	f10d 063e 	add.w	r6, sp, #62	; 0x3e
    8e84:	ab0a      	add	r3, sp, #40	; 0x28
    8e86:	2100      	movs	r1, #0
    8e88:	9600      	str	r6, [sp, #0]
    8e8a:	aa12      	add	r2, sp, #72	; 0x48
    8e8c:	f7ff fc98 	bl	87c0 <encode_uint>
				conv->altform_0c = true;
    8e90:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    8e94:	f1bb 0f00 	cmp.w	fp, #0
				conv->altform_0c = true;
    8e98:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    8e9c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    8ea0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    8ea4:	4681      	mov	r9, r0
				conv->altform_0c = true;
    8ea6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
			if (precision >= 0) {
    8eaa:	dad5      	bge.n	8e58 <z_cbvprintf_impl+0x600>
		if (bps == NULL) {
    8eac:	2800      	cmp	r0, #0
    8eae:	f43f aedc 	beq.w	8c6a <z_cbvprintf_impl+0x412>
		char sign = 0;
    8eb2:	2700      	movs	r7, #0
		size_t nj_len = (bpe - bps);
    8eb4:	eba6 0309 	sub.w	r3, r6, r9
		if (sign != 0) {
    8eb8:	e791      	b.n	8dde <z_cbvprintf_impl+0x586>
				store_count(conv, value->ptr, count);
    8eba:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    8ebc:	2907      	cmp	r1, #7
    8ebe:	f63f aed4 	bhi.w	8c6a <z_cbvprintf_impl+0x412>
    8ec2:	e8df f001 	tbb	[pc, r1]
    8ec6:	040c      	.short	0x040c
    8ec8:	08080c06 	.word	0x08080c06
    8ecc:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    8ece:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    8ed0:	e6cb      	b.n	8c6a <z_cbvprintf_impl+0x412>
		*(short *)dp = (short)count;
    8ed2:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    8ed4:	e6c9      	b.n	8c6a <z_cbvprintf_impl+0x412>
		*(intmax_t *)dp = (intmax_t)count;
    8ed6:	17ea      	asrs	r2, r5, #31
    8ed8:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    8edc:	e6c5      	b.n	8c6a <z_cbvprintf_impl+0x412>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    8ede:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    8ee0:	e6c3      	b.n	8c6a <z_cbvprintf_impl+0x412>
			bpe = bps + 5;
    8ee2:	4e31      	ldr	r6, [pc, #196]	; (8fa8 <z_cbvprintf_impl+0x750>)
		char sign = 0;
    8ee4:	4607      	mov	r7, r0
		size_t nj_len = (bpe - bps);
    8ee6:	2305      	movs	r3, #5
    8ee8:	f1a6 0905 	sub.w	r9, r6, #5
    8eec:	e777      	b.n	8dde <z_cbvprintf_impl+0x586>
		} else if (conv->altform_0) {
    8eee:	0708      	lsls	r0, r1, #28
			nj_len += 1U;
    8ef0:	bf48      	it	mi
    8ef2:	3301      	addmi	r3, #1
    8ef4:	e77b      	b.n	8dee <z_cbvprintf_impl+0x596>
					OUTC(pad);
    8ef6:	4618      	mov	r0, r3
    8ef8:	9307      	str	r3, [sp, #28]
    8efa:	4651      	mov	r1, sl
    8efc:	9b03      	ldr	r3, [sp, #12]
    8efe:	4798      	blx	r3
    8f00:	2800      	cmp	r0, #0
    8f02:	9b07      	ldr	r3, [sp, #28]
    8f04:	da04      	bge.n	8f10 <z_cbvprintf_impl+0x6b8>
#undef OUTS
#undef OUTC
}
    8f06:	b017      	add	sp, #92	; 0x5c
    8f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    8f0c:	2320      	movs	r3, #32
					pad = '0';
    8f0e:	46c3      	mov	fp, r8
				while (width-- > 0) {
    8f10:	4659      	mov	r1, fp
    8f12:	2900      	cmp	r1, #0
    8f14:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    8f18:	dced      	bgt.n	8ef6 <z_cbvprintf_impl+0x69e>
    8f1a:	4445      	add	r5, r8
    8f1c:	46d8      	mov	r8, fp
    8f1e:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    8f20:	b137      	cbz	r7, 8f30 <z_cbvprintf_impl+0x6d8>
			OUTC(sign);
    8f22:	4651      	mov	r1, sl
    8f24:	4638      	mov	r0, r7
    8f26:	9b03      	ldr	r3, [sp, #12]
    8f28:	4798      	blx	r3
    8f2a:	2800      	cmp	r0, #0
    8f2c:	dbeb      	blt.n	8f06 <z_cbvprintf_impl+0x6ae>
    8f2e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    8f30:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    8f34:	06da      	lsls	r2, r3, #27
    8f36:	d401      	bmi.n	8f3c <z_cbvprintf_impl+0x6e4>
    8f38:	071b      	lsls	r3, r3, #28
    8f3a:	d506      	bpl.n	8f4a <z_cbvprintf_impl+0x6f2>
				OUTC('0');
    8f3c:	4651      	mov	r1, sl
    8f3e:	2030      	movs	r0, #48	; 0x30
    8f40:	9b03      	ldr	r3, [sp, #12]
    8f42:	4798      	blx	r3
    8f44:	2800      	cmp	r0, #0
    8f46:	dbde      	blt.n	8f06 <z_cbvprintf_impl+0x6ae>
    8f48:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    8f4a:	9b06      	ldr	r3, [sp, #24]
    8f4c:	b13b      	cbz	r3, 8f5e <z_cbvprintf_impl+0x706>
				OUTC(conv->specifier);
    8f4e:	4651      	mov	r1, sl
    8f50:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    8f54:	9b03      	ldr	r3, [sp, #12]
    8f56:	4798      	blx	r3
    8f58:	2800      	cmp	r0, #0
    8f5a:	dbd4      	blt.n	8f06 <z_cbvprintf_impl+0x6ae>
    8f5c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    8f5e:	9f05      	ldr	r7, [sp, #20]
    8f60:	442f      	add	r7, r5
    8f62:	e006      	b.n	8f72 <z_cbvprintf_impl+0x71a>
				OUTC('0');
    8f64:	4651      	mov	r1, sl
    8f66:	2030      	movs	r0, #48	; 0x30
    8f68:	9b03      	ldr	r3, [sp, #12]
    8f6a:	4798      	blx	r3
    8f6c:	2800      	cmp	r0, #0
    8f6e:	dbca      	blt.n	8f06 <z_cbvprintf_impl+0x6ae>
    8f70:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    8f72:	1b7b      	subs	r3, r7, r5
    8f74:	2b00      	cmp	r3, #0
    8f76:	dcf5      	bgt.n	8f64 <z_cbvprintf_impl+0x70c>
			OUTS(bps, bpe);
    8f78:	4633      	mov	r3, r6
    8f7a:	464a      	mov	r2, r9
    8f7c:	4651      	mov	r1, sl
    8f7e:	9803      	ldr	r0, [sp, #12]
    8f80:	f005 fbc7 	bl	e712 <outs>
    8f84:	2800      	cmp	r0, #0
    8f86:	dbbe      	blt.n	8f06 <z_cbvprintf_impl+0x6ae>
    8f88:	4405      	add	r5, r0
		while (width > 0) {
    8f8a:	44a8      	add	r8, r5
    8f8c:	eba8 0305 	sub.w	r3, r8, r5
    8f90:	2b00      	cmp	r3, #0
    8f92:	f77f ae6a 	ble.w	8c6a <z_cbvprintf_impl+0x412>
			OUTC(' ');
    8f96:	4651      	mov	r1, sl
    8f98:	2020      	movs	r0, #32
    8f9a:	9b03      	ldr	r3, [sp, #12]
    8f9c:	4798      	blx	r3
    8f9e:	2800      	cmp	r0, #0
    8fa0:	dbb1      	blt.n	8f06 <z_cbvprintf_impl+0x6ae>
    8fa2:	3501      	adds	r5, #1
			--width;
    8fa4:	e7f2      	b.n	8f8c <z_cbvprintf_impl+0x734>
    8fa6:	bf00      	nop
    8fa8:	000101d5 	.word	0x000101d5

00008fac <nordicsemi_nrf91_init>:
	__asm__ volatile(
    8fac:	f04f 0220 	mov.w	r2, #32
    8fb0:	f3ef 8311 	mrs	r3, BASEPRI
    8fb4:	f382 8812 	msr	BASEPRI_MAX, r2
    8fb8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    8fbc:	2101      	movs	r1, #1
    8fbe:	4a04      	ldr	r2, [pc, #16]	; (8fd0 <nordicsemi_nrf91_init+0x24>)
    8fc0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    8fc4:	f383 8811 	msr	BASEPRI, r3
    8fc8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    8fcc:	2000      	movs	r0, #0
    8fce:	4770      	bx	lr
    8fd0:	40039000 	.word	0x40039000

00008fd4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    8fd4:	b120      	cbz	r0, 8fe0 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    8fd6:	4b03      	ldr	r3, [pc, #12]	; (8fe4 <arch_busy_wait+0x10>)
    8fd8:	0180      	lsls	r0, r0, #6
    8fda:	f043 0301 	orr.w	r3, r3, #1
    8fde:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    8fe0:	4770      	bx	lr
    8fe2:	bf00      	nop
    8fe4:	0000fdf0 	.word	0x0000fdf0

00008fe8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8fe8:	f005 bfdb 	b.w	efa2 <SystemInit>

00008fec <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    8fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ff0:	4605      	mov	r5, r0
	__asm__ volatile(
    8ff2:	f04f 0320 	mov.w	r3, #32
    8ff6:	f3ef 8611 	mrs	r6, BASEPRI
    8ffa:	f383 8812 	msr	BASEPRI_MAX, r3
    8ffe:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    9002:	f04f 090c 	mov.w	r9, #12
	return list->head;
    9006:	4b0d      	ldr	r3, [pc, #52]	; (903c <pm_state_notify+0x50>)
    9008:	4f0d      	ldr	r7, [pc, #52]	; (9040 <pm_state_notify+0x54>)
    900a:	681c      	ldr	r4, [r3, #0]
    900c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 9044 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    9010:	b92c      	cbnz	r4, 901e <pm_state_notify+0x32>
	__asm__ volatile(
    9012:	f386 8811 	msr	BASEPRI, r6
    9016:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    901a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    901e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    9022:	2d00      	cmp	r5, #0
    9024:	bf18      	it	ne
    9026:	4613      	movne	r3, r2
		if (callback) {
    9028:	b12b      	cbz	r3, 9036 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    902a:	f898 2010 	ldrb.w	r2, [r8, #16]
    902e:	fb09 f202 	mul.w	r2, r9, r2
    9032:	5cb8      	ldrb	r0, [r7, r2]
    9034:	4798      	blx	r3
	return node->next;
    9036:	6824      	ldr	r4, [r4, #0]
    9038:	e7ea      	b.n	9010 <pm_state_notify+0x24>
    903a:	bf00      	nop
    903c:	2000c988 	.word	0x2000c988
    9040:	2000c97c 	.word	0x2000c97c
    9044:	2000cecc 	.word	0x2000cecc

00009048 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    9048:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    904a:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    904c:	4b16      	ldr	r3, [pc, #88]	; (90a8 <pm_system_resume+0x60>)
    904e:	7c1c      	ldrb	r4, [r3, #16]
    9050:	f004 031f 	and.w	r3, r4, #31
    9054:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9056:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9058:	4b14      	ldr	r3, [pc, #80]	; (90ac <pm_system_resume+0x64>)
    905a:	0961      	lsrs	r1, r4, #5
    905c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    9060:	e8d3 1fef 	ldaex	r1, [r3]
    9064:	ea01 0500 	and.w	r5, r1, r0
    9068:	e8c3 5fe6 	stlex	r6, r5, [r3]
    906c:	2e00      	cmp	r6, #0
    906e:	d1f7      	bne.n	9060 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    9070:	420a      	tst	r2, r1
    9072:	d013      	beq.n	909c <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    9074:	4b0e      	ldr	r3, [pc, #56]	; (90b0 <pm_system_resume+0x68>)
    9076:	4d0f      	ldr	r5, [pc, #60]	; (90b4 <pm_system_resume+0x6c>)
    9078:	b18b      	cbz	r3, 909e <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    907a:	230c      	movs	r3, #12
    907c:	4363      	muls	r3, r4
    907e:	18ea      	adds	r2, r5, r3
    9080:	7851      	ldrb	r1, [r2, #1]
    9082:	5ce8      	ldrb	r0, [r5, r3]
    9084:	f005 fb69 	bl	e75a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    9088:	2000      	movs	r0, #0
    908a:	f7ff ffaf 	bl	8fec <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    908e:	230c      	movs	r3, #12
    9090:	435c      	muls	r4, r3
    9092:	2300      	movs	r3, #0
    9094:	192a      	adds	r2, r5, r4
    9096:	512b      	str	r3, [r5, r4]
    9098:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    909c:	bd70      	pop	{r4, r5, r6, pc}
    909e:	f383 8811 	msr	BASEPRI, r3
    90a2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    90a6:	e7ef      	b.n	9088 <pm_system_resume+0x40>
    90a8:	2000cecc 	.word	0x2000cecc
    90ac:	2000c990 	.word	0x2000c990
    90b0:	0000e75b 	.word	0x0000e75b
    90b4:	2000c97c 	.word	0x2000c97c

000090b8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    90b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    90bc:	4b32      	ldr	r3, [pc, #200]	; (9188 <pm_system_suspend+0xd0>)
{
    90be:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    90c0:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    90c2:	f04f 0320 	mov.w	r3, #32
    90c6:	f3ef 8811 	mrs	r8, BASEPRI
    90ca:	f383 8812 	msr	BASEPRI_MAX, r3
    90ce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    90d2:	240c      	movs	r4, #12
    90d4:	436c      	muls	r4, r5
    90d6:	4b2d      	ldr	r3, [pc, #180]	; (918c <pm_system_suspend+0xd4>)
    90d8:	4e2d      	ldr	r6, [pc, #180]	; (9190 <pm_system_suspend+0xd8>)
    90da:	5d19      	ldrb	r1, [r3, r4]
    90dc:	191a      	adds	r2, r3, r4
    90de:	2900      	cmp	r1, #0
    90e0:	d047      	beq.n	9172 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    90e2:	ca07      	ldmia	r2, {r0, r1, r2}
    90e4:	eb06 0c04 	add.w	ip, r6, r4
    90e8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    90ec:	2200      	movs	r2, #0
    90ee:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    90f0:	f388 8811 	msr	BASEPRI, r8
    90f4:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    90f8:	230c      	movs	r3, #12
    90fa:	436b      	muls	r3, r5
    90fc:	5cf0      	ldrb	r0, [r6, r3]
    90fe:	18f2      	adds	r2, r6, r3
    9100:	b3a8      	cbz	r0, 916e <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    9102:	1c7b      	adds	r3, r7, #1
    9104:	d010      	beq.n	9128 <pm_system_suspend+0x70>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    9106:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    910a:	2100      	movs	r1, #0
    910c:	f8d2 c008 	ldr.w	ip, [r2, #8]
    9110:	4c20      	ldr	r4, [pc, #128]	; (9194 <pm_system_suspend+0xdc>)
    9112:	2300      	movs	r3, #0
    9114:	fbec 4100 	umlal	r4, r1, ip, r0
    9118:	4a1f      	ldr	r2, [pc, #124]	; (9198 <pm_system_suspend+0xe0>)
    911a:	4620      	mov	r0, r4
    911c:	f7ff f812 	bl	8144 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    9120:	2101      	movs	r1, #1
    9122:	1a38      	subs	r0, r7, r0
    9124:	f001 fe3a 	bl	ad9c <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    9128:	f004 f952 	bl	d3d0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    912c:	2001      	movs	r0, #1
    912e:	f7ff ff5d 	bl	8fec <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9132:	4b1a      	ldr	r3, [pc, #104]	; (919c <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9134:	096a      	lsrs	r2, r5, #5
    9136:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    913a:	2201      	movs	r2, #1
    913c:	f005 011f 	and.w	r1, r5, #31
    9140:	408a      	lsls	r2, r1
    9142:	e8d3 0fef 	ldaex	r0, [r3]
    9146:	4310      	orrs	r0, r2
    9148:	e8c3 0fe1 	stlex	r1, r0, [r3]
    914c:	2900      	cmp	r1, #0
    914e:	d1f8      	bne.n	9142 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    9150:	4b13      	ldr	r3, [pc, #76]	; (91a0 <pm_system_suspend+0xe8>)
    9152:	b13b      	cbz	r3, 9164 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    9154:	230c      	movs	r3, #12
    9156:	fb03 f005 	mul.w	r0, r3, r5
    915a:	1833      	adds	r3, r6, r0
    915c:	7859      	ldrb	r1, [r3, #1]
    915e:	5c30      	ldrb	r0, [r6, r0]
    9160:	f005 faef 	bl	e742 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    9164:	f7ff ff70 	bl	9048 <pm_system_resume>
	k_sched_unlock();
    9168:	f004 f946 	bl	d3f8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    916c:	2001      	movs	r0, #1
}
    916e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    9172:	4601      	mov	r1, r0
    9174:	4628      	mov	r0, r5
    9176:	f000 f815 	bl	91a4 <pm_policy_next_state>
		if (info != NULL) {
    917a:	2800      	cmp	r0, #0
    917c:	d0b8      	beq.n	90f0 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    917e:	c807      	ldmia	r0, {r0, r1, r2}
    9180:	4434      	add	r4, r6
    9182:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    9186:	e7b3      	b.n	90f0 <pm_system_suspend+0x38>
    9188:	2000cecc 	.word	0x2000cecc
    918c:	2000c970 	.word	0x2000c970
    9190:	2000c97c 	.word	0x2000c97c
    9194:	000f423f 	.word	0x000f423f
    9198:	000f4240 	.word	0x000f4240
    919c:	2000c990 	.word	0x2000c990
    91a0:	0000e743 	.word	0x0000e743

000091a4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    91a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91a8:	b085      	sub	sp, #20
    91aa:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    91ac:	a903      	add	r1, sp, #12
    91ae:	f000 f843 	bl	9238 <pm_state_cpu_get_all>
    91b2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    91b6:	4604      	mov	r4, r0
    91b8:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    91bc:	4b1b      	ldr	r3, [pc, #108]	; (922c <pm_policy_next_state+0x88>)
    91be:	9d03      	ldr	r5, [sp, #12]
    91c0:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    91c4:	1e43      	subs	r3, r0, #1
    91c6:	b21b      	sxth	r3, r3
    91c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    91cc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9230 <pm_policy_next_state+0x8c>
    91d0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    91d4:	b924      	cbnz	r4, 91e0 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    91d6:	46a1      	mov	r9, r4
}
    91d8:	4648      	mov	r0, r9
    91da:	b005      	add	sp, #20
    91dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91e0:	46c4      	mov	ip, r8
    91e2:	4659      	mov	r1, fp
    91e4:	6868      	ldr	r0, [r5, #4]
    91e6:	2300      	movs	r3, #0
    91e8:	fbe0 c107 	umlal	ip, r1, r0, r7
    91ec:	4a11      	ldr	r2, [pc, #68]	; (9234 <pm_policy_next_state+0x90>)
    91ee:	4660      	mov	r0, ip
    91f0:	f7fe ffa8 	bl	8144 <__aeabi_uldivmod>
    91f4:	46c4      	mov	ip, r8
    91f6:	4659      	mov	r1, fp
    91f8:	9001      	str	r0, [sp, #4]
    91fa:	68a8      	ldr	r0, [r5, #8]
    91fc:	2300      	movs	r3, #0
    91fe:	fbe0 c107 	umlal	ip, r1, r0, r7
    9202:	4a0c      	ldr	r2, [pc, #48]	; (9234 <pm_policy_next_state+0x90>)
    9204:	4660      	mov	r0, ip
    9206:	f7fe ff9d 	bl	8144 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    920a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    920e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    9210:	d001      	beq.n	9216 <pm_policy_next_state+0x72>
    9212:	4582      	cmp	sl, r0
    9214:	d905      	bls.n	9222 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    9216:	1c73      	adds	r3, r6, #1
    9218:	d0de      	beq.n	91d8 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    921a:	9b01      	ldr	r3, [sp, #4]
    921c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    921e:	42b0      	cmp	r0, r6
    9220:	d9da      	bls.n	91d8 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    9222:	3c01      	subs	r4, #1
    9224:	b2a4      	uxth	r4, r4
    9226:	3d0c      	subs	r5, #12
    9228:	e7d4      	b.n	91d4 <pm_policy_next_state+0x30>
    922a:	bf00      	nop
    922c:	2000c658 	.word	0x2000c658
    9230:	000f423f 	.word	0x000f423f
    9234:	000f4240 	.word	0x000f4240

00009238 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    9238:	b908      	cbnz	r0, 923e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    923a:	4b02      	ldr	r3, [pc, #8]	; (9244 <pm_state_cpu_get_all+0xc>)
    923c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    923e:	2000      	movs	r0, #0
    9240:	4770      	bx	lr
    9242:	bf00      	nop
    9244:	0000fe18 	.word	0x0000fe18

00009248 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    9248:	4901      	ldr	r1, [pc, #4]	; (9250 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    924a:	2210      	movs	r2, #16
	str	r2, [r1]
    924c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    924e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    9250:	e000ed10 	.word	0xe000ed10

00009254 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    9254:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    9256:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    9258:	f380 8811 	msr	BASEPRI, r0
	isb
    925c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    9260:	f3bf 8f4f 	dsb	sy
    9264:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    9266:	b662      	cpsie	i
	isb
    9268:	f3bf 8f6f 	isb	sy

	bx	lr
    926c:	4770      	bx	lr
    926e:	bf00      	nop

00009270 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    9270:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    9272:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    9274:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    9278:	f3bf 8f4f 	dsb	sy
    927c:	bf20      	wfe

	msr	BASEPRI, r0
    927e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    9282:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    9284:	4770      	bx	lr
    9286:	bf00      	nop

00009288 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    9288:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    928a:	2800      	cmp	r0, #0
    928c:	db07      	blt.n	929e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    928e:	2301      	movs	r3, #1
    9290:	0941      	lsrs	r1, r0, #5
    9292:	4a03      	ldr	r2, [pc, #12]	; (92a0 <arch_irq_enable+0x18>)
    9294:	f000 001f 	and.w	r0, r0, #31
    9298:	4083      	lsls	r3, r0
    929a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    929e:	4770      	bx	lr
    92a0:	e000e100 	.word	0xe000e100

000092a4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    92a4:	4b05      	ldr	r3, [pc, #20]	; (92bc <arch_irq_is_enabled+0x18>)
    92a6:	0942      	lsrs	r2, r0, #5
    92a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    92ac:	2301      	movs	r3, #1
    92ae:	f000 001f 	and.w	r0, r0, #31
    92b2:	fa03 f000 	lsl.w	r0, r3, r0
}
    92b6:	4010      	ands	r0, r2
    92b8:	4770      	bx	lr
    92ba:	bf00      	nop
    92bc:	e000e100 	.word	0xe000e100

000092c0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    92c0:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    92c2:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    92c4:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    92c8:	bfac      	ite	ge
    92ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    92ce:	4b06      	ldrlt	r3, [pc, #24]	; (92e8 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    92d0:	ea4f 1141 	mov.w	r1, r1, lsl #5
    92d4:	b2c9      	uxtb	r1, r1
    92d6:	bfab      	itete	ge
    92d8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    92dc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    92e0:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    92e4:	5419      	strblt	r1, [r3, r0]
}
    92e6:	4770      	bx	lr
    92e8:	e000ed14 	.word	0xe000ed14

000092ec <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    92ec:	bf30      	wfi
    b z_SysNmiOnReset
    92ee:	f7ff bffd 	b.w	92ec <z_SysNmiOnReset>
    92f2:	bf00      	nop

000092f4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    92f4:	4a0b      	ldr	r2, [pc, #44]	; (9324 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    92f6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    92f8:	4b0b      	ldr	r3, [pc, #44]	; (9328 <z_arm_prep_c+0x34>)
    92fa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    92fe:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    9300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9304:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    9308:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    930c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    9310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    9314:	f003 fbec 	bl	caf0 <z_bss_zero>
	z_data_copy();
    9318:	f004 f994 	bl	d644 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    931c:	f000 fa0e 	bl	973c <z_arm_interrupt_init>
	z_cstart();
    9320:	f003 fc26 	bl	cb70 <z_cstart>
    9324:	00008000 	.word	0x00008000
    9328:	e000ed00 	.word	0xe000ed00

0000932c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    932c:	4a09      	ldr	r2, [pc, #36]	; (9354 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    932e:	490a      	ldr	r1, [pc, #40]	; (9358 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    9330:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    9332:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    9334:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    9336:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    9338:	4908      	ldr	r1, [pc, #32]	; (935c <arch_swap+0x30>)
    933a:	684b      	ldr	r3, [r1, #4]
    933c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    9340:	604b      	str	r3, [r1, #4]
    9342:	2300      	movs	r3, #0
    9344:	f383 8811 	msr	BASEPRI, r3
    9348:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    934c:	6893      	ldr	r3, [r2, #8]
}
    934e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    9350:	4770      	bx	lr
    9352:	bf00      	nop
    9354:	2000cecc 	.word	0x2000cecc
    9358:	00010110 	.word	0x00010110
    935c:	e000ed00 	.word	0xe000ed00

00009360 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    9360:	4915      	ldr	r1, [pc, #84]	; (93b8 <z_arm_pendsv+0x58>)
    ldr r2, [r1, #_kernel_offset_to_current]
    9362:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    9364:	f882 e07d 	strb.w	lr, [r2, #125]	; 0x7d
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    9368:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    936c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    936e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    9372:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    9376:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    9378:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    937c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    9380:	4f0e      	ldr	r7, [pc, #56]	; (93bc <z_arm_pendsv+0x5c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    9382:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    9386:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    9388:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    938a:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    938c:	f992 e07d 	ldrsb.w	lr, [r2, #125]	; 0x7d

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    9390:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    9392:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    9394:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    9396:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    939a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    939e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    93a2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    93a6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    93aa:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    93ac:	f005 f9ec 	bl	e788 <configure_builtin_stack_guard>
    pop {r2, lr}
    93b0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    93b4:	4770      	bx	lr
    93b6:	0000      	.short	0x0000
    ldr r1, =_kernel
    93b8:	2000cecc 	.word	0x2000cecc
    ldr v4, =_SCS_ICSR
    93bc:	e000ed04 	.word	0xe000ed04

000093c0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    93c0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    93c4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    93c6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    93ca:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    93ce:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    93d0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    93d4:	2902      	cmp	r1, #2
    beq _oops
    93d6:	d0ff      	beq.n	93d8 <_oops>

000093d8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    93d8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    93da:	f005 f9c6 	bl	e76a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    93de:	bd01      	pop	{r0, pc}

000093e0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    93e0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    93e4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    93e6:	490c      	ldr	r1, [pc, #48]	; (9418 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
    93e8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    93ec:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    93ee:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    93f2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    93f6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    93f8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    93fc:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    9400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    9404:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    9408:	2300      	movs	r3, #0
    940a:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    940c:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    9410:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    9412:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    9414:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    9416:	4770      	bx	lr
    9418:	0000e1b9 	.word	0x0000e1b9

0000941c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    941c:	4b08      	ldr	r3, [pc, #32]	; (9440 <arch_switch_to_main_thread+0x24>)
    941e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    9420:	6e43      	ldr	r3, [r0, #100]	; 0x64
    9422:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    9426:	4610      	mov	r0, r2
    9428:	f381 8809 	msr	PSP, r1
    942c:	2100      	movs	r1, #0
    942e:	b663      	cpsie	if
    9430:	f381 8811 	msr	BASEPRI, r1
    9434:	f3bf 8f6f 	isb	sy
    9438:	2200      	movs	r2, #0
    943a:	2300      	movs	r3, #0
    943c:	f004 febc 	bl	e1b8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    9440:	2000cecc 	.word	0x2000cecc

00009444 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    9444:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    9446:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    9448:	4a0b      	ldr	r2, [pc, #44]	; (9478 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    944a:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    944c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    944e:	bf1e      	ittt	ne
	movne	r1, #0
    9450:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    9452:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    9454:	f006 f800 	blne	f458 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    9458:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    945a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    945e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    9462:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    9466:	4905      	ldr	r1, [pc, #20]	; (947c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    9468:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    946a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    946c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    946e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    9472:	4903      	ldr	r1, [pc, #12]	; (9480 <_isr_wrapper+0x3c>)
	bx r1
    9474:	4708      	bx	r1
    9476:	0000      	.short	0x0000
	ldr r2, =_kernel
    9478:	2000cecc 	.word	0x2000cecc
	ldr r1, =_sw_isr_table
    947c:	0000fb58 	.word	0x0000fb58
	ldr r1, =z_arm_int_exit
    9480:	00009485 	.word	0x00009485

00009484 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    9484:	4b04      	ldr	r3, [pc, #16]	; (9498 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    9486:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    9488:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    948a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    948c:	d003      	beq.n	9496 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    948e:	4903      	ldr	r1, [pc, #12]	; (949c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    9490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    9494:	600a      	str	r2, [r1, #0]

00009496 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    9496:	4770      	bx	lr
	ldr r3, =_kernel
    9498:	2000cecc 	.word	0x2000cecc
	ldr r1, =_SCS_ICSR
    949c:	e000ed04 	.word	0xe000ed04

000094a0 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    94a0:	4b15      	ldr	r3, [pc, #84]	; (94f8 <usage_fault.constprop.0+0x58>)
    94a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    94a4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    94a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    94aa:	bf14      	ite	ne
    94ac:	201e      	movne	r0, #30
    94ae:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    94b0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    94b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    94b6:	bf18      	it	ne
    94b8:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    94ba:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    94be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    94c0:	bf18      	it	ne
    94c2:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    94c4:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    94c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    94ca:	bf18      	it	ne
    94cc:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    94ce:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    94d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    94d4:	bf18      	it	ne
    94d6:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    94d8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    94dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    94de:	bf18      	it	ne
    94e0:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    94e2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    94e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    94e8:	bf18      	it	ne
    94ea:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    94ec:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    94f0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    94f4:	629a      	str	r2, [r3, #40]	; 0x28
}
    94f6:	4770      	bx	lr
    94f8:	e000ed00 	.word	0xe000ed00

000094fc <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    94fc:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    94fe:	4b19      	ldr	r3, [pc, #100]	; (9564 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    9500:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    9502:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    9504:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    9506:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    950a:	bf14      	ite	ne
    950c:	2017      	movne	r0, #23
    950e:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    9510:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    9514:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    9516:	bf18      	it	ne
    9518:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    951a:	05a4      	lsls	r4, r4, #22
    951c:	d509      	bpl.n	9532 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    951e:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    9520:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9522:	0400      	lsls	r0, r0, #16
    9524:	d504      	bpl.n	9530 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    9526:	b11a      	cbz	r2, 9530 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    9528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    952a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    952e:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    9530:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    9532:	4b0c      	ldr	r3, [pc, #48]	; (9564 <bus_fault.constprop.0+0x68>)
    9534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    9536:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    953a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    953c:	bf18      	it	ne
    953e:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    9540:	05d2      	lsls	r2, r2, #23
    9542:	d40c      	bmi.n	955e <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    9544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    9546:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    954a:	bf18      	it	ne
    954c:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    954e:	4a05      	ldr	r2, [pc, #20]	; (9564 <bus_fault.constprop.0+0x68>)
    9550:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9552:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    9556:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    9558:	2300      	movs	r3, #0
    955a:	700b      	strb	r3, [r1, #0]
}
    955c:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    955e:	201b      	movs	r0, #27
    9560:	e7f5      	b.n	954e <bus_fault.constprop.0+0x52>
    9562:	bf00      	nop
    9564:	e000ed00 	.word	0xe000ed00

00009568 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    9568:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    956a:	4b1c      	ldr	r3, [pc, #112]	; (95dc <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    956c:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    956e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    9570:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    9572:	f010 0f10 	tst.w	r0, #16
    9576:	bf14      	ite	ne
    9578:	2011      	movne	r0, #17
    957a:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    957c:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    9580:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    9582:	bf18      	it	ne
    9584:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    9586:	07a4      	lsls	r4, r4, #30
    9588:	d509      	bpl.n	959e <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    958a:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    958c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    958e:	0600      	lsls	r0, r0, #24
    9590:	d504      	bpl.n	959c <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    9592:	b11a      	cbz	r2, 959c <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    9594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    9596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    959a:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    959c:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    959e:	4b0f      	ldr	r3, [pc, #60]	; (95dc <mem_manage_fault.constprop.0+0x74>)
    95a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    95a2:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    95a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    95a8:	bf18      	it	ne
    95aa:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    95ac:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    95b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    95b2:	bf18      	it	ne
    95b4:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    95b6:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    95b8:	bf58      	it	pl
    95ba:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    95bc:	4b07      	ldr	r3, [pc, #28]	; (95dc <mem_manage_fault.constprop.0+0x74>)
    95be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    95c0:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    95c2:	bf42      	ittt	mi
    95c4:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    95c6:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    95ca:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    95cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    95ce:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    95d2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    95d4:	2300      	movs	r3, #0
    95d6:	700b      	strb	r3, [r1, #0]
}
    95d8:	bd10      	pop	{r4, pc}
    95da:	bf00      	nop
    95dc:	e000ed00 	.word	0xe000ed00

000095e0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    95e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    95e2:	4b4a      	ldr	r3, [pc, #296]	; (970c <z_arm_fault+0x12c>)
{
    95e4:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    95e6:	685b      	ldr	r3, [r3, #4]
    95e8:	2500      	movs	r5, #0
{
    95ea:	b08b      	sub	sp, #44	; 0x2c
    95ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
    95f0:	f385 8811 	msr	BASEPRI, r5
    95f4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    95f8:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    95fc:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    9600:	d116      	bne.n	9630 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    9602:	07d6      	lsls	r6, r2, #31
    9604:	d414      	bmi.n	9630 <z_arm_fault+0x50>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    9606:	0655      	lsls	r5, r2, #25
    9608:	d403      	bmi.n	9612 <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    960a:	0710      	lsls	r0, r2, #28
    960c:	d404      	bmi.n	9618 <z_arm_fault+0x38>
			*nested_exc = true;
    960e:	2501      	movs	r5, #1
    9610:	e004      	b.n	961c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    9612:	f012 0204 	ands.w	r2, r2, #4
    9616:	d000      	beq.n	961a <z_arm_fault+0x3a>
			ptr_esf = (z_arch_esf_t *)psp;
    9618:	460c      	mov	r4, r1
	*nested_exc = false;
    961a:	2500      	movs	r5, #0
	*recoverable = false;
    961c:	2200      	movs	r2, #0
	switch (fault) {
    961e:	3b03      	subs	r3, #3
	*recoverable = false;
    9620:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    9624:	2b03      	cmp	r3, #3
    9626:	d805      	bhi.n	9634 <z_arm_fault+0x54>
    9628:	e8df f003 	tbb	[pc, r3]
    962c:	5f666224 	.word	0x5f666224
		return NULL;
    9630:	462c      	mov	r4, r5
    9632:	e7f3      	b.n	961c <z_arm_fault+0x3c>
    9634:	2300      	movs	r3, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    9636:	f89d 2007 	ldrb.w	r2, [sp, #7]
    963a:	b9ca      	cbnz	r2, 9670 <z_arm_fault+0x90>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    963c:	ae02      	add	r6, sp, #8
    963e:	f104 0720 	add.w	r7, r4, #32
    9642:	4632      	mov	r2, r6
    9644:	6820      	ldr	r0, [r4, #0]
    9646:	6861      	ldr	r1, [r4, #4]
    9648:	3408      	adds	r4, #8
    964a:	c203      	stmia	r2!, {r0, r1}
    964c:	42bc      	cmp	r4, r7
    964e:	4616      	mov	r6, r2
    9650:	d1f7      	bne.n	9642 <z_arm_fault+0x62>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    9652:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9654:	2d00      	cmp	r5, #0
    9656:	d053      	beq.n	9700 <z_arm_fault+0x120>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    9658:	f3c2 0108 	ubfx	r1, r2, #0, #9
    965c:	b921      	cbnz	r1, 9668 <z_arm_fault+0x88>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    965e:	ea6f 2252 	mvn.w	r2, r2, lsr #9
    9662:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    9666:	9209      	str	r2, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    9668:	4618      	mov	r0, r3
    966a:	a902      	add	r1, sp, #8
    966c:	f005 f87b 	bl	e766 <z_arm_fatal_error>
}
    9670:	b00b      	add	sp, #44	; 0x2c
    9672:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    9674:	4b25      	ldr	r3, [pc, #148]	; (970c <z_arm_fault+0x12c>)
    9676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9678:	0791      	lsls	r1, r2, #30
    967a:	d4db      	bmi.n	9634 <z_arm_fault+0x54>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    967c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    967e:	2a00      	cmp	r2, #0
    9680:	dbd8      	blt.n	9634 <z_arm_fault+0x54>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    9682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9684:	0052      	lsls	r2, r2, #1
    9686:	d5d5      	bpl.n	9634 <z_arm_fault+0x54>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    9688:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    968a:	69a1      	ldr	r1, [r4, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    968c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    9690:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    9692:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9696:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    969a:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    969c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    96a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    96a4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    96a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    96aa:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    96ae:	f64d 7202 	movw	r2, #57090	; 0xdf02
    96b2:	4291      	cmp	r1, r2
    96b4:	d101      	bne.n	96ba <z_arm_fault+0xda>
			reason = esf->basic.r0;
    96b6:	6823      	ldr	r3, [r4, #0]
    96b8:	e7bd      	b.n	9636 <z_arm_fault+0x56>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    96ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    96bc:	b2d2      	uxtb	r2, r2
    96be:	b132      	cbz	r2, 96ce <z_arm_fault+0xee>
			reason = mem_manage_fault(esf, 1, recoverable);
    96c0:	2001      	movs	r0, #1
    96c2:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    96c6:	f7ff ff4f 	bl	9568 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    96ca:	4603      	mov	r3, r0
		break;
    96cc:	e7b3      	b.n	9636 <z_arm_fault+0x56>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    96ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    96d0:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    96d4:	d005      	beq.n	96e2 <z_arm_fault+0x102>
			reason = bus_fault(esf, 1, recoverable);
    96d6:	2001      	movs	r0, #1
    96d8:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    96dc:	f7ff ff0e 	bl	94fc <bus_fault.constprop.0>
    96e0:	e7f3      	b.n	96ca <z_arm_fault+0xea>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    96e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    96e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    96e8:	d3a4      	bcc.n	9634 <z_arm_fault+0x54>
		reason = usage_fault(esf);
    96ea:	f7ff fed9 	bl	94a0 <usage_fault.constprop.0>
    96ee:	e7ec      	b.n	96ca <z_arm_fault+0xea>
		reason = mem_manage_fault(esf, 0, recoverable);
    96f0:	2000      	movs	r0, #0
    96f2:	f10d 0107 	add.w	r1, sp, #7
    96f6:	e7e6      	b.n	96c6 <z_arm_fault+0xe6>
		reason = bus_fault(esf, 0, recoverable);
    96f8:	2000      	movs	r0, #0
    96fa:	f10d 0107 	add.w	r1, sp, #7
    96fe:	e7ed      	b.n	96dc <z_arm_fault+0xfc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    9700:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
    9704:	f022 0201 	bic.w	r2, r2, #1
    9708:	e7ad      	b.n	9666 <z_arm_fault+0x86>
    970a:	bf00      	nop
    970c:	e000ed00 	.word	0xe000ed00

00009710 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    9710:	4b04      	ldr	r3, [pc, #16]	; (9724 <z_arm_fault_init+0x14>)
    9712:	695a      	ldr	r2, [r3, #20]
    9714:	f042 0210 	orr.w	r2, r2, #16
    9718:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    971a:	695a      	ldr	r2, [r3, #20]
    971c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    9720:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    9722:	4770      	bx	lr
    9724:	e000ed00 	.word	0xe000ed00

00009728 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    9728:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    972c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    9730:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    9732:	4672      	mov	r2, lr
	bl z_arm_fault
    9734:	f7ff ff54 	bl	95e0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    9738:	bd01      	pop	{r0, pc}
    973a:	bf00      	nop

0000973c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    973c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    973e:	2120      	movs	r1, #32
    9740:	4803      	ldr	r0, [pc, #12]	; (9750 <z_arm_interrupt_init+0x14>)
    9742:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    9744:	3301      	adds	r3, #1
    9746:	2b41      	cmp	r3, #65	; 0x41
    9748:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    974c:	d1f9      	bne.n	9742 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    974e:	4770      	bx	lr
    9750:	e000e100 	.word	0xe000e100

00009754 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    9754:	2000      	movs	r0, #0
    msr CONTROL, r0
    9756:	f380 8814 	msr	CONTROL, r0
    isb
    975a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    975e:	2000      	movs	r0, #0
    msr MSPLIM, r0
    9760:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    9764:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    9768:	f7ff fc3e 	bl	8fe8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    976c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    976e:	490e      	ldr	r1, [pc, #56]	; (97a8 <__start+0x54>)
    str r0, [r1]
    9770:	6008      	str	r0, [r1, #0]
    dsb
    9772:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    9776:	480d      	ldr	r0, [pc, #52]	; (97ac <__start+0x58>)
    msr msp, r0
    9778:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    977c:	f000 f83e 	bl	97fc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    9780:	2020      	movs	r0, #32
    msr BASEPRI, r0
    9782:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    9786:	480a      	ldr	r0, [pc, #40]	; (97b0 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    9788:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    978c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    978e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    9792:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    9796:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    9798:	4308      	orrs	r0, r1
    msr CONTROL, r0
    979a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    979e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    97a2:	f7ff fda7 	bl	92f4 <z_arm_prep_c>
    97a6:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    97a8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    97ac:	2000dc78 	.word	0x2000dc78
    ldr r0, =z_interrupt_stacks
    97b0:	2000cf38 	.word	0x2000cf38

000097b4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    97b4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    97b8:	4905      	ldr	r1, [pc, #20]	; (97d0 <sys_arch_reboot+0x1c>)
    97ba:	4b06      	ldr	r3, [pc, #24]	; (97d4 <sys_arch_reboot+0x20>)
    97bc:	68ca      	ldr	r2, [r1, #12]
    97be:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    97c2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    97c4:	60cb      	str	r3, [r1, #12]
    97c6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    97ca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    97cc:	e7fd      	b.n	97ca <sys_arch_reboot+0x16>
    97ce:	bf00      	nop
    97d0:	e000ed00 	.word	0xe000ed00
    97d4:	05fa0004 	.word	0x05fa0004

000097d8 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    97d8:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    97da:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    97dc:	4906      	ldr	r1, [pc, #24]	; (97f8 <z_arm_clear_arm_mpu_config+0x20>)
    97de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    97e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    97e6:	4293      	cmp	r3, r2
    97e8:	db00      	blt.n	97ec <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    97ea:	4770      	bx	lr
  mpu->RNR = rnr;
    97ec:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    97f0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    97f4:	3301      	adds	r3, #1
    97f6:	e7f6      	b.n	97e6 <z_arm_clear_arm_mpu_config+0xe>
    97f8:	e000ed00 	.word	0xe000ed00

000097fc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    97fc:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    97fe:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    9800:	2400      	movs	r4, #0
    9802:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    9806:	f7ff ffe7 	bl	97d8 <z_arm_clear_arm_mpu_config>
    980a:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    980c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9810:	4a0c      	ldr	r2, [pc, #48]	; (9844 <z_arm_init_arch_hw_at_boot+0x48>)
    9812:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    9816:	3301      	adds	r3, #1
    9818:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    981a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    981e:	d1f8      	bne.n	9812 <z_arm_init_arch_hw_at_boot+0x16>
    9820:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    9822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9826:	4a07      	ldr	r2, [pc, #28]	; (9844 <z_arm_init_arch_hw_at_boot+0x48>)
    9828:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    982c:	3301      	adds	r3, #1
    982e:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    9830:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    9834:	d1f8      	bne.n	9828 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    9836:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    9838:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    983c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    9840:	bd10      	pop	{r4, pc}
    9842:	bf00      	nop
    9844:	e000e100 	.word	0xe000e100

00009848 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    9848:	4b08      	ldr	r3, [pc, #32]	; (986c <z_impl_k_thread_abort+0x24>)
    984a:	689b      	ldr	r3, [r3, #8]
    984c:	4283      	cmp	r3, r0
    984e:	d10b      	bne.n	9868 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9850:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    9854:	b143      	cbz	r3, 9868 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    9856:	4b06      	ldr	r3, [pc, #24]	; (9870 <z_impl_k_thread_abort+0x28>)
    9858:	685a      	ldr	r2, [r3, #4]
    985a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    985e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    9860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    9866:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    9868:	f003 be8c 	b.w	d584 <z_thread_abort>
    986c:	2000cecc 	.word	0x2000cecc
    9870:	e000ed00 	.word	0xe000ed00

00009874 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    9874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    9876:	4c09      	ldr	r4, [pc, #36]	; (989c <z_arm_configure_static_mpu_regions+0x28>)
    9878:	4a09      	ldr	r2, [pc, #36]	; (98a0 <z_arm_configure_static_mpu_regions+0x2c>)
    987a:	4623      	mov	r3, r4
    987c:	2101      	movs	r1, #1
    987e:	4809      	ldr	r0, [pc, #36]	; (98a4 <z_arm_configure_static_mpu_regions+0x30>)
    9880:	f000 f8ea 	bl	9a58 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    9884:	2300      	movs	r3, #0
    9886:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    9888:	4b07      	ldr	r3, [pc, #28]	; (98a8 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    988a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    988c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    988e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    9890:	9301      	str	r3, [sp, #4]
    9892:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    9894:	f000 f8ea 	bl	9a6c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    9898:	b004      	add	sp, #16
    989a:	bd10      	pop	{r4, pc}
    989c:	20040000 	.word	0x20040000
    98a0:	2000c580 	.word	0x2000c580
    98a4:	0000fe18 	.word	0x0000fe18
    98a8:	2000c830 	.word	0x2000c830

000098ac <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    98ac:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    98ae:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    98b0:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    98b2:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    98b6:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    98ba:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    98bc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    98be:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    98c0:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    98c4:	4905      	ldr	r1, [pc, #20]	; (98dc <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    98c6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    98ca:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    98ce:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    98d2:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    98d6:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    98da:	bd10      	pop	{r4, pc}
    98dc:	e000ed00 	.word	0xe000ed00

000098e0 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    98e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98e4:	460f      	mov	r7, r1
    98e6:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    98e8:	4606      	mov	r6, r0
    98ea:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    98ee:	4d4e      	ldr	r5, [pc, #312]	; (9a28 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    98f0:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    98f2:	45b8      	cmp	r8, r7
    98f4:	f280 8094 	bge.w	9a20 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    98f8:	f8d6 9004 	ldr.w	r9, [r6, #4]
    98fc:	f1b9 0f00 	cmp.w	r9, #0
    9900:	d036      	beq.n	9970 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    9902:	f1b9 0f1f 	cmp.w	r9, #31
    9906:	f240 8089 	bls.w	9a1c <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    990a:	f019 0f1f 	tst.w	r9, #31
    990e:	f040 8085 	bne.w	9a1c <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    9912:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    9916:	f01a 0f1f 	tst.w	sl, #31
    991a:	d17f      	bne.n	9a1c <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    991c:	4650      	mov	r0, sl
    991e:	f004 ff39 	bl	e794 <arm_cmse_mpu_region_get>
    9922:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    9924:	eb09 000a 	add.w	r0, r9, sl
    9928:	3801      	subs	r0, #1
    992a:	f004 ff33 	bl	e794 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    992e:	4583      	cmp	fp, r0
    9930:	d174      	bne.n	9a1c <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    9932:	f11b 0f16 	cmn.w	fp, #22
    9936:	d071      	beq.n	9a1c <mpu_configure_regions_and_partition.constprop.0+0x13c>
    9938:	455c      	cmp	r4, fp
    993a:	dd6f      	ble.n	9a1c <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    993c:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    9940:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    9944:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    9948:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    994c:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    9950:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    9954:	e9d6 3200 	ldrd	r3, r2, [r6]
    9958:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    995a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    995c:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    9960:	d11e      	bne.n	99a0 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    9962:	45ca      	cmp	sl, r9
    9964:	d108      	bne.n	9978 <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    9966:	4631      	mov	r1, r6
    9968:	fa5f f08b 	uxtb.w	r0, fp
    996c:	f004 ff1b 	bl	e7a6 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    9970:	f108 0801 	add.w	r8, r8, #1
    9974:	360c      	adds	r6, #12
    9976:	e7bc      	b.n	98f2 <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    9978:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    997a:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    997e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    9982:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    9986:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    998a:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    998c:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    9990:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    9992:	f004 ff08 	bl	e7a6 <mpu_configure_region>

			if (reg_index == -EINVAL) {
    9996:	f110 0f16 	cmn.w	r0, #22
    999a:	d03f      	beq.n	9a1c <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    999c:	1c44      	adds	r4, r0, #1
    999e:	e7e7      	b.n	9970 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    99a0:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    99a4:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    99a8:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    99aa:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    99ae:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    99b2:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    99b4:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    99b6:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    99b8:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    99ba:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    99be:	d0e8      	beq.n	9992 <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    99c0:	f004 fef1 	bl	e7a6 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    99c4:	f110 0f16 	cmn.w	r0, #22
    99c8:	d028      	beq.n	9a1c <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    99ca:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    99ce:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    99d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    99d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
    99da:	f362 0304 	bfi	r3, r2, #0, #5
    99de:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    99e2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    99e6:	f89d 2008 	ldrb.w	r2, [sp, #8]
    99ea:	085b      	lsrs	r3, r3, #1
    99ec:	f363 1247 	bfi	r2, r3, #5, #3
    99f0:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    99f4:	e9d6 3200 	ldrd	r3, r2, [r6]
    99f8:	4413      	add	r3, r2
    99fa:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    99fc:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    9a00:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    9a02:	4453      	add	r3, sl
    9a04:	eba3 0309 	sub.w	r3, r3, r9
    9a08:	b2c8      	uxtb	r0, r1
    9a0a:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    9a0e:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    9a10:	9303      	str	r3, [sp, #12]
    9a12:	d803      	bhi.n	9a1c <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    9a14:	4669      	mov	r1, sp
    9a16:	f7ff ff49 	bl	98ac <region_init>
    9a1a:	e7bf      	b.n	999c <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    9a1c:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    9a20:	4620      	mov	r0, r4
    9a22:	b005      	add	sp, #20
    9a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a28:	e000ed00 	.word	0xe000ed00

00009a2c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    9a2c:	2205      	movs	r2, #5
    9a2e:	4b04      	ldr	r3, [pc, #16]	; (9a40 <arm_core_mpu_enable+0x14>)
    9a30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    9a34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9a38:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    9a3c:	4770      	bx	lr
    9a3e:	bf00      	nop
    9a40:	e000ed00 	.word	0xe000ed00

00009a44 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    9a44:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    9a48:	2200      	movs	r2, #0
    9a4a:	4b02      	ldr	r3, [pc, #8]	; (9a54 <arm_core_mpu_disable+0x10>)
    9a4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    9a50:	4770      	bx	lr
    9a52:	bf00      	nop
    9a54:	e000ed00 	.word	0xe000ed00

00009a58 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    9a58:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    9a5a:	4c03      	ldr	r4, [pc, #12]	; (9a68 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    9a5c:	7822      	ldrb	r2, [r4, #0]
    9a5e:	f7ff ff3f 	bl	98e0 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    9a62:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    9a64:	bd10      	pop	{r4, pc}
    9a66:	bf00      	nop
    9a68:	2000cf1a 	.word	0x2000cf1a

00009a6c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    9a6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a70:	4d29      	ldr	r5, [pc, #164]	; (9b18 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    9a72:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    9a74:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    9a76:	f04f 0800 	mov.w	r8, #0
    9a7a:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    9a7c:	4f27      	ldr	r7, [pc, #156]	; (9b1c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    9a7e:	45d0      	cmp	r8, sl
    9a80:	da1b      	bge.n	9aba <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    9a82:	f8d6 9004 	ldr.w	r9, [r6, #4]
    9a86:	f1b9 0f00 	cmp.w	r9, #0
    9a8a:	d03f      	beq.n	9b0c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    9a8c:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    9a8e:	4608      	mov	r0, r1
    9a90:	9101      	str	r1, [sp, #4]
    9a92:	f004 fe7f 	bl	e794 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    9a96:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    9a98:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    9a9a:	eb09 0001 	add.w	r0, r9, r1
    9a9e:	3801      	subs	r0, #1
    9aa0:	f004 fe78 	bl	e794 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    9aa4:	4284      	cmp	r4, r0
    9aa6:	f04f 0214 	mov.w	r2, #20
    9aaa:	4b1d      	ldr	r3, [pc, #116]	; (9b20 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    9aac:	d008      	beq.n	9ac0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    9aae:	fb02 f308 	mul.w	r3, r2, r8
    9ab2:	f06f 0215 	mvn.w	r2, #21
    9ab6:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    9aba:	b003      	add	sp, #12
    9abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    9ac0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    9ac4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    9ac6:	d0f8      	beq.n	9aba <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    9ac8:	7819      	ldrb	r1, [r3, #0]
    9aca:	42a1      	cmp	r1, r4
    9acc:	ddf5      	ble.n	9aba <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    9ace:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    9ad2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    9ad6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    9ada:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    9ade:	f100 0108 	add.w	r1, r0, #8
    9ae2:	7b00      	ldrb	r0, [r0, #12]
    9ae4:	f364 0004 	bfi	r0, r4, #0, #5
    9ae8:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    9aea:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    9aee:	790c      	ldrb	r4, [r1, #4]
    9af0:	0840      	lsrs	r0, r0, #1
    9af2:	f360 1447 	bfi	r4, r0, #5, #3
    9af6:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    9af8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    9afc:	f021 011f 	bic.w	r1, r1, #31
    9b00:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    9b02:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    9b06:	f021 011f 	bic.w	r1, r1, #31
    9b0a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    9b0c:	f108 0801 	add.w	r8, r8, #1
    9b10:	3514      	adds	r5, #20
    9b12:	360c      	adds	r6, #12
    9b14:	e7b3      	b.n	9a7e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    9b16:	bf00      	nop
    9b18:	2000c994 	.word	0x2000c994
    9b1c:	e000ed00 	.word	0xe000ed00
    9b20:	2000cf1a 	.word	0x2000cf1a

00009b24 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    9b24:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    9b26:	4d0e      	ldr	r5, [pc, #56]	; (9b60 <z_arm_mpu_init+0x3c>)
    9b28:	682c      	ldr	r4, [r5, #0]
    9b2a:	2c10      	cmp	r4, #16
    9b2c:	d815      	bhi.n	9b5a <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9b2e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    9b30:	f7ff ff88 	bl	9a44 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    9b34:	4b0b      	ldr	r3, [pc, #44]	; (9b64 <z_arm_mpu_init+0x40>)
    9b36:	4a0c      	ldr	r2, [pc, #48]	; (9b68 <z_arm_mpu_init+0x44>)
    9b38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9b3c:	4284      	cmp	r4, r0
    9b3e:	d105      	bne.n	9b4c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    9b40:	4b0a      	ldr	r3, [pc, #40]	; (9b6c <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    9b42:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    9b44:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    9b46:	f7ff ff71 	bl	9a2c <arm_core_mpu_enable>
}
    9b4a:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    9b4c:	6869      	ldr	r1, [r5, #4]
    9b4e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    9b52:	f7ff feab 	bl	98ac <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    9b56:	3001      	adds	r0, #1
    9b58:	e7f0      	b.n	9b3c <z_arm_mpu_init+0x18>
		return -1;
    9b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9b5e:	e7f4      	b.n	9b4a <z_arm_mpu_init+0x26>
    9b60:	0000fe24 	.word	0x0000fe24
    9b64:	e000ed00 	.word	0xe000ed00
    9b68:	0044ffaa 	.word	0x0044ffaa
    9b6c:	2000cf1a 	.word	0x2000cf1a

00009b70 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    9b70:	4b01      	ldr	r3, [pc, #4]	; (9b78 <__stdout_hook_install+0x8>)
    9b72:	6018      	str	r0, [r3, #0]
}
    9b74:	4770      	bx	lr
    9b76:	bf00      	nop
    9b78:	2000c65c 	.word	0x2000c65c

00009b7c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    9b7c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    9b7e:	4c07      	ldr	r4, [pc, #28]	; (9b9c <_sbrk+0x20>)
    9b80:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    9b82:	18c2      	adds	r2, r0, r3
    9b84:	4806      	ldr	r0, [pc, #24]	; (9ba0 <_sbrk+0x24>)
    9b86:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    9b8a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    9b8e:	428a      	cmp	r2, r1
		heap_sz += count;
    9b90:	bf36      	itet	cc
    9b92:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    9b94:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
    9b98:	18c0      	addcc	r0, r0, r3
	}

	return ret;
}
    9b9a:	bd10      	pop	{r4, pc}
    9b9c:	2000c9a8 	.word	0x2000c9a8
    9ba0:	2000de78 	.word	0x2000de78

00009ba4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    9ba4:	4b08      	ldr	r3, [pc, #32]	; (9bc8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    9ba6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    9ba8:	1ac3      	subs	r3, r0, r3
{
    9baa:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9bac:	4907      	ldr	r1, [pc, #28]	; (9bcc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    9bae:	109b      	asrs	r3, r3, #2
{
    9bb0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9bb2:	4359      	muls	r1, r3
    9bb4:	2240      	movs	r2, #64	; 0x40
    9bb6:	4806      	ldr	r0, [pc, #24]	; (9bd0 <onoff_stop+0x2c>)
    9bb8:	f004 fe3d 	bl	e836 <stop>
	notify(mgr, res);
    9bbc:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    9bbe:	4601      	mov	r1, r0
	notify(mgr, res);
    9bc0:	4620      	mov	r0, r4
}
    9bc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    9bc6:	4718      	bx	r3
    9bc8:	2000c9c0 	.word	0x2000c9c0
    9bcc:	b6db6db7 	.word	0xb6db6db7
    9bd0:	0000faf8 	.word	0x0000faf8

00009bd4 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9bd4:	2340      	movs	r3, #64	; 0x40
{
    9bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    9bd8:	4c0b      	ldr	r4, [pc, #44]	; (9c08 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9bda:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    9bdc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9bde:	460b      	mov	r3, r1
{
    9be0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9be2:	490a      	ldr	r1, [pc, #40]	; (9c0c <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    9be4:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9be6:	4361      	muls	r1, r4
{
    9be8:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    9bea:	4a09      	ldr	r2, [pc, #36]	; (9c10 <onoff_start+0x3c>)
    9bec:	4809      	ldr	r0, [pc, #36]	; (9c14 <onoff_start+0x40>)
    9bee:	f004 fe4f 	bl	e890 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    9bf2:	1e01      	subs	r1, r0, #0
    9bf4:	da05      	bge.n	9c02 <onoff_start+0x2e>
		notify(mgr, err);
    9bf6:	4630      	mov	r0, r6
    9bf8:	462b      	mov	r3, r5
	}
}
    9bfa:	b002      	add	sp, #8
    9bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    9c00:	4718      	bx	r3
}
    9c02:	b002      	add	sp, #8
    9c04:	bd70      	pop	{r4, r5, r6, pc}
    9c06:	bf00      	nop
    9c08:	2000c9c0 	.word	0x2000c9c0
    9c0c:	b6db6db7 	.word	0xb6db6db7
    9c10:	0000e8fd 	.word	0x0000e8fd
    9c14:	0000faf8 	.word	0x0000faf8

00009c18 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    9c18:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9c1a:	2200      	movs	r2, #0
    9c1c:	2101      	movs	r1, #1
{
    9c1e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    9c20:	2005      	movs	r0, #5
    9c22:	f7ff fb4d 	bl	92c0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    9c26:	480f      	ldr	r0, [pc, #60]	; (9c64 <clk_init+0x4c>)
    9c28:	f001 fb50 	bl	b2cc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    9c2c:	4b0e      	ldr	r3, [pc, #56]	; (9c68 <clk_init+0x50>)
    9c2e:	4298      	cmp	r0, r3
    9c30:	d115      	bne.n	9c5e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    9c32:	f001 fb5b 	bl	b2ec <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    9c36:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    9c38:	490c      	ldr	r1, [pc, #48]	; (9c6c <clk_init+0x54>)
    9c3a:	4630      	mov	r0, r6
    9c3c:	f004 fce0 	bl	e600 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    9c40:	2800      	cmp	r0, #0
    9c42:	db0b      	blt.n	9c5c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9c44:	2501      	movs	r5, #1
    9c46:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    9c48:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    9c4a:	4908      	ldr	r1, [pc, #32]	; (9c6c <clk_init+0x54>)
    9c4c:	f104 001c 	add.w	r0, r4, #28
    9c50:	f004 fcd6 	bl	e600 <onoff_manager_init>
		if (err < 0) {
    9c54:	2800      	cmp	r0, #0
    9c56:	db01      	blt.n	9c5c <clk_init+0x44>
	}

	return 0;
    9c58:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    9c5a:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    9c5c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    9c5e:	f06f 0004 	mvn.w	r0, #4
    9c62:	e7fb      	b.n	9c5c <clk_init+0x44>
    9c64:	00009ca5 	.word	0x00009ca5
    9c68:	0bad0000 	.word	0x0bad0000
    9c6c:	0000fe4c 	.word	0x0000fe4c

00009c70 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    9c70:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    9c72:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    9c74:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    9c76:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    9c78:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    9c7a:	4808      	ldr	r0, [pc, #32]	; (9c9c <clkstarted_handle.constprop.0+0x2c>)
    9c7c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    9c7e:	3340      	adds	r3, #64	; 0x40
    9c80:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    9c82:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    9c86:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    9c88:	f004 fdc2 	bl	e810 <set_on_state>
	if (callback) {
    9c8c:	b12d      	cbz	r5, 9c9a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    9c8e:	4632      	mov	r2, r6
    9c90:	462b      	mov	r3, r5
}
    9c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    9c96:	4802      	ldr	r0, [pc, #8]	; (9ca0 <clkstarted_handle.constprop.0+0x30>)
    9c98:	4718      	bx	r3
}
    9c9a:	bd70      	pop	{r4, r5, r6, pc}
    9c9c:	2000c9c0 	.word	0x2000c9c0
    9ca0:	0000faf8 	.word	0x0000faf8

00009ca4 <clock_event_handler>:
	switch (event) {
    9ca4:	b110      	cbz	r0, 9cac <clock_event_handler+0x8>
    9ca6:	2801      	cmp	r0, #1
    9ca8:	d004      	beq.n	9cb4 <clock_event_handler+0x10>
    9caa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    9cac:	4b03      	ldr	r3, [pc, #12]	; (9cbc <clock_event_handler+0x18>)
    9cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9cb0:	075b      	lsls	r3, r3, #29
    9cb2:	d101      	bne.n	9cb8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    9cb4:	f7ff bfdc 	b.w	9c70 <clkstarted_handle.constprop.0>
}
    9cb8:	4770      	bx	lr
    9cba:	bf00      	nop
    9cbc:	2000c9c0 	.word	0x2000c9c0

00009cc0 <generic_hfclk_start>:
{
    9cc0:	b508      	push	{r3, lr}
	__asm__ volatile(
    9cc2:	f04f 0320 	mov.w	r3, #32
    9cc6:	f3ef 8111 	mrs	r1, BASEPRI
    9cca:	f383 8812 	msr	BASEPRI_MAX, r3
    9cce:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    9cd2:	4a11      	ldr	r2, [pc, #68]	; (9d18 <generic_hfclk_start+0x58>)
    9cd4:	6813      	ldr	r3, [r2, #0]
    9cd6:	f043 0002 	orr.w	r0, r3, #2
    9cda:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    9cdc:	07da      	lsls	r2, r3, #31
    9cde:	d408      	bmi.n	9cf2 <generic_hfclk_start+0x32>
	__asm__ volatile(
    9ce0:	f381 8811 	msr	BASEPRI, r1
    9ce4:	f3bf 8f6f 	isb	sy
}
    9ce8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    9cec:	2001      	movs	r0, #1
    9cee:	f001 bb0d 	b.w	b30c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9cf2:	4b0a      	ldr	r3, [pc, #40]	; (9d1c <generic_hfclk_start+0x5c>)
    9cf4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9cf8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    9cfc:	07d3      	lsls	r3, r2, #31
    9cfe:	d5ef      	bpl.n	9ce0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    9d00:	4807      	ldr	r0, [pc, #28]	; (9d20 <generic_hfclk_start+0x60>)
    9d02:	f004 fd85 	bl	e810 <set_on_state>
    9d06:	f381 8811 	msr	BASEPRI, r1
    9d0a:	f3bf 8f6f 	isb	sy
}
    9d0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    9d12:	2000      	movs	r0, #0
    9d14:	f7ff bfac 	b.w	9c70 <clkstarted_handle.constprop.0>
    9d18:	2000ca10 	.word	0x2000ca10
    9d1c:	40005000 	.word	0x40005000
    9d20:	2000ca00 	.word	0x2000ca00

00009d24 <api_blocking_start>:
{
    9d24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    9d26:	2200      	movs	r2, #0
    9d28:	2301      	movs	r3, #1
    9d2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    9d2e:	466b      	mov	r3, sp
    9d30:	4a08      	ldr	r2, [pc, #32]	; (9d54 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    9d32:	f8cd d000 	str.w	sp, [sp]
    9d36:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    9d3a:	f004 fdd8 	bl	e8ee <api_start>
	if (err < 0) {
    9d3e:	2800      	cmp	r0, #0
    9d40:	db05      	blt.n	9d4e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    9d42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9d46:	2300      	movs	r3, #0
    9d48:	4668      	mov	r0, sp
    9d4a:	f003 f911 	bl	cf70 <z_impl_k_sem_take>
}
    9d4e:	b005      	add	sp, #20
    9d50:	f85d fb04 	ldr.w	pc, [sp], #4
    9d54:	0000e91b 	.word	0x0000e91b

00009d58 <generic_hfclk_stop>:
{
    9d58:	b510      	push	{r4, lr}
	__asm__ volatile(
    9d5a:	f04f 0320 	mov.w	r3, #32
    9d5e:	f3ef 8411 	mrs	r4, BASEPRI
    9d62:	f383 8812 	msr	BASEPRI_MAX, r3
    9d66:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    9d6a:	4a07      	ldr	r2, [pc, #28]	; (9d88 <generic_hfclk_stop+0x30>)
    9d6c:	6813      	ldr	r3, [r2, #0]
    9d6e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    9d72:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    9d74:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    9d76:	d402      	bmi.n	9d7e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    9d78:	2001      	movs	r0, #1
    9d7a:	f005 f916 	bl	efaa <nrfx_clock_stop>
	__asm__ volatile(
    9d7e:	f384 8811 	msr	BASEPRI, r4
    9d82:	f3bf 8f6f 	isb	sy
}
    9d86:	bd10      	pop	{r4, pc}
    9d88:	2000ca10 	.word	0x2000ca10

00009d8c <z_nrf_clock_control_lf_on>:
{
    9d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9d90:	2201      	movs	r2, #1
    9d92:	4607      	mov	r7, r0
    9d94:	4935      	ldr	r1, [pc, #212]	; (9e6c <z_nrf_clock_control_lf_on+0xe0>)
    9d96:	e8d1 3fef 	ldaex	r3, [r1]
    9d9a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    9d9e:	2800      	cmp	r0, #0
    9da0:	d1f9      	bne.n	9d96 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    9da2:	b933      	cbnz	r3, 9db2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    9da4:	4932      	ldr	r1, [pc, #200]	; (9e70 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    9da6:	4833      	ldr	r0, [pc, #204]	; (9e74 <z_nrf_clock_control_lf_on+0xe8>)
    9da8:	604b      	str	r3, [r1, #4]
    9daa:	60cb      	str	r3, [r1, #12]
    9dac:	608a      	str	r2, [r1, #8]
    9dae:	f004 fc3a 	bl	e626 <onoff_request>
	switch (start_mode) {
    9db2:	1e7b      	subs	r3, r7, #1
    9db4:	2b01      	cmp	r3, #1
    9db6:	d828      	bhi.n	9e0a <z_nrf_clock_control_lf_on+0x7e>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    9db8:	2f01      	cmp	r7, #1
    9dba:	d106      	bne.n	9dca <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    9dbc:	4b2e      	ldr	r3, [pc, #184]	; (9e78 <z_nrf_clock_control_lf_on+0xec>)
    9dbe:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    9dc2:	f003 0303 	and.w	r3, r3, #3
    9dc6:	2b02      	cmp	r3, #2
    9dc8:	d01f      	beq.n	9e0a <z_nrf_clock_control_lf_on+0x7e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9dca:	f005 fb3f 	bl	f44c <k_is_in_isr>
    9dce:	4605      	mov	r5, r0
    9dd0:	b9e8      	cbnz	r0, 9e0e <z_nrf_clock_control_lf_on+0x82>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    9dd2:	4b2a      	ldr	r3, [pc, #168]	; (9e7c <z_nrf_clock_control_lf_on+0xf0>)
    9dd4:	781b      	ldrb	r3, [r3, #0]
    9dd6:	b1d3      	cbz	r3, 9e0e <z_nrf_clock_control_lf_on+0x82>
    p_reg->INTENCLR = mask;
    9dd8:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    9dda:	4606      	mov	r6, r0
    9ddc:	4b26      	ldr	r3, [pc, #152]	; (9e78 <z_nrf_clock_control_lf_on+0xec>)
    9dde:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9de2:	4c25      	ldr	r4, [pc, #148]	; (9e78 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9de4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 9e80 <z_nrf_clock_control_lf_on+0xf4>
    9de8:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9dec:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    9df0:	03d2      	lsls	r2, r2, #15
    9df2:	d516      	bpl.n	9e22 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    9df4:	f003 0303 	and.w	r3, r3, #3
    9df8:	2b02      	cmp	r3, #2
    9dfa:	d001      	beq.n	9e00 <z_nrf_clock_control_lf_on+0x74>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    9dfc:	2f01      	cmp	r7, #1
    9dfe:	d110      	bne.n	9e22 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    9e00:	b375      	cbz	r5, 9e60 <z_nrf_clock_control_lf_on+0xd4>
    9e02:	f386 8811 	msr	BASEPRI, r6
    9e06:	f3bf 8f6f 	isb	sy
}
    9e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    9e0e:	f04f 0320 	mov.w	r3, #32
    9e12:	f3ef 8611 	mrs	r6, BASEPRI
    9e16:	f383 8812 	msr	BASEPRI_MAX, r3
    9e1a:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9e1e:	2501      	movs	r5, #1
    9e20:	e7df      	b.n	9de2 <z_nrf_clock_control_lf_on+0x56>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    9e22:	b1c5      	cbz	r5, 9e56 <z_nrf_clock_control_lf_on+0xca>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    9e24:	4630      	mov	r0, r6
    9e26:	f7ff fa23 	bl	9270 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    9e2a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    9e2e:	b2db      	uxtb	r3, r3
    9e30:	2b01      	cmp	r3, #1
    9e32:	d1d9      	bne.n	9de8 <z_nrf_clock_control_lf_on+0x5c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9e34:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    9e38:	2a00      	cmp	r2, #0
    9e3a:	d0d5      	beq.n	9de8 <z_nrf_clock_control_lf_on+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e3c:	2200      	movs	r2, #0
    9e3e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    9e42:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    9e46:	2202      	movs	r2, #2
    9e48:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    9e4c:	2220      	movs	r2, #32
    9e4e:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e52:	60a3      	str	r3, [r4, #8]
}
    9e54:	e7c8      	b.n	9de8 <z_nrf_clock_control_lf_on+0x5c>
	return z_impl_k_sleep(timeout);
    9e56:	2100      	movs	r1, #0
    9e58:	2021      	movs	r0, #33	; 0x21
    9e5a:	f003 fb73 	bl	d544 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    9e5e:	e7e4      	b.n	9e2a <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    9e60:	2202      	movs	r2, #2
    9e62:	4b05      	ldr	r3, [pc, #20]	; (9e78 <z_nrf_clock_control_lf_on+0xec>)
    9e64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9e68:	e7cf      	b.n	9e0a <z_nrf_clock_control_lf_on+0x7e>
    9e6a:	bf00      	nop
    9e6c:	2000c9bc 	.word	0x2000c9bc
    9e70:	2000c9ac 	.word	0x2000c9ac
    9e74:	2000c9dc 	.word	0x2000c9dc
    9e78:	40005000 	.word	0x40005000
    9e7c:	2000cf31 	.word	0x2000cf31
    9e80:	e000e100 	.word	0xe000e100

00009e84 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    9e84:	b508      	push	{r3, lr}
    9e86:	4807      	ldr	r0, [pc, #28]	; (9ea4 <uart_console_init+0x20>)
    9e88:	f005 fa3a 	bl	f300 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    9e8c:	b138      	cbz	r0, 9e9e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    9e8e:	4806      	ldr	r0, [pc, #24]	; (9ea8 <uart_console_init+0x24>)
    9e90:	f7ff fe6e 	bl	9b70 <__stdout_hook_install>
	__printk_hook_install(console_out);
    9e94:	4804      	ldr	r0, [pc, #16]	; (9ea8 <uart_console_init+0x24>)
    9e96:	f7fe fb5b 	bl	8550 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    9e9a:	2000      	movs	r0, #0
}
    9e9c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    9e9e:	f06f 0012 	mvn.w	r0, #18
    9ea2:	e7fb      	b.n	9e9c <uart_console_init+0x18>
    9ea4:	0000fb40 	.word	0x0000fb40
    9ea8:	00009ead 	.word	0x00009ead

00009eac <console_out>:
	if ('\n' == c) {
    9eac:	280a      	cmp	r0, #10
{
    9eae:	b538      	push	{r3, r4, r5, lr}
    9eb0:	4604      	mov	r4, r0
    9eb2:	4d07      	ldr	r5, [pc, #28]	; (9ed0 <console_out+0x24>)
	if ('\n' == c) {
    9eb4:	d104      	bne.n	9ec0 <console_out+0x14>
	api->poll_out(dev, out_char);
    9eb6:	68ab      	ldr	r3, [r5, #8]
    9eb8:	210d      	movs	r1, #13
    9eba:	4628      	mov	r0, r5
    9ebc:	69db      	ldr	r3, [r3, #28]
    9ebe:	4798      	blx	r3
    9ec0:	68ab      	ldr	r3, [r5, #8]
    9ec2:	4803      	ldr	r0, [pc, #12]	; (9ed0 <console_out+0x24>)
    9ec4:	69db      	ldr	r3, [r3, #28]
    9ec6:	b2e1      	uxtb	r1, r4
    9ec8:	4798      	blx	r3
}
    9eca:	4620      	mov	r0, r4
    9ecc:	bd38      	pop	{r3, r4, r5, pc}
    9ece:	bf00      	nop
    9ed0:	0000fb40 	.word	0x0000fb40

00009ed4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    9ed4:	b530      	push	{r4, r5, lr}
	return port->config;
    9ed6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    9ed8:	f001 041f 	and.w	r4, r1, #31
    9edc:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    9ede:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    9ee2:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    9ee4:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    9ee8:	d105      	bne.n	9ef6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    9eea:	4620      	mov	r0, r4
    9eec:	f001 fcd2 	bl	b894 <nrfx_gpiote_trigger_disable>

		return 0;
    9ef0:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    9ef2:	b005      	add	sp, #20
    9ef4:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    9ef6:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    9ef8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    9efc:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    9f00:	d114      	bne.n	9f2c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    9f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    9f06:	bf0c      	ite	eq
    9f08:	2304      	moveq	r3, #4
    9f0a:	2305      	movne	r3, #5
    9f0c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    9f10:	2300      	movs	r3, #0
    9f12:	4620      	mov	r0, r4
    9f14:	4619      	mov	r1, r3
    9f16:	aa02      	add	r2, sp, #8
    9f18:	f001 faf2 	bl	b500 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    9f1c:	4b1c      	ldr	r3, [pc, #112]	; (9f90 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    9f1e:	4298      	cmp	r0, r3
    9f20:	d133      	bne.n	9f8a <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    9f22:	2101      	movs	r1, #1
    9f24:	4620      	mov	r0, r4
    9f26:	f001 fc71 	bl	b80c <nrfx_gpiote_trigger_enable>
	return 0;
    9f2a:	e7e1      	b.n	9ef0 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    9f2c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    9f30:	d020      	beq.n	9f74 <gpio_nrfx_pin_interrupt_configure+0xa0>
    9f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    9f36:	bf14      	ite	ne
    9f38:	2301      	movne	r3, #1
    9f3a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    9f3c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    9f40:	6883      	ldr	r3, [r0, #8]
    9f42:	40cb      	lsrs	r3, r1
    9f44:	07d9      	lsls	r1, r3, #31
    9f46:	d4e3      	bmi.n	9f10 <gpio_nrfx_pin_interrupt_configure+0x3c>
    9f48:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    9f4c:	d1e0      	bne.n	9f10 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    9f4e:	4a11      	ldr	r2, [pc, #68]	; (9f94 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    9f50:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    9f54:	3380      	adds	r3, #128	; 0x80
    9f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    9f5a:	07db      	lsls	r3, r3, #31
    9f5c:	d4d8      	bmi.n	9f10 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    9f5e:	f10d 0507 	add.w	r5, sp, #7
    9f62:	4629      	mov	r1, r5
    9f64:	4620      	mov	r0, r4
    9f66:	f001 fbfd 	bl	b764 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    9f6a:	4b0b      	ldr	r3, [pc, #44]	; (9f98 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    9f6c:	4298      	cmp	r0, r3
    9f6e:	d003      	beq.n	9f78 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    9f70:	9503      	str	r5, [sp, #12]
    9f72:	e7cd      	b.n	9f10 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    9f74:	2303      	movs	r3, #3
    9f76:	e7e1      	b.n	9f3c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    9f78:	4628      	mov	r0, r5
    9f7a:	f001 fc41 	bl	b800 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    9f7e:	4b04      	ldr	r3, [pc, #16]	; (9f90 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    9f80:	4298      	cmp	r0, r3
    9f82:	d0f5      	beq.n	9f70 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    9f84:	f06f 000b 	mvn.w	r0, #11
    9f88:	e7b3      	b.n	9ef2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    9f8a:	f06f 0015 	mvn.w	r0, #21
    9f8e:	e7b0      	b.n	9ef2 <gpio_nrfx_pin_interrupt_configure+0x1e>
    9f90:	0bad0000 	.word	0x0bad0000
    9f94:	40842500 	.word	0x40842500
    9f98:	0bad0004 	.word	0x0bad0004

00009f9c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    9f9c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    9f9e:	f001 fc1f 	bl	b7e0 <nrfx_gpiote_is_init>
    9fa2:	4604      	mov	r4, r0
    9fa4:	b968      	cbnz	r0, 9fc2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    9fa6:	f001 fbf3 	bl	b790 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    9faa:	4b08      	ldr	r3, [pc, #32]	; (9fcc <gpio_nrfx_init+0x30>)
    9fac:	4298      	cmp	r0, r3
    9fae:	d10a      	bne.n	9fc6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    9fb0:	4621      	mov	r1, r4
    9fb2:	4807      	ldr	r0, [pc, #28]	; (9fd0 <gpio_nrfx_init+0x34>)
    9fb4:	f001 fbd0 	bl	b758 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    9fb8:	4622      	mov	r2, r4
    9fba:	2105      	movs	r1, #5
    9fbc:	2031      	movs	r0, #49	; 0x31
    9fbe:	f7ff f97f 	bl	92c0 <z_arm_irq_priority_set>
		return 0;
    9fc2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    9fc4:	bd10      	pop	{r4, pc}
		return -EIO;
    9fc6:	f06f 0004 	mvn.w	r0, #4
    9fca:	e7fb      	b.n	9fc4 <gpio_nrfx_init+0x28>
    9fcc:	0bad0000 	.word	0x0bad0000
    9fd0:	00009fd5 	.word	0x00009fd5

00009fd4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    9fd4:	0943      	lsrs	r3, r0, #5
{
    9fd6:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    9fd8:	d107      	bne.n	9fea <nrfx_gpio_handler+0x16>
	return list->head;
    9fda:	4b0b      	ldr	r3, [pc, #44]	; (a008 <nrfx_gpio_handler+0x34>)
    9fdc:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    9fde:	b121      	cbz	r1, 9fea <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    9fe0:	2501      	movs	r5, #1
	return node->next;
    9fe2:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    9fe4:	4e09      	ldr	r6, [pc, #36]	; (a00c <nrfx_gpio_handler+0x38>)
    9fe6:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    9fe8:	b901      	cbnz	r1, 9fec <nrfx_gpio_handler+0x18>
}
    9fea:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    9fec:	688a      	ldr	r2, [r1, #8]
    9fee:	402a      	ands	r2, r5
    9ff0:	d002      	beq.n	9ff8 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    9ff2:	4630      	mov	r0, r6
    9ff4:	684b      	ldr	r3, [r1, #4]
    9ff6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    9ff8:	b11c      	cbz	r4, a002 <nrfx_gpio_handler+0x2e>
    9ffa:	6823      	ldr	r3, [r4, #0]
    9ffc:	4621      	mov	r1, r4
    9ffe:	461c      	mov	r4, r3
    a000:	e7f2      	b.n	9fe8 <nrfx_gpio_handler+0x14>
    a002:	4623      	mov	r3, r4
    a004:	e7fa      	b.n	9ffc <nrfx_gpio_handler+0x28>
    a006:	bf00      	nop
    a008:	2000ca14 	.word	0x2000ca14
    a00c:	0000fb10 	.word	0x0000fb10

0000a010 <gpio_nrfx_pin_configure>:
{
    a010:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    a014:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    a016:	f001 051f 	and.w	r5, r1, #31
    a01a:	7b3b      	ldrb	r3, [r7, #12]
{
    a01c:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    a01e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    a022:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    a024:	4628      	mov	r0, r5
    a026:	f10d 0103 	add.w	r1, sp, #3
    a02a:	f001 fb9b 	bl	b764 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    a02e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    a032:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    a034:	d10b      	bne.n	a04e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    a036:	4628      	mov	r0, r5
    a038:	f001 fc54 	bl	b8e4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    a03c:	4b3c      	ldr	r3, [pc, #240]	; (a130 <gpio_nrfx_pin_configure+0x120>)
    a03e:	4598      	cmp	r8, r3
    a040:	d103      	bne.n	a04a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    a042:	f89d 0003 	ldrb.w	r0, [sp, #3]
    a046:	f001 fbd5 	bl	b7f4 <nrfx_gpiote_channel_free>
		return 0;
    a04a:	2000      	movs	r0, #0
    a04c:	e00c      	b.n	a068 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    a04e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    a050:	4628      	mov	r0, r5
    a052:	4619      	mov	r1, r3
    a054:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    a056:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    a05a:	f001 fa51 	bl	b500 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    a05e:	4b34      	ldr	r3, [pc, #208]	; (a130 <gpio_nrfx_pin_configure+0x120>)
    a060:	4298      	cmp	r0, r3
    a062:	d004      	beq.n	a06e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    a064:	f06f 0015 	mvn.w	r0, #21
}
    a068:	b004      	add	sp, #16
    a06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    a06e:	4580      	cmp	r8, r0
    a070:	d103      	bne.n	a07a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    a072:	f89d 0003 	ldrb.w	r0, [sp, #3]
    a076:	f001 fbbd 	bl	b7f4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    a07a:	03a3      	lsls	r3, r4, #14
    a07c:	d549      	bpl.n	a112 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a07e:	f240 3306 	movw	r3, #774	; 0x306
    a082:	4023      	ands	r3, r4
    a084:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    a088:	d019      	beq.n	a0be <gpio_nrfx_pin_configure+0xae>
    a08a:	d80c      	bhi.n	a0a6 <gpio_nrfx_pin_configure+0x96>
    a08c:	2b06      	cmp	r3, #6
    a08e:	d017      	beq.n	a0c0 <gpio_nrfx_pin_configure+0xb0>
    a090:	d804      	bhi.n	a09c <gpio_nrfx_pin_configure+0x8c>
    a092:	b1ab      	cbz	r3, a0c0 <gpio_nrfx_pin_configure+0xb0>
    a094:	2b02      	cmp	r3, #2
    a096:	d1e5      	bne.n	a064 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    a098:	2304      	movs	r3, #4
    a09a:	e011      	b.n	a0c0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a09c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    a0a0:	d1e0      	bne.n	a064 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    a0a2:	2301      	movs	r3, #1
    a0a4:	e00c      	b.n	a0c0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a0a6:	f240 2202 	movw	r2, #514	; 0x202
    a0aa:	4293      	cmp	r3, r2
    a0ac:	d026      	beq.n	a0fc <gpio_nrfx_pin_configure+0xec>
    a0ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    a0b2:	d025      	beq.n	a100 <gpio_nrfx_pin_configure+0xf0>
    a0b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a0b8:	d1d4      	bne.n	a064 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    a0ba:	2302      	movs	r3, #2
    a0bc:	e000      	b.n	a0c0 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    a0be:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    a0c0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    a0c4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    a0c8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    a0cc:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    a0ce:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    a0d2:	bf4c      	ite	mi
    a0d4:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    a0d6:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    a0da:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    a0dc:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    a0e0:	d510      	bpl.n	a104 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    a0e2:	2301      	movs	r3, #1
    a0e4:	687a      	ldr	r2, [r7, #4]
    a0e6:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    a0e8:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    a0ea:	2200      	movs	r2, #0
    a0ec:	4628      	mov	r0, r5
    a0ee:	a901      	add	r1, sp, #4
    a0f0:	f001 fab2 	bl	b658 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    a0f4:	4b0e      	ldr	r3, [pc, #56]	; (a130 <gpio_nrfx_pin_configure+0x120>)
    a0f6:	4298      	cmp	r0, r3
    a0f8:	d0a7      	beq.n	a04a <gpio_nrfx_pin_configure+0x3a>
    a0fa:	e7b3      	b.n	a064 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    a0fc:	2305      	movs	r3, #5
    a0fe:	e7df      	b.n	a0c0 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    a100:	2303      	movs	r3, #3
    a102:	e7dd      	b.n	a0c0 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    a104:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    a106:	bf41      	itttt	mi
    a108:	2301      	movmi	r3, #1
    a10a:	687a      	ldrmi	r2, [r7, #4]
    a10c:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    a10e:	60d3      	strmi	r3, [r2, #12]
}
    a110:	e7eb      	b.n	a0ea <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    a112:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a114:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    a118:	bf4c      	ite	mi
    a11a:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    a11c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a120:	461a      	mov	r2, r3
    a122:	4628      	mov	r0, r5
    a124:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    a126:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    a12a:	f001 f9e9 	bl	b500 <nrfx_gpiote_input_configure>
    a12e:	e7e1      	b.n	a0f4 <gpio_nrfx_pin_configure+0xe4>
    a130:	0bad0000 	.word	0x0bad0000

0000a134 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    a134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a138:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    a13a:	4e3f      	ldr	r6, [pc, #252]	; (a238 <pinctrl_configure_pins+0x104>)
    a13c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    a140:	4281      	cmp	r1, r0
    a142:	d102      	bne.n	a14a <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    a144:	2000      	movs	r0, #0
}
    a146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    a14a:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    a14c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    a150:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    a154:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    a156:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    a15a:	bf08      	it	eq
    a15c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    a160:	2d19      	cmp	r5, #25
    a162:	d866      	bhi.n	a232 <pinctrl_configure_pins+0xfe>
    a164:	e8df f005 	tbb	[pc, r5]
    a168:	1e1b160d 	.word	0x1e1b160d
    a16c:	651e2d21 	.word	0x651e2d21
    a170:	31656565 	.word	0x31656565
    a174:	65656551 	.word	0x65656551
    a178:	65656565 	.word	0x65656565
    a17c:	5c546565 	.word	0x5c546565
    a180:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
    a182:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    a186:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    a18a:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    a18e:	60b5      	str	r5, [r6, #8]
}
    a190:	2501      	movs	r5, #1
    a192:	e002      	b.n	a19a <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
    a194:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    a198:	2500      	movs	r5, #0
    a19a:	46ac      	mov	ip, r5
    a19c:	e01c      	b.n	a1d8 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
    a19e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    a1a2:	e7f0      	b.n	a186 <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
    a1a4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    a1a8:	e7f6      	b.n	a198 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    a1aa:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    a1ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    a1b0:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    a1b4:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    a1b8:	f8c6 c00c 	str.w	ip, [r6, #12]
}
    a1bc:	f04f 0c01 	mov.w	ip, #1
    a1c0:	e00a      	b.n	a1d8 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    a1c2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    a1c6:	2501      	movs	r5, #1
    a1c8:	e7f2      	b.n	a1b0 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    a1ca:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    a1ce:	2c00      	cmp	r4, #0
    a1d0:	d1e2      	bne.n	a198 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    a1d2:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
    a1d4:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    a1d6:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    a1d8:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    a1dc:	0224      	lsls	r4, r4, #8
    a1de:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    a1e2:	f1b8 0f00 	cmp.w	r8, #0
    a1e6:	bf1c      	itt	ne
    a1e8:	f04f 0c00 	movne.w	ip, #0
    a1ec:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a1ee:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
    a1f2:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
    a1f6:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    a1fa:	ea44 040c 	orr.w	r4, r4, ip
    a1fe:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    a202:	3380      	adds	r3, #128	; 0x80
    a204:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    a208:	e79a      	b.n	a140 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    a20a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    a20e:	e7de      	b.n	a1ce <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    a210:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    a214:	6805      	ldr	r5, [r0, #0]
    a216:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    a21a:	2d00      	cmp	r5, #0
    a21c:	d0d3      	beq.n	a1c6 <pinctrl_configure_pins+0x92>
    a21e:	e7b2      	b.n	a186 <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    a220:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    a224:	e7f6      	b.n	a214 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    a226:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    a22a:	e7f3      	b.n	a214 <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    a22c:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    a230:	e7f0      	b.n	a214 <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
    a232:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a236:	e786      	b.n	a146 <pinctrl_configure_pins+0x12>
    a238:	40842500 	.word	0x40842500

0000a23c <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
    a23c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a23e:	461d      	mov	r5, r3
	return config->uarte_regs;
    a240:	6843      	ldr	r3, [r0, #4]
{
    a242:	4606      	mov	r6, r0
	struct uarte_nrfx_data *data = dev->data;
    a244:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
    a246:	f8d3 c000 	ldr.w	ip, [r3]
    a24a:	f04f 0320 	mov.w	r3, #32
    a24e:	f3ef 8711 	mrs	r7, BASEPRI
    a252:	f383 8812 	msr	BASEPRI_MAX, r3
    a256:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
    a25a:	68e3      	ldr	r3, [r4, #12]
    a25c:	68d8      	ldr	r0, [r3, #12]
    a25e:	b138      	cbz	r0, a270 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
    a260:	f387 8811 	msr	BASEPRI, r7
    a264:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
    a268:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
    a26c:	b003      	add	sp, #12
    a26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
    a270:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
    a272:	68e3      	ldr	r3, [r4, #12]
    a274:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    a276:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    a27a:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    a27e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    a282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    a286:	68e3      	ldr	r3, [r4, #12]
    a288:	d111      	bne.n	a2ae <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
    a28a:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
    a28c:	68e3      	ldr	r3, [r4, #12]
    a28e:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
    a290:	4621      	mov	r1, r4
    a292:	4630      	mov	r0, r6
    a294:	f004 fd2f 	bl	ecf6 <start_tx_locked>
    a298:	f387 8811 	msr	BASEPRI, r7
    a29c:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    a2a0:	7ae3      	ldrb	r3, [r4, #11]
    a2a2:	2b01      	cmp	r3, #1
    a2a4:	d101      	bne.n	a2aa <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
    a2a6:	1c6b      	adds	r3, r5, #1
    a2a8:	d106      	bne.n	a2b8 <uarte_nrfx_tx+0x7c>
	return 0;
    a2aa:	2000      	movs	r0, #0
    a2ac:	e7de      	b.n	a26c <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
    a2ae:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
    a2b0:	4620      	mov	r0, r4
    a2b2:	f004 fc99 	bl	ebe8 <setup_tx_cache>
    a2b6:	e7eb      	b.n	a290 <uarte_nrfx_tx+0x54>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    a2b8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    a2bc:	2100      	movs	r1, #0
    a2be:	480a      	ldr	r0, [pc, #40]	; (a2e8 <uarte_nrfx_tx+0xac>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    a2c0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    a2c4:	2300      	movs	r3, #0
    a2c6:	fbc5 0106 	smlal	r0, r1, r5, r6
    a2ca:	4a08      	ldr	r2, [pc, #32]	; (a2ec <uarte_nrfx_tx+0xb0>)
    a2cc:	f7fd ff3a 	bl	8144 <__aeabi_uldivmod>
    a2d0:	68e4      	ldr	r4, [r4, #12]
    a2d2:	4602      	mov	r2, r0
    a2d4:	460b      	mov	r3, r1
    a2d6:	3420      	adds	r4, #32
	z_impl_k_timer_start(timer, duration, period);
    a2d8:	2000      	movs	r0, #0
    a2da:	2100      	movs	r1, #0
    a2dc:	e9cd 0100 	strd	r0, r1, [sp]
    a2e0:	4620      	mov	r0, r4
    a2e2:	f003 fb7b 	bl	d9dc <z_impl_k_timer_start>
    a2e6:	e7e0      	b.n	a2aa <uarte_nrfx_tx+0x6e>
    a2e8:	000f423f 	.word	0x000f423f
    a2ec:	000f4240 	.word	0x000f4240

0000a2f0 <uarte_nrfx_configure>:
{
    a2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    a2f2:	794b      	ldrb	r3, [r1, #5]
    a2f4:	2b01      	cmp	r3, #1
    a2f6:	d026      	beq.n	a346 <uarte_nrfx_configure+0x56>
    a2f8:	2b03      	cmp	r3, #3
    a2fa:	d121      	bne.n	a340 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    a2fc:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    a2fe:	798b      	ldrb	r3, [r1, #6]
    a300:	2b03      	cmp	r3, #3
    a302:	d11d      	bne.n	a340 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    a304:	79ce      	ldrb	r6, [r1, #7]
    a306:	b10e      	cbz	r6, a30c <uarte_nrfx_configure+0x1c>
    a308:	2e01      	cmp	r6, #1
    a30a:	d119      	bne.n	a340 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    a30c:	790a      	ldrb	r2, [r1, #4]
    a30e:	b112      	cbz	r2, a316 <uarte_nrfx_configure+0x26>
    a310:	2a02      	cmp	r2, #2
    a312:	d115      	bne.n	a340 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    a314:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    a316:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    a318:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    a31a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    a31e:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    a320:	d067      	beq.n	a3f2 <uarte_nrfx_configure+0x102>
    a322:	d82d      	bhi.n	a380 <uarte_nrfx_configure+0x90>
    a324:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    a328:	d066      	beq.n	a3f8 <uarte_nrfx_configure+0x108>
    a32a:	d816      	bhi.n	a35a <uarte_nrfx_configure+0x6a>
    a32c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    a330:	d064      	beq.n	a3fc <uarte_nrfx_configure+0x10c>
    a332:	d80a      	bhi.n	a34a <uarte_nrfx_configure+0x5a>
    a334:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    a338:	d063      	beq.n	a402 <uarte_nrfx_configure+0x112>
    a33a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    a33e:	d063      	beq.n	a408 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    a340:	f06f 0085 	mvn.w	r0, #133	; 0x85
    a344:	e054      	b.n	a3f0 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    a346:	2500      	movs	r5, #0
    a348:	e7d9      	b.n	a2fe <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    a34a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    a34e:	d05e      	beq.n	a40e <uarte_nrfx_configure+0x11e>
    a350:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    a354:	d1f4      	bne.n	a340 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    a356:	4b38      	ldr	r3, [pc, #224]	; (a438 <uarte_nrfx_configure+0x148>)
    a358:	e03c      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a35a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    a35e:	d059      	beq.n	a414 <uarte_nrfx_configure+0x124>
    a360:	d807      	bhi.n	a372 <uarte_nrfx_configure+0x82>
    a362:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    a366:	d057      	beq.n	a418 <uarte_nrfx_configure+0x128>
    a368:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    a36c:	d1e8      	bne.n	a340 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    a36e:	4b33      	ldr	r3, [pc, #204]	; (a43c <uarte_nrfx_configure+0x14c>)
    a370:	e030      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a372:	f647 2412 	movw	r4, #31250	; 0x7a12
    a376:	42a3      	cmp	r3, r4
    a378:	d1e2      	bne.n	a340 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    a37a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    a37e:	e029      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a380:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    a384:	d04a      	beq.n	a41c <uarte_nrfx_configure+0x12c>
    a386:	d813      	bhi.n	a3b0 <uarte_nrfx_configure+0xc0>
    a388:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    a38c:	d049      	beq.n	a422 <uarte_nrfx_configure+0x132>
    a38e:	d809      	bhi.n	a3a4 <uarte_nrfx_configure+0xb4>
    a390:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    a394:	42a3      	cmp	r3, r4
    a396:	d046      	beq.n	a426 <uarte_nrfx_configure+0x136>
    a398:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    a39c:	d1d0      	bne.n	a340 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    a39e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    a3a2:	e017      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a3a4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    a3a8:	d1ca      	bne.n	a340 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    a3aa:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    a3ae:	e011      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a3b0:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    a3b4:	d03a      	beq.n	a42c <uarte_nrfx_configure+0x13c>
    a3b6:	d808      	bhi.n	a3ca <uarte_nrfx_configure+0xda>
    a3b8:	4c21      	ldr	r4, [pc, #132]	; (a440 <uarte_nrfx_configure+0x150>)
    a3ba:	42a3      	cmp	r3, r4
    a3bc:	d039      	beq.n	a432 <uarte_nrfx_configure+0x142>
    a3be:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    a3c2:	d1bd      	bne.n	a340 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    a3c4:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    a3c8:	e004      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a3ca:	4c1e      	ldr	r4, [pc, #120]	; (a444 <uarte_nrfx_configure+0x154>)
    a3cc:	42a3      	cmp	r3, r4
    a3ce:	d1b7      	bne.n	a340 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    a3d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    a3d4:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    a3d6:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    a3da:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    a3dc:	4335      	orrs	r5, r6
    a3de:	681b      	ldr	r3, [r3, #0]
    a3e0:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    a3e2:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
    a3e6:	1d23      	adds	r3, r4, #4
    a3e8:	c903      	ldmia	r1, {r0, r1}
    a3ea:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    a3ee:	2000      	movs	r0, #0
}
    a3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    a3f2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    a3f6:	e7ed      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    a3f8:	4b13      	ldr	r3, [pc, #76]	; (a448 <uarte_nrfx_configure+0x158>)
    a3fa:	e7eb      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    a3fc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    a400:	e7e8      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    a402:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    a406:	e7e5      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    a408:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    a40c:	e7e2      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    a40e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    a412:	e7df      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    a414:	4b0d      	ldr	r3, [pc, #52]	; (a44c <uarte_nrfx_configure+0x15c>)
    a416:	e7dd      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    a418:	4b0d      	ldr	r3, [pc, #52]	; (a450 <uarte_nrfx_configure+0x160>)
    a41a:	e7db      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    a41c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    a420:	e7d8      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    a422:	4b0c      	ldr	r3, [pc, #48]	; (a454 <uarte_nrfx_configure+0x164>)
    a424:	e7d6      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    a426:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    a42a:	e7d3      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    a42c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    a430:	e7d0      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    a432:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    a436:	e7cd      	b.n	a3d4 <uarte_nrfx_configure+0xe4>
    a438:	0013b000 	.word	0x0013b000
    a43c:	004ea000 	.word	0x004ea000
    a440:	0003d090 	.word	0x0003d090
    a444:	000f4240 	.word	0x000f4240
    a448:	00275000 	.word	0x00275000
    a44c:	0075c000 	.word	0x0075c000
    a450:	003af000 	.word	0x003af000
    a454:	013a9000 	.word	0x013a9000

0000a458 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    a458:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    a45c:	4607      	mov	r7, r0
    a45e:	2200      	movs	r2, #0
    a460:	2101      	movs	r1, #1
    a462:	2008      	movs	r0, #8
    a464:	f7fe ff2c 	bl	92c0 <z_arm_irq_priority_set>
    a468:	2008      	movs	r0, #8
    a46a:	f7fe ff0d 	bl	9288 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a46e:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    a470:	f8d7 9004 	ldr.w	r9, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    a474:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    a476:	f8d9 4000 	ldr.w	r4, [r9]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    a47a:	aa01      	add	r2, sp, #4
    a47c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    a480:	6037      	str	r7, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    a482:	f8d9 800c 	ldr.w	r8, [r9, #12]
    a486:	4640      	mov	r0, r8
    a488:	f004 faa9 	bl	e9de <pinctrl_lookup_state>
	if (ret < 0) {
    a48c:	1e05      	subs	r5, r0, #0
    a48e:	f2c0 8084 	blt.w	a59a <uarte_0_init+0x142>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    a492:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    a494:	f8d8 2000 	ldr.w	r2, [r8]
    a498:	7919      	ldrb	r1, [r3, #4]
    a49a:	6818      	ldr	r0, [r3, #0]
    a49c:	f7ff fe4a 	bl	a134 <pinctrl_configure_pins>
	if (err < 0) {
    a4a0:	1e05      	subs	r5, r0, #0
    a4a2:	db7a      	blt.n	a59a <uarte_0_init+0x142>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    a4a4:	4638      	mov	r0, r7
    a4a6:	1d31      	adds	r1, r6, #4
    a4a8:	f7ff ff22 	bl	a2f0 <uarte_nrfx_configure>
	if (err) {
    a4ac:	4605      	mov	r5, r0
    a4ae:	2800      	cmp	r0, #0
    a4b0:	d173      	bne.n	a59a <uarte_0_init+0x142>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    a4b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    a4b6:	0799      	lsls	r1, r3, #30
    a4b8:	d513      	bpl.n	a4e2 <uarte_0_init+0x8a>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    a4ba:	f106 001c 	add.w	r0, r6, #28
    a4be:	f000 ff99 	bl	b3f4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    a4c2:	4b43      	ldr	r3, [pc, #268]	; (a5d0 <uarte_0_init+0x178>)
    a4c4:	4298      	cmp	r0, r3
    a4c6:	d17f      	bne.n	a5c8 <uarte_0_init+0x170>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a4c8:	7f33      	ldrb	r3, [r6, #28]
    a4ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a4ce:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    a4d2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    a4d6:	2301      	movs	r3, #1
    a4d8:	7f32      	ldrb	r2, [r6, #28]
    a4da:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    a4dc:	4a3d      	ldr	r2, [pc, #244]	; (a5d4 <uarte_0_init+0x17c>)
    a4de:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
    a4e2:	68f3      	ldr	r3, [r6, #12]
    a4e4:	2b00      	cmp	r3, #0
    a4e6:	d05c      	beq.n	a5a2 <uarte_0_init+0x14a>
    p_reg->INTENSET = mask;
    a4e8:	2204      	movs	r2, #4
	return config->uarte_regs;
    a4ea:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    a4ec:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
    a4f0:	681b      	ldr	r3, [r3, #0]
    a4f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    a4f6:	2201      	movs	r2, #1
    a4f8:	f8d8 100c 	ldr.w	r1, [r8, #12]
    a4fc:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
    a500:	4935      	ldr	r1, [pc, #212]	; (a5d8 <uarte_0_init+0x180>)
    a502:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a506:	2108      	movs	r1, #8
    a508:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a50c:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    a510:	b1a1      	cbz	r1, a53c <uarte_0_init+0xe4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a512:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a514:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    a518:	b91a      	cbnz	r2, a522 <uarte_0_init+0xca>
    a51a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    a51e:	2a00      	cmp	r2, #0
    a520:	d0f8      	beq.n	a514 <uarte_0_init+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a522:	2200      	movs	r2, #0
    a524:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    a528:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    a52c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    a530:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    a534:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    a538:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    a53c:	f8d8 000c 	ldr.w	r0, [r8, #12]
    a540:	2200      	movs	r2, #0
    a542:	4926      	ldr	r1, [pc, #152]	; (a5dc <uarte_0_init+0x184>)
    a544:	3080      	adds	r0, #128	; 0x80
    a546:	f005 f8e7 	bl	f718 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    a54a:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
    a54e:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    a552:	f8d8 000c 	ldr.w	r0, [r8, #12]
    a556:	2200      	movs	r2, #0
    a558:	4921      	ldr	r1, [pc, #132]	; (a5e0 <uarte_0_init+0x188>)
    a55a:	3020      	adds	r0, #32
    a55c:	f005 f8dc 	bl	f718 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    a560:	f8d8 300c 	ldr.w	r3, [r8, #12]
    a564:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    a568:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a56c:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    a56e:	bf5c      	itt	pl
    a570:	f44f 7380 	movpl.w	r3, #256	; 0x100
    a574:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a578:	f8d9 3004 	ldr.w	r3, [r9, #4]
    a57c:	06db      	lsls	r3, r3, #27
    a57e:	bf44      	itt	mi
    a580:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    a584:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a588:	6973      	ldr	r3, [r6, #20]
    a58a:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a58e:	2300      	movs	r3, #0
    a590:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a594:	2301      	movs	r3, #1
    a596:	60a3      	str	r3, [r4, #8]
    a598:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    a59a:	4628      	mov	r0, r5
    a59c:	b003      	add	sp, #12
    a59e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a5a2:	2308      	movs	r3, #8
    a5a4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    a5a8:	f899 3008 	ldrb.w	r3, [r9, #8]
    a5ac:	2b00      	cmp	r3, #0
    a5ae:	d1db      	bne.n	a568 <uarte_0_init+0x110>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a5b0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    a5b4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a5b8:	69b3      	ldr	r3, [r6, #24]
    a5ba:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a5be:	2301      	movs	r3, #1
    a5c0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a5c4:	6023      	str	r3, [r4, #0]
}
    a5c6:	e7cf      	b.n	a568 <uarte_0_init+0x110>
		return -EIO;
    a5c8:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    a5cc:	e7e5      	b.n	a59a <uarte_0_init+0x142>
    a5ce:	bf00      	nop
    a5d0:	0bad0000 	.word	0x0bad0000
    a5d4:	40017000 	.word	0x40017000
    a5d8:	000a0210 	.word	0x000a0210
    a5dc:	0000ee49 	.word	0x0000ee49
    a5e0:	0000ef19 	.word	0x0000ef19

0000a5e4 <uarte_nrfx_poll_out>:
{
    a5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a5e8:	4604      	mov	r4, r0
    a5ea:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    a5ec:	6905      	ldr	r5, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    a5ee:	f004 ff2d 	bl	f44c <k_is_in_isr>
    a5f2:	b9b0      	cbnz	r0, a622 <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
    a5f4:	4b2a      	ldr	r3, [pc, #168]	; (a6a0 <uarte_nrfx_poll_out+0xbc>)
    a5f6:	781b      	ldrb	r3, [r3, #0]
    a5f8:	b19b      	cbz	r3, a622 <uarte_nrfx_poll_out+0x3e>
{
    a5fa:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    a5fc:	6860      	ldr	r0, [r4, #4]
    a5fe:	f004 fb6a 	bl	ecd6 <is_tx_ready.isra.0>
    a602:	2800      	cmp	r0, #0
    a604:	d138      	bne.n	a678 <uarte_nrfx_poll_out+0x94>
    a606:	2001      	movs	r0, #1
    a608:	f004 fccd 	bl	efa6 <nrfx_busy_wait>
    a60c:	3f01      	subs	r7, #1
    a60e:	d1f5      	bne.n	a5fc <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
    a610:	2100      	movs	r1, #0
    a612:	2021      	movs	r0, #33	; 0x21
    a614:	f002 ff96 	bl	d544 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    a618:	e7ef      	b.n	a5fa <uarte_nrfx_poll_out+0x16>
    a61a:	f381 8811 	msr	BASEPRI, r1
    a61e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    a622:	f04f 0320 	mov.w	r3, #32
    a626:	f3ef 8111 	mrs	r1, BASEPRI
    a62a:	f383 8812 	msr	BASEPRI_MAX, r3
    a62e:	f3bf 8f6f 	isb	sy
    a632:	f8d4 8004 	ldr.w	r8, [r4, #4]
    a636:	460f      	mov	r7, r1
			if (is_tx_ready(dev)) {
    a638:	4640      	mov	r0, r8
    a63a:	f004 fb4c 	bl	ecd6 <is_tx_ready.isra.0>
    a63e:	2800      	cmp	r0, #0
    a640:	d0eb      	beq.n	a61a <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
    a642:	68eb      	ldr	r3, [r5, #12]
    a644:	b15b      	cbz	r3, a65e <uarte_nrfx_poll_out+0x7a>
    a646:	68da      	ldr	r2, [r3, #12]
    a648:	b14a      	cbz	r2, a65e <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
    a64a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
    a64e:	2a00      	cmp	r2, #0
    a650:	da05      	bge.n	a65e <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
    a652:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
    a656:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    a65a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
    a65e:	696b      	ldr	r3, [r5, #20]
	tx_start(dev, data->char_out, 1);
    a660:	2201      	movs	r2, #1
	*data->char_out = c;
    a662:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    a664:	4620      	mov	r0, r4
    a666:	6969      	ldr	r1, [r5, #20]
    a668:	f004 f9db 	bl	ea22 <tx_start>
	__asm__ volatile(
    a66c:	f387 8811 	msr	BASEPRI, r7
    a670:	f3bf 8f6f 	isb	sy
}
    a674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    a678:	f04f 0320 	mov.w	r3, #32
    a67c:	f3ef 8111 	mrs	r1, BASEPRI
    a680:	f383 8812 	msr	BASEPRI_MAX, r3
    a684:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    a688:	6860      	ldr	r0, [r4, #4]
    a68a:	460f      	mov	r7, r1
    a68c:	f004 fb23 	bl	ecd6 <is_tx_ready.isra.0>
    a690:	2800      	cmp	r0, #0
    a692:	d1e4      	bne.n	a65e <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
    a694:	f381 8811 	msr	BASEPRI, r1
    a698:	f3bf 8f6f 	isb	sy
}
    a69c:	e7b8      	b.n	a610 <uarte_nrfx_poll_out+0x2c>
    a69e:	bf00      	nop
    a6a0:	2000cf31 	.word	0x2000cf31

0000a6a4 <uarte_nrfx_isr_async>:
{
    a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    a6a8:	6843      	ldr	r3, [r0, #4]
{
    a6aa:	4604      	mov	r4, r0
	return config->uarte_regs;
    a6ac:	681d      	ldr	r5, [r3, #0]
{
    a6ae:	b088      	sub	sp, #32
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a6b0:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
	struct uarte_nrfx_data *data = dev->data;
    a6b4:	6903      	ldr	r3, [r0, #16]
	if (!HW_RX_COUNTING_ENABLED(data)
    a6b6:	b169      	cbz	r1, a6d4 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a6b8:	2200      	movs	r2, #0
    a6ba:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    a6be:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    a6c2:	68da      	ldr	r2, [r3, #12]
    a6c4:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
    a6c8:	3301      	adds	r3, #1
    a6ca:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
    a6ce:	b008      	add	sp, #32
    a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a6d4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    a6d8:	b323      	cbz	r3, a724 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a6da:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    a6de:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
    a6e2:	6843      	ldr	r3, [r0, #4]
	struct uart_event evt = {
    a6e4:	2214      	movs	r2, #20
	return config->uarte_regs;
    a6e6:	681b      	ldr	r3, [r3, #0]
	struct uart_event evt = {
    a6e8:	a803      	add	r0, sp, #12
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    a6ea:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    a6ee:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
    a6f2:	f005 f847 	bl	f784 <memset>
    a6f6:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    a6f8:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
    a6fa:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    a6fe:	f100 810c 	bmi.w	a91a <uarte_nrfx_isr_async+0x276>
    a702:	07b3      	lsls	r3, r6, #30
    a704:	f100 810b 	bmi.w	a91e <uarte_nrfx_isr_async+0x27a>
    a708:	0777      	lsls	r7, r6, #29
    a70a:	f100 810a 	bmi.w	a922 <uarte_nrfx_isr_async+0x27e>
    a70e:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    a712:	4620      	mov	r0, r4
    a714:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    a716:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    a71a:	f004 f9aa 	bl	ea72 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    a71e:	4620      	mov	r0, r4
    a720:	f004 fa3d 	bl	eb9e <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a724:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    a728:	2b00      	cmp	r3, #0
    a72a:	d033      	beq.n	a794 <uarte_nrfx_isr_async+0xf0>
    return p_reg->INTENSET & mask;
    a72c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    a730:	06d8      	lsls	r0, r3, #27
    a732:	d52f      	bpl.n	a794 <uarte_nrfx_isr_async+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a734:	f04f 0800 	mov.w	r8, #0
	data->async->is_in_irq = true;
    a738:	2201      	movs	r2, #1
    a73a:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
    a73e:	6926      	ldr	r6, [r4, #16]
    a740:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    a744:	6863      	ldr	r3, [r4, #4]
    a746:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
    a748:	68f3      	ldr	r3, [r6, #12]
    a74a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	k_timer_stop(&data->async->rx_timeout_timer);
    a74e:	68f0      	ldr	r0, [r6, #12]
    a750:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
    a752:	f004 ffed 	bl	f730 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    a756:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    a758:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
    a75c:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
    a760:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
    a764:	68f2      	ldr	r2, [r6, #12]
    a766:	6e10      	ldr	r0, [r2, #96]	; 0x60
    a768:	1a1b      	subs	r3, r3, r0
    a76a:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    a76c:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
    a76e:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
    a772:	4408      	add	r0, r1
	if (rx_len > 0) {
    a774:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    a776:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
    a778:	dd02      	ble.n	a780 <uarte_nrfx_isr_async+0xdc>
		notify_uart_rx_rdy(dev, rx_len);
    a77a:	4620      	mov	r0, r4
    a77c:	f004 f980 	bl	ea80 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    a780:	68f1      	ldr	r1, [r6, #12]
    a782:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
    a786:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    a78a:	2b00      	cmp	r3, #0
    a78c:	f040 80cb 	bne.w	a926 <uarte_nrfx_isr_async+0x282>
		data->async->is_in_irq = false;
    a790:	f881 20ce 	strb.w	r2, [r1, #206]	; 0xce
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a794:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    a798:	b383      	cbz	r3, a7fc <uarte_nrfx_isr_async+0x158>
    a79a:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    a79e:	bb6e      	cbnz	r6, a7fc <uarte_nrfx_isr_async+0x158>
	struct uart_event evt = {
    a7a0:	2214      	movs	r2, #20
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a7a2:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
    a7a6:	4631      	mov	r1, r6
    a7a8:	a803      	add	r0, sp, #12
    a7aa:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uarte_nrfx_data *data = dev->data;
    a7ae:	6927      	ldr	r7, [r4, #16]
	struct uart_event evt = {
    a7b0:	f004 ffe8 	bl	f784 <memset>
    a7b4:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    a7b6:	a903      	add	r1, sp, #12
    a7b8:	4620      	mov	r0, r4
	struct uart_event evt = {
    a7ba:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    a7be:	f004 f958 	bl	ea72 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    a7c2:	68fb      	ldr	r3, [r7, #12]
    a7c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    a7c6:	1c51      	adds	r1, r2, #1
    a7c8:	d018      	beq.n	a7fc <uarte_nrfx_isr_async+0x158>
		data->async->rx_timeout_left = data->async->rx_timeout;
    a7ca:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
    a7cc:	68ff      	ldr	r7, [r7, #12]
    a7ce:	498f      	ldr	r1, [pc, #572]	; (aa0c <uarte_nrfx_isr_async+0x368>)
			      K_USEC(data->async->rx_timeout_slab),
    a7d0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    a7d2:	468e      	mov	lr, r1
    a7d4:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
    a7d8:	4631      	mov	r1, r6
    a7da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    a7de:	fbcc e100 	smlal	lr, r1, ip, r0
    a7e2:	2300      	movs	r3, #0
    a7e4:	4670      	mov	r0, lr
    a7e6:	4a8a      	ldr	r2, [pc, #552]	; (aa10 <uarte_nrfx_isr_async+0x36c>)
    a7e8:	f7fd fcac 	bl	8144 <__aeabi_uldivmod>
    a7ec:	4602      	mov	r2, r0
    a7ee:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    a7f0:	e9cd 0100 	strd	r0, r1, [sp]
    a7f4:	f107 0080 	add.w	r0, r7, #128	; 0x80
    a7f8:	f003 f8f0 	bl	d9dc <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a7fc:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    a800:	b363      	cbz	r3, a85c <uarte_nrfx_isr_async+0x1b8>
    a802:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    a806:	bb4e      	cbnz	r6, a85c <uarte_nrfx_isr_async+0x1b8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a808:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
    a80c:	6927      	ldr	r7, [r4, #16]
	rx_buf_release(dev, &data->async->rx_buf);
    a80e:	4620      	mov	r0, r4
    a810:	68f9      	ldr	r1, [r7, #12]
    a812:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
    a816:	3158      	adds	r1, #88	; 0x58
	const struct uarte_nrfx_config *config = dev->config;
    a818:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
    a81c:	f004 f949 	bl	eab2 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    a820:	68f9      	ldr	r1, [r7, #12]
    a822:	4620      	mov	r0, r4
    a824:	3164      	adds	r1, #100	; 0x64
    a826:	f004 f944 	bl	eab2 <rx_buf_release>
	data->async->rx_enabled = false;
    a82a:	68fb      	ldr	r3, [r7, #12]
    a82c:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (data->async->discard_rx_fifo) {
    a830:	68fb      	ldr	r3, [r7, #12]
    a832:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
    a836:	b132      	cbz	r2, a846 <uarte_nrfx_isr_async+0x1a2>
		data->async->discard_rx_fifo = false;
    a838:	f883 60cb 	strb.w	r6, [r3, #203]	; 0xcb
		(void)rx_flush(dev, NULL, 0);
    a83c:	4632      	mov	r2, r6
    a83e:	4631      	mov	r1, r6
    a840:	6860      	ldr	r0, [r4, #4]
    a842:	f004 f9e9 	bl	ec18 <rx_flush.isra.0>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a846:	f8d8 3004 	ldr.w	r3, [r8, #4]
    a84a:	06d8      	lsls	r0, r3, #27
    a84c:	d503      	bpl.n	a856 <uarte_nrfx_isr_async+0x1b2>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    a84e:	2102      	movs	r1, #2
    a850:	4620      	mov	r0, r4
    a852:	f004 fa16 	bl	ec82 <async_uart_release>
	notify_rx_disable(dev);
    a856:	4620      	mov	r0, r4
    a858:	f004 f943 	bl	eae2 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a85c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    a860:	b1db      	cbz	r3, a89a <uarte_nrfx_isr_async+0x1f6>
    return p_reg->INTENSET & mask;
    a862:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    a866:	05d9      	lsls	r1, r3, #23
    a868:	d517      	bpl.n	a89a <uarte_nrfx_isr_async+0x1f6>
	return config->uarte_regs;
    a86a:	6863      	ldr	r3, [r4, #4]
    a86c:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    a86e:	f04f 0120 	mov.w	r1, #32
    a872:	f3ef 8211 	mrs	r2, BASEPRI
    a876:	f381 8812 	msr	BASEPRI_MAX, r1
    a87a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a87e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    a882:	b131      	cbz	r1, a892 <uarte_nrfx_isr_async+0x1ee>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a884:	2100      	movs	r1, #0
    a886:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    a88a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a88e:	2101      	movs	r1, #1
    a890:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    a892:	f382 8811 	msr	BASEPRI, r2
    a896:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a89a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    a89e:	2b00      	cmp	r3, #0
    a8a0:	f43f af15 	beq.w	a6ce <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
    a8a4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    a8a8:	025a      	lsls	r2, r3, #9
    a8aa:	f57f af10 	bpl.w	a6ce <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
    a8ae:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
    a8b0:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a8b2:	e9d3 7300 	ldrd	r7, r3, [r3]
    a8b6:	06db      	lsls	r3, r3, #27
    a8b8:	d466      	bmi.n	a988 <uarte_nrfx_isr_async+0x2e4>
	if (!data->async->tx_buf) {
    a8ba:	68eb      	ldr	r3, [r5, #12]
    a8bc:	689b      	ldr	r3, [r3, #8]
    a8be:	2b00      	cmp	r3, #0
    a8c0:	f43f af05 	beq.w	a6ce <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
    a8c4:	f04f 0320 	mov.w	r3, #32
    a8c8:	f3ef 8211 	mrs	r2, BASEPRI
    a8cc:	f383 8812 	msr	BASEPRI_MAX, r3
    a8d0:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    a8d4:	68eb      	ldr	r3, [r5, #12]
    a8d6:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    a8da:	2900      	cmp	r1, #0
    a8dc:	bfac      	ite	ge
    a8de:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
    a8e2:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
    a8e6:	f382 8811 	msr	BASEPRI, r2
    a8ea:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    a8ee:	68eb      	ldr	r3, [r5, #12]
    a8f0:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
    a8f4:	2a00      	cmp	r2, #0
    a8f6:	d054      	beq.n	a9a2 <uarte_nrfx_isr_async+0x2fe>
	__asm__ volatile(
    a8f8:	f04f 0320 	mov.w	r3, #32
    a8fc:	f3ef 8611 	mrs	r6, BASEPRI
    a900:	f383 8812 	msr	BASEPRI_MAX, r3
    a904:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    a908:	4629      	mov	r1, r5
    a90a:	4620      	mov	r0, r4
    a90c:	f004 f9f3 	bl	ecf6 <start_tx_locked>
	__asm__ volatile(
    a910:	f386 8811 	msr	BASEPRI, r6
    a914:	f3bf 8f6f 	isb	sy
				return;
    a918:	e6d9      	b.n	a6ce <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    a91a:	2601      	movs	r6, #1
    a91c:	e6f9      	b.n	a712 <uarte_nrfx_isr_async+0x6e>
    a91e:	2602      	movs	r6, #2
    a920:	e6f7      	b.n	a712 <uarte_nrfx_isr_async+0x6e>
    a922:	2604      	movs	r6, #4
    a924:	e6f5      	b.n	a712 <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
    a926:	4620      	mov	r0, r4
    a928:	3158      	adds	r1, #88	; 0x58
    a92a:	f004 f8c2 	bl	eab2 <rx_buf_release>
	__asm__ volatile(
    a92e:	f04f 0320 	mov.w	r3, #32
    a932:	f3ef 8111 	mrs	r1, BASEPRI
    a936:	f383 8812 	msr	BASEPRI_MAX, r3
    a93a:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    a93e:	68f3      	ldr	r3, [r6, #12]
    a940:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    a942:	b1f2      	cbz	r2, a982 <uarte_nrfx_isr_async+0x2de>
		data->async->rx_buf = data->async->rx_next_buf;
    a944:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    a946:	68f3      	ldr	r3, [r6, #12]
    a948:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    a94a:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
    a94c:	2300      	movs	r3, #0
    a94e:	68f2      	ldr	r2, [r6, #12]
    a950:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
    a952:	68f2      	ldr	r2, [r6, #12]
    a954:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
    a956:	68f2      	ldr	r2, [r6, #12]
    a958:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a95a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    a95e:	b90b      	cbnz	r3, a964 <uarte_nrfx_isr_async+0x2c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a960:	2301      	movs	r3, #1
    a962:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
    a964:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
    a968:	f023 0320 	bic.w	r3, r3, #32
    a96c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
    a970:	f381 8811 	msr	BASEPRI, r1
    a974:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    a978:	2200      	movs	r2, #0
    a97a:	68f3      	ldr	r3, [r6, #12]
    a97c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
    a980:	e708      	b.n	a794 <uarte_nrfx_isr_async+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a982:	2301      	movs	r3, #1
    a984:	607b      	str	r3, [r7, #4]
}
    a986:	e7f3      	b.n	a970 <uarte_nrfx_isr_async+0x2cc>
    p_reg->INTENCLR = mask;
    a988:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    a98c:	2101      	movs	r1, #1
    a98e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
    a992:	4620      	mov	r0, r4
    a994:	f004 f975 	bl	ec82 <async_uart_release>
		if (!data->async->tx_size) {
    a998:	68eb      	ldr	r3, [r5, #12]
    a99a:	68db      	ldr	r3, [r3, #12]
    a99c:	2b00      	cmp	r3, #0
    a99e:	d18c      	bne.n	a8ba <uarte_nrfx_isr_async+0x216>
    a9a0:	e695      	b.n	a6ce <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
    a9a2:	6899      	ldr	r1, [r3, #8]
    a9a4:	691a      	ldr	r2, [r3, #16]
    a9a6:	4291      	cmp	r1, r2
    a9a8:	d00c      	beq.n	a9c4 <uarte_nrfx_isr_async+0x320>
		if (amount == data->async->xfer_len) {
    a9aa:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
    a9ac:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
    a9ae:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
    a9b0:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
    a9b2:	d128      	bne.n	aa06 <uarte_nrfx_isr_async+0x362>
			if (setup_tx_cache(data)) {
    a9b4:	4628      	mov	r0, r5
			data->async->tx_cache_offset += amount;
    a9b6:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
    a9b8:	f004 f916 	bl	ebe8 <setup_tx_cache>
    a9bc:	2800      	cmp	r0, #0
    a9be:	d19b      	bne.n	a8f8 <uarte_nrfx_isr_async+0x254>
			amount = data->async->tx_cache_offset;
    a9c0:	68eb      	ldr	r3, [r5, #12]
    a9c2:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
    a9c4:	68e8      	ldr	r0, [r5, #12]
    a9c6:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
    a9c8:	f004 feb2 	bl	f730 <z_impl_k_timer_stop>
	struct uart_event evt = {
    a9cc:	2214      	movs	r2, #20
    a9ce:	2100      	movs	r1, #0
    a9d0:	a803      	add	r0, sp, #12
    a9d2:	f004 fed7 	bl	f784 <memset>
		.data.tx.buf = data->async->tx_buf,
    a9d6:	68eb      	ldr	r3, [r5, #12]
	user_callback(dev, &evt);
    a9d8:	4620      	mov	r0, r4
	struct uart_event evt = {
    a9da:	689a      	ldr	r2, [r3, #8]
	user_callback(dev, &evt);
    a9dc:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    a9de:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
    a9e2:	68db      	ldr	r3, [r3, #12]
    a9e4:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
    a9e6:	bf1c      	itt	ne
    a9e8:	2301      	movne	r3, #1
    a9ea:	f88d 300c 	strbne.w	r3, [sp, #12]
    a9ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    a9f2:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    a9f6:	2300      	movs	r3, #0
    a9f8:	68ea      	ldr	r2, [r5, #12]
    a9fa:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
    a9fc:	68ea      	ldr	r2, [r5, #12]
    a9fe:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
    aa00:	f004 f837 	bl	ea72 <user_callback>
    aa04:	e663      	b.n	a6ce <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
    aa06:	4616      	mov	r6, r2
    aa08:	e7dc      	b.n	a9c4 <uarte_nrfx_isr_async+0x320>
    aa0a:	bf00      	nop
    aa0c:	000f423f 	.word	0x000f423f
    aa10:	000f4240 	.word	0x000f4240

0000aa14 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    aa14:	2301      	movs	r3, #1
    aa16:	4083      	lsls	r3, r0
{
    aa18:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    aa1a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    aa1c:	4a0b      	ldr	r2, [pc, #44]	; (aa4c <compare_int_lock+0x38>)
    aa1e:	e8d2 1fef 	ldaex	r1, [r2]
    aa22:	ea01 0504 	and.w	r5, r1, r4
    aa26:	e8c2 5fe6 	stlex	r6, r5, [r2]
    aa2a:	2e00      	cmp	r6, #0
    aa2c:	d1f7      	bne.n	aa1e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    aa2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    aa32:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    aa34:	4806      	ldr	r0, [pc, #24]	; (aa50 <compare_int_lock+0x3c>)
    aa36:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    aa3a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    aa3e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    aa42:	420b      	tst	r3, r1
}
    aa44:	bf14      	ite	ne
    aa46:	2001      	movne	r0, #1
    aa48:	2000      	moveq	r0, #0
    aa4a:	bd70      	pop	{r4, r5, r6, pc}
    aa4c:	2000ca24 	.word	0x2000ca24
    aa50:	40015000 	.word	0x40015000

0000aa54 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    aa54:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    aa56:	490e      	ldr	r1, [pc, #56]	; (aa90 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    aa58:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    aa5c:	e9d1 3400 	ldrd	r3, r4, [r1]
    aa60:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    aa62:	18c3      	adds	r3, r0, r3
    aa64:	f144 0400 	adc.w	r4, r4, #0
    aa68:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    aa6c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    aa70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    aa74:	d209      	bcs.n	aa8a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    aa76:	4b07      	ldr	r3, [pc, #28]	; (aa94 <sys_clock_timeout_handler+0x40>)
    aa78:	681b      	ldr	r3, [r3, #0]
    aa7a:	0a1a      	lsrs	r2, r3, #8
    aa7c:	061b      	lsls	r3, r3, #24
    aa7e:	199c      	adds	r4, r3, r6
    aa80:	4b05      	ldr	r3, [pc, #20]	; (aa98 <sys_clock_timeout_handler+0x44>)
    aa82:	f142 0500 	adc.w	r5, r2, #0
    aa86:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    aa8a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    aa8c:	f002 beb0 	b.w	d7f0 <sys_clock_announce>
    aa90:	2000c840 	.word	0x2000c840
    aa94:	2000ca28 	.word	0x2000ca28
    aa98:	2000c848 	.word	0x2000c848

0000aa9c <compare_int_unlock>:
	if (key) {
    aa9c:	b1d9      	cbz	r1, aad6 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    aa9e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    aaa0:	4a0d      	ldr	r2, [pc, #52]	; (aad8 <compare_int_unlock+0x3c>)
    aaa2:	4083      	lsls	r3, r0
    aaa4:	e8d2 cfef 	ldaex	ip, [r2]
    aaa8:	ea4c 0c03 	orr.w	ip, ip, r3
    aaac:	e8c2 cfe1 	stlex	r1, ip, [r2]
    aab0:	2900      	cmp	r1, #0
    aab2:	d1f7      	bne.n	aaa4 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    aab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    aab8:	4a08      	ldr	r2, [pc, #32]	; (aadc <compare_int_unlock+0x40>)
    aaba:	4083      	lsls	r3, r0
    aabc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aac0:	4b07      	ldr	r3, [pc, #28]	; (aae0 <compare_int_unlock+0x44>)
    aac2:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    aac6:	40c3      	lsrs	r3, r0
    aac8:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    aaca:	bf42      	ittt	mi
    aacc:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    aad0:	4b04      	ldrmi	r3, [pc, #16]	; (aae4 <compare_int_unlock+0x48>)
    aad2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    aad6:	4770      	bx	lr
    aad8:	2000ca24 	.word	0x2000ca24
    aadc:	40015000 	.word	0x40015000
    aae0:	2000ca20 	.word	0x2000ca20
    aae4:	e000e100 	.word	0xe000e100

0000aae8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    aae8:	4b0d      	ldr	r3, [pc, #52]	; (ab20 <z_nrf_rtc_timer_read+0x38>)
    aaea:	6818      	ldr	r0, [r3, #0]
    aaec:	0a01      	lsrs	r1, r0, #8
    aaee:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    aaf0:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    aaf4:	4b0b      	ldr	r3, [pc, #44]	; (ab24 <z_nrf_rtc_timer_read+0x3c>)
    aaf6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    aafa:	1818      	adds	r0, r3, r0
    aafc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    ab00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    ab04:	d20a      	bcs.n	ab1c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    ab06:	4b08      	ldr	r3, [pc, #32]	; (ab28 <z_nrf_rtc_timer_read+0x40>)
    ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab0c:	4290      	cmp	r0, r2
    ab0e:	eb71 0303 	sbcs.w	r3, r1, r3
    ab12:	d203      	bcs.n	ab1c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    ab14:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    ab18:	f141 0100 	adc.w	r1, r1, #0
}
    ab1c:	4770      	bx	lr
    ab1e:	bf00      	nop
    ab20:	2000ca28 	.word	0x2000ca28
    ab24:	40015000 	.word	0x40015000
    ab28:	2000c848 	.word	0x2000c848

0000ab2c <compare_set>:
{
    ab2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab30:	4616      	mov	r6, r2
    ab32:	461f      	mov	r7, r3
    ab34:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    ab36:	f7ff ff6d 	bl	aa14 <compare_int_lock>
    ab3a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    ab3c:	f7ff ffd4 	bl	aae8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    ab40:	42b0      	cmp	r0, r6
    ab42:	eb71 0307 	sbcs.w	r3, r1, r7
    ab46:	d250      	bcs.n	abea <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    ab48:	4b38      	ldr	r3, [pc, #224]	; (ac2c <compare_set+0x100>)
    ab4a:	1a30      	subs	r0, r6, r0
    ab4c:	eb67 0101 	sbc.w	r1, r7, r1
    ab50:	4298      	cmp	r0, r3
    ab52:	f171 0100 	sbcs.w	r1, r1, #0
    ab56:	d265      	bcs.n	ac24 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    ab58:	4b35      	ldr	r3, [pc, #212]	; (ac30 <compare_set+0x104>)
    ab5a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    ab5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    ab62:	429f      	cmp	r7, r3
    ab64:	bf08      	it	eq
    ab66:	4296      	cmpeq	r6, r2
    ab68:	d049      	beq.n	abfe <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ab6a:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    ab6e:	4931      	ldr	r1, [pc, #196]	; (ac34 <compare_set+0x108>)
    ab70:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    ab74:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    ab76:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    ab7a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    ab7e:	f004 f9d0 	bl	ef22 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    ab82:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    ab86:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ab88:	f104 0550 	add.w	r5, r4, #80	; 0x50
    ab8c:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ab8e:	b2ad      	uxth	r5, r5
    ab90:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    ab94:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    ab98:	4a27      	ldr	r2, [pc, #156]	; (ac38 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ab9a:	f505 35a8 	add.w	r5, r5, #86016	; 0x15000
    p_reg->CC[ch] = cc_val;
    ab9e:	9301      	str	r3, [sp, #4]
    aba0:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    aba4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    aba8:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    abac:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    abb0:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    abb4:	eba0 0008 	sub.w	r0, r0, r8
    abb8:	3803      	subs	r0, #3
    abba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    abbe:	4290      	cmp	r0, r2
    abc0:	d91d      	bls.n	abfe <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    abc2:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    abc4:	b160      	cbz	r0, abe0 <compare_set+0xb4>
     return p_reg->COUNTER;
    abc6:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    abca:	eba8 000b 	sub.w	r0, r8, fp
    abce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    abd2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    abd6:	d912      	bls.n	abfe <compare_set+0xd2>
					event_clear(chan);
    abd8:	4620      	mov	r0, r4
    abda:	f004 f9a2 	bl	ef22 <event_clear>
    abde:	4a16      	ldr	r2, [pc, #88]	; (ac38 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    abe0:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    abe4:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    abe8:	e7da      	b.n	aba0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    abea:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    abec:	4a13      	ldr	r2, [pc, #76]	; (ac3c <compare_set+0x110>)
    abee:	40a3      	lsls	r3, r4
    abf0:	e8d2 0fef 	ldaex	r0, [r2]
    abf4:	4318      	orrs	r0, r3
    abf6:	e8c2 0fe1 	stlex	r1, r0, [r2]
    abfa:	2900      	cmp	r1, #0
    abfc:	d1f8      	bne.n	abf0 <compare_set+0xc4>
	return ret;
    abfe:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    ac00:	490b      	ldr	r1, [pc, #44]	; (ac30 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    ac02:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    ac04:	0123      	lsls	r3, r4, #4
    ac06:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    ac0a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    ac0c:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    ac10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ac12:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    ac14:	4620      	mov	r0, r4
    ac16:	9900      	ldr	r1, [sp, #0]
    ac18:	f7ff ff40 	bl	aa9c <compare_int_unlock>
}
    ac1c:	4628      	mov	r0, r5
    ac1e:	b003      	add	sp, #12
    ac20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    ac24:	f06f 0515 	mvn.w	r5, #21
    ac28:	e7f4      	b.n	ac14 <compare_set+0xe8>
    ac2a:	bf00      	nop
    ac2c:	00800001 	.word	0x00800001
    ac30:	2000c830 	.word	0x2000c830
    ac34:	40015000 	.word	0x40015000
    ac38:	007ffffd 	.word	0x007ffffd
    ac3c:	2000ca20 	.word	0x2000ca20

0000ac40 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    ac40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    ac42:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    ac44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ac48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->INTENCLR = mask;
    ac4c:	4c18      	ldr	r4, [pc, #96]	; (acb0 <sys_clock_driver_init+0x70>)
    ac4e:	4b19      	ldr	r3, [pc, #100]	; (acb4 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
    ac50:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    ac52:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    ac56:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    ac5a:	4b17      	ldr	r3, [pc, #92]	; (acb8 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    ac5c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    ac60:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    ac64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ac68:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    ac6c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    ac70:	4b12      	ldr	r3, [pc, #72]	; (acbc <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    ac72:	2101      	movs	r1, #1
    ac74:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    ac78:	2015      	movs	r0, #21
    ac7a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ac7e:	462a      	mov	r2, r5
    ac80:	f7fe fb1e 	bl	92c0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    ac84:	2015      	movs	r0, #21
    ac86:	f7fe faff 	bl	9288 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    ac8a:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    ac8c:	4a0c      	ldr	r2, [pc, #48]	; (acc0 <sys_clock_driver_init+0x80>)
    ac8e:	60a3      	str	r3, [r4, #8]
    ac90:	6023      	str	r3, [r4, #0]
    ac92:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    ac94:	4b0b      	ldr	r3, [pc, #44]	; (acc4 <sys_clock_driver_init+0x84>)
    ac96:	4a0c      	ldr	r2, [pc, #48]	; (acc8 <sys_clock_driver_init+0x88>)
    ac98:	9300      	str	r3, [sp, #0]
    ac9a:	4628      	mov	r0, r5
    ac9c:	2300      	movs	r3, #0
    ac9e:	9501      	str	r5, [sp, #4]
    aca0:	f7ff ff44 	bl	ab2c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    aca4:	4630      	mov	r0, r6
    aca6:	f7ff f871 	bl	9d8c <z_nrf_clock_control_lf_on>

	return 0;
}
    acaa:	4628      	mov	r0, r5
    acac:	b002      	add	sp, #8
    acae:	bd70      	pop	{r4, r5, r6, pc}
    acb0:	40015000 	.word	0x40015000
    acb4:	000f0003 	.word	0x000f0003
    acb8:	2000c830 	.word	0x2000c830
    acbc:	e000e100 	.word	0xe000e100
    acc0:	2000ca24 	.word	0x2000ca24
    acc4:	0000aa55 	.word	0x0000aa55
    acc8:	007fffff 	.word	0x007fffff

0000accc <rtc_nrf_isr>:
{
    accc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    acd0:	4b2e      	ldr	r3, [pc, #184]	; (ad8c <rtc_nrf_isr+0xc0>)
    acd2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    acd6:	0790      	lsls	r0, r2, #30
    acd8:	d50b      	bpl.n	acf2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    acda:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    acde:	b142      	cbz	r2, acf2 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ace0:	2200      	movs	r2, #0
    ace2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    ace6:	4a2a      	ldr	r2, [pc, #168]	; (ad90 <rtc_nrf_isr+0xc4>)
    ace8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    acec:	6813      	ldr	r3, [r2, #0]
    acee:	3301      	adds	r3, #1
    acf0:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    acf2:	4a26      	ldr	r2, [pc, #152]	; (ad8c <rtc_nrf_isr+0xc0>)
    acf4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    acf8:	03d9      	lsls	r1, r3, #15
    acfa:	d527      	bpl.n	ad4c <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    acfc:	4b25      	ldr	r3, [pc, #148]	; (ad94 <rtc_nrf_isr+0xc8>)
    acfe:	e8d3 1fef 	ldaex	r1, [r3]
    ad02:	f021 0001 	bic.w	r0, r1, #1
    ad06:	e8c3 0fe4 	stlex	r4, r0, [r3]
    ad0a:	2c00      	cmp	r4, #0
    ad0c:	d1f7      	bne.n	acfe <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    ad0e:	07cb      	lsls	r3, r1, #31
    ad10:	d402      	bmi.n	ad18 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ad12:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    ad16:	b1cb      	cbz	r3, ad4c <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ad18:	2500      	movs	r5, #0
    ad1a:	4c1c      	ldr	r4, [pc, #112]	; (ad8c <rtc_nrf_isr+0xc0>)
    ad1c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    ad20:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    ad24:	f7ff fee0 	bl	aae8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    ad28:	f04f 0320 	mov.w	r3, #32
    ad2c:	f3ef 8211 	mrs	r2, BASEPRI
    ad30:	f383 8812 	msr	BASEPRI_MAX, r3
    ad34:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    ad38:	4b17      	ldr	r3, [pc, #92]	; (ad98 <rtc_nrf_isr+0xcc>)
    ad3a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    ad3e:	42b0      	cmp	r0, r6
    ad40:	41b9      	sbcs	r1, r7
    ad42:	d206      	bcs.n	ad52 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    ad44:	f382 8811 	msr	BASEPRI, r2
    ad48:	f3bf 8f6f 	isb	sy
}
    ad4c:	b003      	add	sp, #12
    ad4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    ad52:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    ad56:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    ad5a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    ad5e:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    ad60:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    ad64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    ad68:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ad6c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    ad70:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ad74:	f382 8811 	msr	BASEPRI, r2
    ad78:	f3bf 8f6f 	isb	sy
		if (handler) {
    ad7c:	2900      	cmp	r1, #0
    ad7e:	d0e5      	beq.n	ad4c <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    ad80:	9000      	str	r0, [sp, #0]
    ad82:	4632      	mov	r2, r6
    ad84:	463b      	mov	r3, r7
    ad86:	4628      	mov	r0, r5
    ad88:	4788      	blx	r1
    ad8a:	e7df      	b.n	ad4c <rtc_nrf_isr+0x80>
    ad8c:	40015000 	.word	0x40015000
    ad90:	2000ca28 	.word	0x2000ca28
    ad94:	2000ca20 	.word	0x2000ca20
    ad98:	2000c830 	.word	0x2000c830

0000ad9c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    ad9c:	1c43      	adds	r3, r0, #1
{
    ad9e:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    ada0:	d021      	beq.n	ade6 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    ada2:	2801      	cmp	r0, #1
    ada4:	dd21      	ble.n	adea <sys_clock_set_timeout+0x4e>
    ada6:	4a12      	ldr	r2, [pc, #72]	; (adf0 <sys_clock_set_timeout+0x54>)
    ada8:	4b12      	ldr	r3, [pc, #72]	; (adf4 <sys_clock_set_timeout+0x58>)
    adaa:	4290      	cmp	r0, r2
    adac:	bfd4      	ite	le
    adae:	4604      	movle	r4, r0
    adb0:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    adb2:	f7ff fe99 	bl	aae8 <z_nrf_rtc_timer_read>
    adb6:	4b10      	ldr	r3, [pc, #64]	; (adf8 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    adb8:	490e      	ldr	r1, [pc, #56]	; (adf4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    adba:	e9d3 2300 	ldrd	r2, r3, [r3]
    adbe:	1a80      	subs	r0, r0, r2
		cyc = 0;
    adc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    adc4:	bf28      	it	cs
    adc6:	2400      	movcs	r4, #0
	cyc += unannounced;
    adc8:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    adca:	428c      	cmp	r4, r1
    adcc:	bf28      	it	cs
    adce:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    add0:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    add2:	490a      	ldr	r1, [pc, #40]	; (adfc <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    add4:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    add6:	9001      	str	r0, [sp, #4]
    add8:	9100      	str	r1, [sp, #0]
    adda:	f143 0300 	adc.w	r3, r3, #0
    adde:	f7ff fea5 	bl	ab2c <compare_set>
}
    ade2:	b002      	add	sp, #8
    ade4:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    ade6:	4c03      	ldr	r4, [pc, #12]	; (adf4 <sys_clock_set_timeout+0x58>)
    ade8:	e7e3      	b.n	adb2 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    adea:	2401      	movs	r4, #1
    adec:	e7e1      	b.n	adb2 <sys_clock_set_timeout+0x16>
    adee:	bf00      	nop
    adf0:	007ffffe 	.word	0x007ffffe
    adf4:	007fffff 	.word	0x007fffff
    adf8:	2000c840 	.word	0x2000c840
    adfc:	0000aa55 	.word	0x0000aa55

0000ae00 <sys_clock_elapsed>:
{
    ae00:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    ae02:	f7ff fe71 	bl	aae8 <z_nrf_rtc_timer_read>
    ae06:	4b02      	ldr	r3, [pc, #8]	; (ae10 <sys_clock_elapsed+0x10>)
    ae08:	681b      	ldr	r3, [r3, #0]
}
    ae0a:	1ac0      	subs	r0, r0, r3
    ae0c:	bd08      	pop	{r3, pc}
    ae0e:	bf00      	nop
    ae10:	2000c840 	.word	0x2000c840

0000ae14 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
    ae14:	b5f0      	push	{r4, r5, r6, r7, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
    ae16:	4b0f      	ldr	r3, [pc, #60]	; (ae54 <thread_monitor_entry_get+0x40>)
{
    ae18:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
    ae1a:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
    ae1c:	4b0e      	ldr	r3, [pc, #56]	; (ae58 <thread_monitor_entry_get+0x44>)
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    ae1e:	250b      	movs	r5, #11
	int entry_age, oldest_entry_age = 0;
    ae20:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
    ae22:	4618      	mov	r0, r3
    ae24:	461f      	mov	r7, r3
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    ae26:	42b8      	cmp	r0, r7
    ae28:	d301      	bcc.n	ae2e <thread_monitor_entry_get+0x1a>
    ae2a:	3d01      	subs	r5, #1
    ae2c:	d104      	bne.n	ae38 <thread_monitor_entry_get+0x24>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
    ae2e:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
    ae30:	3a01      	subs	r2, #1
	new_entry->id = id;
    ae32:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
    ae34:	605a      	str	r2, [r3, #4]
}
    ae36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (entry->id == id) {
    ae38:	6804      	ldr	r4, [r0, #0]
    ae3a:	428c      	cmp	r4, r1
    ae3c:	d0fb      	beq.n	ae36 <thread_monitor_entry_get+0x22>
		} else if (entry->id == 0) {
    ae3e:	b13c      	cbz	r4, ae50 <thread_monitor_entry_get+0x3c>
		entry_age = rpc_event_cnt - entry->cnt;
    ae40:	6844      	ldr	r4, [r0, #4]
    ae42:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
    ae44:	42a6      	cmp	r6, r4
    ae46:	bfbc      	itt	lt
    ae48:	4603      	movlt	r3, r0
    ae4a:	4626      	movlt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
    ae4c:	3008      	adds	r0, #8
    ae4e:	e7ea      	b.n	ae26 <thread_monitor_entry_get+0x12>
    ae50:	4603      	mov	r3, r0
    ae52:	e7ec      	b.n	ae2e <thread_monitor_entry_get+0x1a>
    ae54:	2000ca9c 	.word	0x2000ca9c
    ae58:	2000caa8 	.word	0x2000caa8

0000ae5c <on_init>:
	list->head = NULL;
    ae5c:	2000      	movs	r0, #0
    ae5e:	4b05      	ldr	r3, [pc, #20]	; (ae74 <on_init+0x18>)
	list->tail = NULL;
    ae60:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ae64:	4b04      	ldr	r3, [pc, #16]	; (ae78 <on_init+0x1c>)
    ae66:	e8d3 2fef 	ldaex	r2, [r3]
    ae6a:	e8c3 0fe1 	stlex	r1, r0, [r3]
    ae6e:	2900      	cmp	r1, #0
    ae70:	d1f9      	bne.n	ae66 <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
    ae72:	4770      	bx	lr
    ae74:	2000caa0 	.word	0x2000caa0
    ae78:	2000ca9c 	.word	0x2000ca9c

0000ae7c <nrf_modem_os_timedwait>:
{
    ae7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ae80:	b086      	sub	sp, #24
    ae82:	4605      	mov	r5, r0
    ae84:	460e      	mov	r6, r1
	if (!nrf_modem_is_initialized()) {
    ae86:	f004 fa38 	bl	f2fa <nrf_modem_is_initialized>
    ae8a:	b920      	cbnz	r0, ae96 <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
    ae8c:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
    ae90:	b006      	add	sp, #24
    ae92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
    ae96:	f004 fc17 	bl	f6c8 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
    ae9a:	6833      	ldr	r3, [r6, #0]
    ae9c:	4604      	mov	r4, r0
    ae9e:	2b00      	cmp	r3, #0
    aea0:	460f      	mov	r7, r1
    aea2:	d104      	bne.n	aeae <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
    aea4:	f002 facc 	bl	d440 <z_impl_k_yield>
		return -NRF_EAGAIN;
    aea8:	f06f 000a 	mvn.w	r0, #10
    aeac:	e7f0      	b.n	ae90 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
    aeae:	bfbc      	itt	lt
    aeb0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    aeb4:	6033      	strlt	r3, [r6, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    aeb6:	2201      	movs	r2, #1
    aeb8:	2100      	movs	r1, #0
    aeba:	a801      	add	r0, sp, #4
    aebc:	f004 fadb 	bl	f476 <z_impl_k_sem_init>
    aec0:	46e8      	mov	r8, sp
	thread->context = context;
    aec2:	9505      	str	r5, [sp, #20]
	__asm__ volatile(
    aec4:	f04f 0320 	mov.w	r3, #32
    aec8:	f3ef 8a11 	mrs	sl, BASEPRI
    aecc:	f383 8812 	msr	BASEPRI_MAX, r3
    aed0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    aed4:	f002 fb50 	bl	d578 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    aed8:	f7ff ff9c 	bl	ae14 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
    aedc:	f8df 9118 	ldr.w	r9, [pc, #280]	; aff8 <nrf_modem_os_timedwait+0x17c>
    aee0:	6842      	ldr	r2, [r0, #4]
    aee2:	f8d9 3000 	ldr.w	r3, [r9]
    aee6:	429a      	cmp	r2, r3
    aee8:	d16d      	bne.n	afc6 <nrf_modem_os_timedwait+0x14a>
	parent->next = child;
    aeea:	2300      	movs	r3, #0
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    aeec:	4d43      	ldr	r5, [pc, #268]	; (affc <nrf_modem_os_timedwait+0x180>)
	parent->next = child;
    aeee:	9300      	str	r3, [sp, #0]
	return list->tail;
    aef0:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    aef2:	2b00      	cmp	r3, #0
    aef4:	d16e      	bne.n	afd4 <nrf_modem_os_timedwait+0x158>
	list->head = node;
    aef6:	e9c5 8800 	strd	r8, r8, [r5]
	__asm__ volatile(
    aefa:	f38a 8811 	msr	BASEPRI, sl
    aefe:	f3bf 8f6f 	isb	sy
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    af02:	6833      	ldr	r3, [r6, #0]
    af04:	1c5a      	adds	r2, r3, #1
    af06:	d06a      	beq.n	afde <nrf_modem_os_timedwait+0x162>
    af08:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    af0c:	f240 30e7 	movw	r0, #999	; 0x3e7
    af10:	2100      	movs	r1, #0
    af12:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    af16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    af1a:	2300      	movs	r3, #0
    af1c:	fbcc 010e 	smlal	r0, r1, ip, lr
    af20:	f7fd f910 	bl	8144 <__aeabi_uldivmod>
    af24:	4602      	mov	r2, r0
    af26:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    af28:	a801      	add	r0, sp, #4
    af2a:	f002 f821 	bl	cf70 <z_impl_k_sem_take>
	__asm__ volatile(
    af2e:	f04f 0320 	mov.w	r3, #32
    af32:	f3ef 8a11 	mrs	sl, BASEPRI
    af36:	f383 8812 	msr	BASEPRI_MAX, r3
    af3a:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    af3e:	2200      	movs	r2, #0
	return list->head;
    af40:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    af42:	b15b      	cbz	r3, af5c <nrf_modem_os_timedwait+0xe0>
    af44:	4543      	cmp	r3, r8
    af46:	d154      	bne.n	aff2 <nrf_modem_os_timedwait+0x176>
	return node->next;
    af48:	9900      	ldr	r1, [sp, #0]
Z_GENLIST_REMOVE(slist, snode)
    af4a:	2a00      	cmp	r2, #0
    af4c:	d14b      	bne.n	afe6 <nrf_modem_os_timedwait+0x16a>
    af4e:	686a      	ldr	r2, [r5, #4]
	list->head = node;
    af50:	6029      	str	r1, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
    af52:	429a      	cmp	r2, r3
    af54:	d100      	bne.n	af58 <nrf_modem_os_timedwait+0xdc>
	list->tail = node;
    af56:	6069      	str	r1, [r5, #4]
	parent->next = child;
    af58:	2300      	movs	r3, #0
    af5a:	9300      	str	r3, [sp, #0]
	return z_impl_z_current_get();
    af5c:	f002 fb0c 	bl	d578 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
    af60:	f7ff ff58 	bl	ae14 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
    af64:	f8d9 3000 	ldr.w	r3, [r9]
    af68:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
    af6a:	f38a 8811 	msr	BASEPRI, sl
    af6e:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
    af72:	f004 f9c2 	bl	f2fa <nrf_modem_is_initialized>
    af76:	2800      	cmp	r0, #0
    af78:	d088      	beq.n	ae8c <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
    af7a:	6835      	ldr	r5, [r6, #0]
    af7c:	1c6b      	adds	r3, r5, #1
    af7e:	d027      	beq.n	afd0 <nrf_modem_os_timedwait+0x154>
	return z_impl_k_uptime_ticks();
    af80:	f004 fba2 	bl	f6c8 <z_impl_k_uptime_ticks>
    af84:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
    af88:	fba0 320e 	umull	r3, r2, r0, lr
    af8c:	fb0e 2101 	mla	r1, lr, r1, r2
    af90:	fba4 420e 	umull	r4, r2, r4, lr
    af94:	fb0e 2207 	mla	r2, lr, r7, r2
    af98:	0bdb      	lsrs	r3, r3, #15
    af9a:	0be4      	lsrs	r4, r4, #15
    af9c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    afa0:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
	delta = uptime - *reftime;
    afa4:	1b1b      	subs	r3, r3, r4
    afa6:	ea4f 31d1 	mov.w	r1, r1, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
    afaa:	ea4f 7ce5 	mov.w	ip, r5, asr #31
    afae:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
    afb2:	1aed      	subs	r5, r5, r3
    afb4:	eb6c 0c01 	sbc.w	ip, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
    afb8:	f1bc 0f00 	cmp.w	ip, #0
    afbc:	bfb8      	it	lt
    afbe:	2500      	movlt	r5, #0
    afc0:	6035      	str	r5, [r6, #0]
	if (*timeout == 0) {
    afc2:	b92d      	cbnz	r5, afd0 <nrf_modem_os_timedwait+0x154>
    afc4:	e770      	b.n	aea8 <nrf_modem_os_timedwait+0x2c>
	entry->cnt = rpc_event_cnt;
    afc6:	6043      	str	r3, [r0, #4]
    afc8:	f38a 8811 	msr	BASEPRI, sl
    afcc:	f3bf 8f6f 	isb	sy
		return 0;
    afd0:	2000      	movs	r0, #0
    afd2:	e75d      	b.n	ae90 <nrf_modem_os_timedwait+0x14>
    afd4:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
    afd8:	f8c5 8004 	str.w	r8, [r5, #4]
    afdc:	e78d      	b.n	aefa <nrf_modem_os_timedwait+0x7e>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
    afde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    afe2:	4613      	mov	r3, r2
    afe4:	e7a0      	b.n	af28 <nrf_modem_os_timedwait+0xac>
	parent->next = child;
    afe6:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    afe8:	6869      	ldr	r1, [r5, #4]
    afea:	4299      	cmp	r1, r3
	list->tail = node;
    afec:	bf08      	it	eq
    afee:	606a      	streq	r2, [r5, #4]
}
    aff0:	e7b2      	b.n	af58 <nrf_modem_os_timedwait+0xdc>
	return node->next;
    aff2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    aff4:	681b      	ldr	r3, [r3, #0]
    aff6:	e7a4      	b.n	af42 <nrf_modem_os_timedwait+0xc6>
    aff8:	2000ca9c 	.word	0x2000ca9c
    affc:	2000caa0 	.word	0x2000caa0

0000b000 <nrf_modem_os_sem_init>:
{
    b000:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
    b002:	6804      	ldr	r4, [r0, #0]
    b004:	4b09      	ldr	r3, [pc, #36]	; (b02c <nrf_modem_os_sem_init+0x2c>)
    b006:	b12c      	cbz	r4, b014 <nrf_modem_os_sem_init+0x14>
    b008:	429c      	cmp	r4, r3
    b00a:	d303      	bcc.n	b014 <nrf_modem_os_sem_init+0x14>
    b00c:	f103 0570 	add.w	r5, r3, #112	; 0x70
    b010:	42ac      	cmp	r4, r5
    b012:	d306      	bcc.n	b022 <nrf_modem_os_sem_init+0x22>
	*sem = &nrf_modem_os_sems[used++];
    b014:	4d06      	ldr	r5, [pc, #24]	; (b030 <nrf_modem_os_sem_init+0x30>)
    b016:	782c      	ldrb	r4, [r5, #0]
    b018:	1c66      	adds	r6, r4, #1
    b01a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    b01e:	702e      	strb	r6, [r5, #0]
    b020:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
    b022:	6800      	ldr	r0, [r0, #0]
}
    b024:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
    b026:	f004 ba26 	b.w	f476 <z_impl_k_sem_init>
    b02a:	bf00      	nop
    b02c:	2000ca2c 	.word	0x2000ca2c
    b030:	2000cf25 	.word	0x2000cf25

0000b034 <nrf_modem_os_event_notify>:
{
    b034:	b538      	push	{r3, r4, r5, lr}
    b036:	4605      	mov	r5, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    b038:	4b0a      	ldr	r3, [pc, #40]	; (b064 <nrf_modem_os_event_notify+0x30>)
    b03a:	e8d3 1fef 	ldaex	r1, [r3]
    b03e:	3101      	adds	r1, #1
    b040:	e8c3 1fe2 	stlex	r2, r1, [r3]
    b044:	2a00      	cmp	r2, #0
    b046:	d1f8      	bne.n	b03a <nrf_modem_os_event_notify+0x6>
	return list->head;
    b048:	4b07      	ldr	r3, [pc, #28]	; (b068 <nrf_modem_os_event_notify+0x34>)
    b04a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
    b04c:	b904      	cbnz	r4, b050 <nrf_modem_os_event_notify+0x1c>
}
    b04e:	bd38      	pop	{r3, r4, r5, pc}
		if ((thread->context == context) || (context == 0)) {
    b050:	6963      	ldr	r3, [r4, #20]
    b052:	42ab      	cmp	r3, r5
    b054:	d000      	beq.n	b058 <nrf_modem_os_event_notify+0x24>
    b056:	b915      	cbnz	r5, b05e <nrf_modem_os_event_notify+0x2a>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    b058:	1d20      	adds	r0, r4, #4
    b05a:	f001 ff69 	bl	cf30 <z_impl_k_sem_give>
	return node->next;
    b05e:	6824      	ldr	r4, [r4, #0]
    b060:	e7f4      	b.n	b04c <nrf_modem_os_event_notify+0x18>
    b062:	bf00      	nop
    b064:	2000ca9c 	.word	0x2000ca9c
    b068:	2000caa0 	.word	0x2000caa0

0000b06c <nrf_modem_os_alloc>:
{
    b06c:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
    b06e:	2200      	movs	r2, #0
    b070:	2300      	movs	r3, #0
    b072:	4801      	ldr	r0, [pc, #4]	; (b078 <nrf_modem_os_alloc+0xc>)
    b074:	f004 b9c3 	b.w	f3fe <k_heap_alloc>
    b078:	2000caf8 	.word	0x2000caf8

0000b07c <nrf_modem_os_free>:
{
    b07c:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
    b07e:	4801      	ldr	r0, [pc, #4]	; (b084 <nrf_modem_os_free+0x8>)
    b080:	f004 b9c7 	b.w	f412 <k_heap_free>
    b084:	2000caf8 	.word	0x2000caf8

0000b088 <nrf_modem_os_shm_tx_alloc>:
{
    b088:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
    b08a:	2200      	movs	r2, #0
    b08c:	2300      	movs	r3, #0
    b08e:	4801      	ldr	r0, [pc, #4]	; (b094 <nrf_modem_os_shm_tx_alloc+0xc>)
    b090:	f004 b9b5 	b.w	f3fe <k_heap_alloc>
    b094:	2000cb0c 	.word	0x2000cb0c

0000b098 <nrf_modem_os_shm_tx_free>:
{
    b098:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
    b09a:	4801      	ldr	r0, [pc, #4]	; (b0a0 <nrf_modem_os_shm_tx_free+0x8>)
    b09c:	f004 b9b9 	b.w	f412 <k_heap_free>
    b0a0:	2000cb0c 	.word	0x2000cb0c

0000b0a4 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
    b0a4:	b508      	push	{r3, lr}
	int err;

	if (ret != 0) {
    b0a6:	b948      	cbnz	r0, b0bc <on_modem_lib_init+0x18>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
    b0a8:	4905      	ldr	r1, [pc, #20]	; (b0c0 <on_modem_lib_init+0x1c>)
    b0aa:	4806      	ldr	r0, [pc, #24]	; (b0c4 <on_modem_lib_init+0x20>)
    b0ac:	f001 f904 	bl	c2b8 <nrf_modem_at_printf>
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		if (err) {
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
		}
	}
}
    b0b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
    b0b4:	4904      	ldr	r1, [pc, #16]	; (b0c8 <on_modem_lib_init+0x24>)
    b0b6:	4803      	ldr	r0, [pc, #12]	; (b0c4 <on_modem_lib_init+0x20>)
    b0b8:	f001 b8fe 	b.w	c2b8 <nrf_modem_at_printf>
}
    b0bc:	bd08      	pop	{r3, pc}
    b0be:	bf00      	nop
    b0c0:	0001024d 	.word	0x0001024d
    b0c4:	0001026c 	.word	0x0001026c
    b0c8:	0001026f 	.word	0x0001026f

0000b0cc <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
    b0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0d0:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
    b0d2:	4b15      	ldr	r3, [pc, #84]	; (b128 <tfm_ns_interface_dispatch+0x5c>)
    b0d4:	4604      	mov	r4, r0
    b0d6:	f893 8000 	ldrb.w	r8, [r3]
    b0da:	460d      	mov	r5, r1
    b0dc:	4616      	mov	r6, r2
    b0de:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();
	int tfm_ns_saved_prio;

	if (!is_pre_kernel) {
    b0e0:	f1b8 0f00 	cmp.w	r8, #0
    b0e4:	d115      	bne.n	b112 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
    b0e6:	4668      	mov	r0, sp
    b0e8:	f003 fb52 	bl	e790 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
    b0ec:	463a      	mov	r2, r7
    b0ee:	4631      	mov	r1, r6
    b0f0:	4628      	mov	r0, r5
    b0f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    b0f4:	47a0      	blx	r4
    b0f6:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
    b0f8:	4668      	mov	r0, sp
    b0fa:	f003 fb4a 	bl	e792 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
    b0fe:	f1b8 0f00 	cmp.w	r8, #0
    b102:	d002      	beq.n	b10a <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    b104:	4809      	ldr	r0, [pc, #36]	; (b12c <tfm_ns_interface_dispatch+0x60>)
    b106:	f001 fed7 	bl	ceb8 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
    b10a:	4620      	mov	r0, r4
    b10c:	b022      	add	sp, #136	; 0x88
    b10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
    b112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b11a:	4804      	ldr	r0, [pc, #16]	; (b12c <tfm_ns_interface_dispatch+0x60>)
    b11c:	f001 fe52 	bl	cdc4 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
    b120:	2800      	cmp	r0, #0
    b122:	d0e0      	beq.n	b0e6 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
    b124:	241f      	movs	r4, #31
    b126:	e7f0      	b.n	b10a <tfm_ns_interface_dispatch+0x3e>
    b128:	2000cf31 	.word	0x2000cf31
    b12c:	2000c818 	.word	0x2000c818

0000b130 <psa_generate_random>:
    return API_DISPATCH_NO_OUTVEC(in_vec);
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
    b130:	b570      	push	{r4, r5, r6, lr}
    struct tfm_crypto_pack_iovec iov = {
    b132:	2630      	movs	r6, #48	; 0x30
{
    b134:	b092      	sub	sp, #72	; 0x48
    struct tfm_crypto_pack_iovec iov = {
    b136:	ab06      	add	r3, sp, #24
{
    b138:	4605      	mov	r5, r0
    b13a:	460c      	mov	r4, r1
    struct tfm_crypto_pack_iovec iov = {
    b13c:	4632      	mov	r2, r6
    b13e:	2100      	movs	r1, #0
    b140:	4618      	mov	r0, r3
    b142:	f004 fb1f 	bl	f784 <memset>

    psa_invec in_vec[] = {
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
    b146:	e9cd 5404 	strd	r5, r4, [sp, #16]
    psa_invec in_vec[] = {
    b14a:	e9cd 0602 	strd	r0, r6, [sp, #8]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
    b14e:	b154      	cbz	r4, b166 <psa_generate_random+0x36>
        return PSA_SUCCESS;
    }

    return API_DISPATCH(in_vec, out_vec);
    b150:	2301      	movs	r3, #1
    b152:	aa04      	add	r2, sp, #16
    b154:	9200      	str	r2, [sp, #0]
    b156:	2100      	movs	r1, #0
    b158:	4804      	ldr	r0, [pc, #16]	; (b16c <psa_generate_random+0x3c>)
    b15a:	9301      	str	r3, [sp, #4]
    b15c:	aa02      	add	r2, sp, #8
    b15e:	f000 f807 	bl	b170 <psa_call>
}
    b162:	b012      	add	sp, #72	; 0x48
    b164:	bd70      	pop	{r4, r5, r6, pc}
        return PSA_SUCCESS;
    b166:	4620      	mov	r0, r4
    b168:	e7fb      	b.n	b162 <psa_generate_random+0x32>
    b16a:	bf00      	nop
    b16c:	40000100 	.word	0x40000100

0000b170 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
    b170:	b430      	push	{r4, r5}
    if ((type > INT16_MAX) ||
    b172:	f501 4500 	add.w	r5, r1, #32768	; 0x8000
    b176:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
{
    b17a:	9c03      	ldr	r4, [sp, #12]
    if ((type > INT16_MAX) ||
    b17c:	d20d      	bcs.n	b19a <psa_call+0x2a>
        (type < INT16_MIN) ||
    b17e:	ea43 0504 	orr.w	r5, r3, r4
    b182:	2dff      	cmp	r5, #255	; 0xff
    b184:	d809      	bhi.n	b19a <psa_call+0x2a>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
    b186:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
    b18a:	4613      	mov	r3, r2
    b18c:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    b190:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
    b192:	bc30      	pop	{r4, r5}
    return tfm_ns_interface_dispatch(
    b194:	4803      	ldr	r0, [pc, #12]	; (b1a4 <psa_call+0x34>)
    b196:	f7ff bf99 	b.w	b0cc <tfm_ns_interface_dispatch>
}
    b19a:	f06f 0080 	mvn.w	r0, #128	; 0x80
    b19e:	bc30      	pop	{r4, r5}
    b1a0:	4770      	bx	lr
    b1a2:	bf00      	nop
    b1a4:	00007c11 	.word	0x00007c11

0000b1a8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    b1a8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    b1aa:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    b1ac:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    b1ae:	fab2 f382 	clz	r3, r2
    b1b2:	f1c3 031f 	rsb	r3, r3, #31
    b1b6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    b1b8:	fa05 f403 	lsl.w	r4, r5, r3
    b1bc:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b1c0:	e8d0 6fef 	ldaex	r6, [r0]
    b1c4:	4296      	cmp	r6, r2
    b1c6:	d104      	bne.n	b1d2 <nrfx_flag32_alloc+0x2a>
    b1c8:	e8c0 4fec 	stlex	ip, r4, [r0]
    b1cc:	f1bc 0f00 	cmp.w	ip, #0
    b1d0:	d1f6      	bne.n	b1c0 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    b1d2:	d1eb      	bne.n	b1ac <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    b1d4:	4801      	ldr	r0, [pc, #4]	; (b1dc <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    b1d6:	700b      	strb	r3, [r1, #0]
}
    b1d8:	bd70      	pop	{r4, r5, r6, pc}
    b1da:	bf00      	nop
    b1dc:	0bad0000 	.word	0x0bad0000

0000b1e0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    b1e0:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    b1e2:	6803      	ldr	r3, [r0, #0]
    b1e4:	40cb      	lsrs	r3, r1
    b1e6:	07db      	lsls	r3, r3, #31
    b1e8:	d410      	bmi.n	b20c <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    b1ea:	2301      	movs	r3, #1
    b1ec:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    b1ee:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    b1f0:	ea43 0102 	orr.w	r1, r3, r2
    b1f4:	e8d0 4fef 	ldaex	r4, [r0]
    b1f8:	4294      	cmp	r4, r2
    b1fa:	d104      	bne.n	b206 <nrfx_flag32_free+0x26>
    b1fc:	e8c0 1fec 	stlex	ip, r1, [r0]
    b200:	f1bc 0f00 	cmp.w	ip, #0
    b204:	d1f6      	bne.n	b1f4 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    b206:	d1f2      	bne.n	b1ee <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    b208:	4801      	ldr	r0, [pc, #4]	; (b210 <nrfx_flag32_free+0x30>)
}
    b20a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b20c:	4801      	ldr	r0, [pc, #4]	; (b214 <nrfx_flag32_free+0x34>)
    b20e:	e7fc      	b.n	b20a <nrfx_flag32_free+0x2a>
    b210:	0bad0000 	.word	0x0bad0000
    b214:	0bad0004 	.word	0x0bad0004

0000b218 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    b218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    b21a:	4604      	mov	r4, r0
    b21c:	b118      	cbz	r0, b226 <clock_stop+0xe>
    b21e:	2801      	cmp	r0, #1
    b220:	d01e      	beq.n	b260 <clock_stop+0x48>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    b222:	b003      	add	sp, #12
    b224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    b226:	2202      	movs	r2, #2
    b228:	4b27      	ldr	r3, [pc, #156]	; (b2c8 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    b22a:	4607      	mov	r7, r0
    b22c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b230:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    b234:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b238:	2201      	movs	r2, #1
    b23a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    b23c:	2301      	movs	r3, #1
    b23e:	f242 7510 	movw	r5, #10000	; 0x2710
    b242:	4e21      	ldr	r6, [pc, #132]	; (b2c8 <clock_stop+0xb0>)
    b244:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    b248:	b1b4      	cbz	r4, b278 <clock_stop+0x60>
    b24a:	2c01      	cmp	r4, #1
    b24c:	d1e9      	bne.n	b222 <clock_stop+0xa>
            if (p_clk_src != NULL)
    b24e:	b387      	cbz	r7, b2b2 <clock_stop+0x9a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    b250:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    b254:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    b258:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b25a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    b25e:	e013      	b.n	b288 <clock_stop+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b260:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    b262:	4b19      	ldr	r3, [pc, #100]	; (b2c8 <clock_stop+0xb0>)
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    b264:	f10d 0707 	add.w	r7, sp, #7
    b268:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b26c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b270:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b274:	6058      	str	r0, [r3, #4]
    b276:	e7e1      	b.n	b23c <clock_stop+0x24>
            if (p_clk_src != NULL)
    b278:	b18f      	cbz	r7, b29e <clock_stop+0x86>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b27a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    b27e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    b282:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b284:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b288:	03da      	lsls	r2, r3, #15
    b28a:	d5ca      	bpl.n	b222 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    b28c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    b290:	2801      	cmp	r0, #1
    b292:	d1c6      	bne.n	b222 <clock_stop+0xa>
    b294:	f003 fe87 	bl	efa6 <nrfx_busy_wait>
    b298:	3d01      	subs	r5, #1
    b29a:	d1d5      	bne.n	b248 <clock_stop+0x30>
    b29c:	e7c1      	b.n	b222 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b29e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    b2a2:	03d9      	lsls	r1, r3, #15
    b2a4:	d5bd      	bpl.n	b222 <clock_stop+0xa>
    b2a6:	2001      	movs	r0, #1
    b2a8:	f003 fe7d 	bl	efa6 <nrfx_busy_wait>
    b2ac:	3d01      	subs	r5, #1
    b2ae:	d1f6      	bne.n	b29e <clock_stop+0x86>
    b2b0:	e7b7      	b.n	b222 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b2b2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    b2b6:	03db      	lsls	r3, r3, #15
    b2b8:	d5b3      	bpl.n	b222 <clock_stop+0xa>
    b2ba:	2001      	movs	r0, #1
    b2bc:	f003 fe73 	bl	efa6 <nrfx_busy_wait>
    b2c0:	3d01      	subs	r5, #1
    b2c2:	d1f6      	bne.n	b2b2 <clock_stop+0x9a>
    b2c4:	e7ad      	b.n	b222 <clock_stop+0xa>
    b2c6:	bf00      	nop
    b2c8:	40005000 	.word	0x40005000

0000b2cc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    b2cc:	4b04      	ldr	r3, [pc, #16]	; (b2e0 <nrfx_clock_init+0x14>)
    b2ce:	791a      	ldrb	r2, [r3, #4]
    b2d0:	b922      	cbnz	r2, b2dc <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    b2d2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    b2d4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    b2d6:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    b2d8:	4802      	ldr	r0, [pc, #8]	; (b2e4 <nrfx_clock_init+0x18>)
    b2da:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    b2dc:	4802      	ldr	r0, [pc, #8]	; (b2e8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    b2de:	4770      	bx	lr
    b2e0:	2000cb20 	.word	0x2000cb20
    b2e4:	0bad0000 	.word	0x0bad0000
    b2e8:	0bad000c 	.word	0x0bad000c

0000b2ec <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    b2ec:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    b2ee:	2005      	movs	r0, #5
    b2f0:	f7fd ffd8 	bl	92a4 <arch_irq_is_enabled>
    b2f4:	b910      	cbnz	r0, b2fc <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    b2f6:	2005      	movs	r0, #5
    b2f8:	f7fd ffc6 	bl	9288 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    b2fc:	2201      	movs	r2, #1
    b2fe:	4b02      	ldr	r3, [pc, #8]	; (b308 <nrfx_clock_enable+0x1c>)
    b300:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    b304:	bd08      	pop	{r3, pc}
    b306:	bf00      	nop
    b308:	40005000 	.word	0x40005000

0000b30c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    b30c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    b30e:	b110      	cbz	r0, b316 <nrfx_clock_start+0xa>
    b310:	2801      	cmp	r0, #1
    b312:	d02e      	beq.n	b372 <nrfx_clock_start+0x66>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    b314:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b316:	4a1c      	ldr	r2, [pc, #112]	; (b388 <nrfx_clock_start+0x7c>)
    b318:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b31c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    b320:	03c9      	lsls	r1, r1, #15
    b322:	d40e      	bmi.n	b342 <nrfx_clock_start+0x36>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    b324:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    b328:	07db      	lsls	r3, r3, #31
    b32a:	d513      	bpl.n	b354 <nrfx_clock_start+0x48>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b32c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    b330:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    b334:	3b01      	subs	r3, #1
    b336:	2b01      	cmp	r3, #1
    b338:	d809      	bhi.n	b34e <nrfx_clock_start+0x42>
    p_reg->INTENSET = mask;
    b33a:	2302      	movs	r3, #2
    b33c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    b340:	e7e8      	b.n	b314 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b342:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    b346:	2b02      	cmp	r3, #2
    b348:	d005      	beq.n	b356 <nrfx_clock_start+0x4a>
    b34a:	2b01      	cmp	r3, #1
    b34c:	d002      	beq.n	b354 <nrfx_clock_start+0x48>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b34e:	2000      	movs	r0, #0
    b350:	f7ff ff62 	bl	b218 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    b354:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    b356:	4a0c      	ldr	r2, [pc, #48]	; (b388 <nrfx_clock_start+0x7c>)
    b358:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b35c:	2300      	movs	r3, #0
    b35e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    b362:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    b366:	2302      	movs	r3, #2
    b368:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b36c:	2301      	movs	r3, #1
    b36e:	6093      	str	r3, [r2, #8]
}
    b370:	e7d0      	b.n	b314 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b372:	2200      	movs	r2, #0
    b374:	4b04      	ldr	r3, [pc, #16]	; (b388 <nrfx_clock_start+0x7c>)
    b376:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b37a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    b37e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b382:	6018      	str	r0, [r3, #0]
}
    b384:	e7c6      	b.n	b314 <nrfx_clock_start+0x8>
    b386:	bf00      	nop
    b388:	40005000 	.word	0x40005000

0000b38c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    b38c:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b38e:	4b17      	ldr	r3, [pc, #92]	; (b3ec <nrfx_power_clock_irq_handler+0x60>)
    b390:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    b394:	b152      	cbz	r2, b3ac <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b396:	2000      	movs	r0, #0
    b398:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    b39c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    b3a0:	2201      	movs	r2, #1
    b3a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    b3a6:	4b12      	ldr	r3, [pc, #72]	; (b3f0 <nrfx_power_clock_irq_handler+0x64>)
    b3a8:	681b      	ldr	r3, [r3, #0]
    b3aa:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b3ac:	4b0f      	ldr	r3, [pc, #60]	; (b3ec <nrfx_power_clock_irq_handler+0x60>)
    b3ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    b3b2:	b18a      	cbz	r2, b3d8 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b3b4:	2200      	movs	r2, #0
    b3b6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    b3ba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b3be:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b3c2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    b3c6:	f002 0203 	and.w	r2, r2, #3
    b3ca:	2a01      	cmp	r2, #1
    b3cc:	f04f 0102 	mov.w	r1, #2
    b3d0:	d103      	bne.n	b3da <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    b3d2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b3d6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    b3d8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    b3da:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    b3de:	4b04      	ldr	r3, [pc, #16]	; (b3f0 <nrfx_power_clock_irq_handler+0x64>)
    b3e0:	2001      	movs	r0, #1
}
    b3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    b3e6:	681b      	ldr	r3, [r3, #0]
    b3e8:	4718      	bx	r3
    b3ea:	bf00      	nop
    b3ec:	40005000 	.word	0x40005000
    b3f0:	2000cb20 	.word	0x2000cb20

0000b3f4 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    b3f4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    b3f6:	4801      	ldr	r0, [pc, #4]	; (b3fc <nrfx_dppi_channel_alloc+0x8>)
    b3f8:	f7ff bed6 	b.w	b1a8 <nrfx_flag32_alloc>
    b3fc:	2000c680 	.word	0x2000c680

0000b400 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b400:	4a06      	ldr	r2, [pc, #24]	; (b41c <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    b402:	f000 001f 	and.w	r0, r0, #31
    b406:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b40a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
    b40e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    b416:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    b41a:	4770      	bx	lr
    b41c:	40842500 	.word	0x40842500

0000b420 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    b420:	4b03      	ldr	r3, [pc, #12]	; (b430 <pin_in_use_by_te+0x10>)
    b422:	3008      	adds	r0, #8
    b424:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    b428:	f3c0 1040 	ubfx	r0, r0, #5, #1
    b42c:	4770      	bx	lr
    b42e:	bf00      	nop
    b430:	2000c684 	.word	0x2000c684

0000b434 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    b434:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b436:	4c0d      	ldr	r4, [pc, #52]	; (b46c <call_handler+0x38>)
    b438:	f100 0308 	add.w	r3, r0, #8
    b43c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    b440:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b442:	05da      	lsls	r2, r3, #23
{
    b444:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b446:	d507      	bpl.n	b458 <call_handler+0x24>
    b448:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    b44c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    b450:	6852      	ldr	r2, [r2, #4]
    b452:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    b456:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    b458:	68a3      	ldr	r3, [r4, #8]
    b45a:	b12b      	cbz	r3, b468 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    b45c:	4631      	mov	r1, r6
    b45e:	4628      	mov	r0, r5
    b460:	68e2      	ldr	r2, [r4, #12]
    }
}
    b462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    b466:	4718      	bx	r3
}
    b468:	bd70      	pop	{r4, r5, r6, pc}
    b46a:	bf00      	nop
    b46c:	2000c684 	.word	0x2000c684

0000b470 <release_handler>:
{
    b470:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    b472:	4a12      	ldr	r2, [pc, #72]	; (b4bc <release_handler+0x4c>)
    b474:	3008      	adds	r0, #8
    b476:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    b47a:	05d9      	lsls	r1, r3, #23
    b47c:	d51b      	bpl.n	b4b6 <release_handler+0x46>
    b47e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    b482:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    b486:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    b48a:	2000      	movs	r0, #0
    b48c:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    b490:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    b494:	f413 7f80 	tst.w	r3, #256	; 0x100
    b498:	d003      	beq.n	b4a2 <release_handler+0x32>
    b49a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    b49e:	4299      	cmp	r1, r3
    b4a0:	d009      	beq.n	b4b6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    b4a2:	3001      	adds	r0, #1
    b4a4:	2820      	cmp	r0, #32
    b4a6:	d1f3      	bne.n	b490 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    b4a8:	2300      	movs	r3, #0
    b4aa:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    b4ae:	4804      	ldr	r0, [pc, #16]	; (b4c0 <release_handler+0x50>)
}
    b4b0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    b4b2:	f7ff be95 	b.w	b1e0 <nrfx_flag32_free>
}
    b4b6:	bc10      	pop	{r4}
    b4b8:	4770      	bx	lr
    b4ba:	bf00      	nop
    b4bc:	2000c684 	.word	0x2000c684
    b4c0:	2000c6d8 	.word	0x2000c6d8

0000b4c4 <pin_handler_trigger_uninit>:
{
    b4c4:	b538      	push	{r3, r4, r5, lr}
    b4c6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    b4c8:	f7ff ffaa 	bl	b420 <pin_in_use_by_te>
    b4cc:	4c0b      	ldr	r4, [pc, #44]	; (b4fc <pin_handler_trigger_uninit+0x38>)
    b4ce:	f102 0508 	add.w	r5, r2, #8
    b4d2:	b160      	cbz	r0, b4ee <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    b4d4:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b4d6:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    b4da:	0b5b      	lsrs	r3, r3, #13
    b4dc:	009b      	lsls	r3, r3, #2
    b4de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b4e2:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    b4e6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    b4ea:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    b4ee:	4610      	mov	r0, r2
    b4f0:	f7ff ffbe 	bl	b470 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    b4f4:	2300      	movs	r3, #0
    b4f6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    b4fa:	bd38      	pop	{r3, r4, r5, pc}
    b4fc:	2000c684 	.word	0x2000c684

0000b500 <nrfx_gpiote_input_configure>:
{
    b500:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b504:	4604      	mov	r4, r0
    b506:	461d      	mov	r5, r3
    if (p_input_config)
    b508:	b309      	cbz	r1, b54e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b50a:	4f4e      	ldr	r7, [pc, #312]	; (b644 <nrfx_gpiote_input_configure+0x144>)
    b50c:	f100 0808 	add.w	r8, r0, #8
    b510:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    b514:	07b3      	lsls	r3, r6, #30
    b516:	d506      	bpl.n	b526 <nrfx_gpiote_input_configure+0x26>
    b518:	f7ff ff82 	bl	b420 <pin_in_use_by_te>
    b51c:	b118      	cbz	r0, b526 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    b51e:	484a      	ldr	r0, [pc, #296]	; (b648 <nrfx_gpiote_input_configure+0x148>)
}
    b520:	b002      	add	sp, #8
    b522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b526:	4849      	ldr	r0, [pc, #292]	; (b64c <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
    b528:	f004 031f 	and.w	r3, r4, #31
    b52c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b530:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    b534:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    b536:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    b53a:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b53e:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    b542:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    b546:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    b54a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    b54e:	b19a      	cbz	r2, b578 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b550:	4e3c      	ldr	r6, [pc, #240]	; (b644 <nrfx_gpiote_input_configure+0x144>)
    b552:	f104 0708 	add.w	r7, r4, #8
    b556:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    b55a:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
    b55c:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    b560:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
    b562:	d00c      	beq.n	b57e <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
    b564:	2800      	cmp	r0, #0
    b566:	d1da      	bne.n	b51e <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    b568:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    b56c:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    b570:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    b574:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    b578:	bbd5      	cbnz	r5, b5f0 <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
    b57a:	4835      	ldr	r0, [pc, #212]	; (b650 <nrfx_gpiote_input_configure+0x150>)
    b57c:	e7d0      	b.n	b520 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    b57e:	f021 0120 	bic.w	r1, r1, #32
    b582:	04c9      	lsls	r1, r1, #19
    b584:	0cc9      	lsrs	r1, r1, #19
    b586:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    b58a:	2800      	cmp	r0, #0
    b58c:	d0ec      	beq.n	b568 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    b58e:	2b03      	cmp	r3, #3
    b590:	d8c5      	bhi.n	b51e <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    b592:	6852      	ldr	r2, [r2, #4]
    b594:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    b598:	4662      	mov	r2, ip
    b59a:	0092      	lsls	r2, r2, #2
    b59c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    b5a0:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    b5a4:	b923      	cbnz	r3, b5b0 <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
    b5a6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    b5aa:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    b5ae:	e7db      	b.n	b568 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    b5b0:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    b5b4:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    b5b8:	f020 0003 	bic.w	r0, r0, #3
    b5bc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    b5c0:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    b5c4:	f041 0120 	orr.w	r1, r1, #32
    b5c8:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    b5cc:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    b5d0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b5d4:	0220      	lsls	r0, r4, #8
    b5d6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    b5da:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    b5de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    b5e2:	ea40 000e 	orr.w	r0, r0, lr
    b5e6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    b5ea:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    b5ee:	e7bb      	b.n	b568 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
    b5f0:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    b5f2:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    b5f6:	f7ff ff3b 	bl	b470 <release_handler>
    if (!handler)
    b5fa:	2e00      	cmp	r6, #0
    b5fc:	d0bd      	beq.n	b57a <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    b5fe:	4d11      	ldr	r5, [pc, #68]	; (b644 <nrfx_gpiote_input_configure+0x144>)
    b600:	e9d5 2300 	ldrd	r2, r3, [r5]
    b604:	4296      	cmp	r6, r2
    b606:	d101      	bne.n	b60c <nrfx_gpiote_input_configure+0x10c>
    b608:	429f      	cmp	r7, r3
    b60a:	d018      	beq.n	b63e <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    b60c:	4811      	ldr	r0, [pc, #68]	; (b654 <nrfx_gpiote_input_configure+0x154>)
    b60e:	f10d 0107 	add.w	r1, sp, #7
    b612:	f7ff fdc9 	bl	b1a8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    b616:	4b0e      	ldr	r3, [pc, #56]	; (b650 <nrfx_gpiote_input_configure+0x150>)
    b618:	4298      	cmp	r0, r3
    b61a:	d181      	bne.n	b520 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    b61c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    b620:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b624:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    b626:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b628:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    b62c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    b630:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    b634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b638:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    b63c:	e79d      	b.n	b57a <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    b63e:	2200      	movs	r2, #0
    b640:	e7ee      	b.n	b620 <nrfx_gpiote_input_configure+0x120>
    b642:	bf00      	nop
    b644:	2000c684 	.word	0x2000c684
    b648:	0bad0004 	.word	0x0bad0004
    b64c:	40842500 	.word	0x40842500
    b650:	0bad0000 	.word	0x0bad0000
    b654:	2000c6d8 	.word	0x2000c6d8

0000b658 <nrfx_gpiote_output_configure>:
{
    b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b65a:	4604      	mov	r4, r0
    if (p_config)
    b65c:	b379      	cbz	r1, b6be <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b65e:	4e3a      	ldr	r6, [pc, #232]	; (b748 <nrfx_gpiote_output_configure+0xf0>)
    b660:	f100 0708 	add.w	r7, r0, #8
    b664:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    b668:	07ab      	lsls	r3, r5, #30
    b66a:	d404      	bmi.n	b676 <nrfx_gpiote_output_configure+0x1e>
    b66c:	f7ff fed8 	bl	b420 <pin_in_use_by_te>
    b670:	b108      	cbz	r0, b676 <nrfx_gpiote_output_configure+0x1e>
{
    b672:	4836      	ldr	r0, [pc, #216]	; (b74c <nrfx_gpiote_output_configure+0xf4>)
}
    b674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    b676:	f015 0f1c 	tst.w	r5, #28
    b67a:	784b      	ldrb	r3, [r1, #1]
    b67c:	d122      	bne.n	b6c4 <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
    b67e:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b682:	f8df c0cc 	ldr.w	ip, [pc, #204]	; b750 <nrfx_gpiote_output_configure+0xf8>
    b686:	f100 0e80 	add.w	lr, r0, #128	; 0x80
    b68a:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    b68e:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    b692:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    b694:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    b698:	7809      	ldrb	r1, [r1, #0]
    b69a:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
    b69e:	f02c 0c07 	bic.w	ip, ip, #7
    b6a2:	ea43 030c 	orr.w	r3, r3, ip
    b6a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    b6aa:	4929      	ldr	r1, [pc, #164]	; (b750 <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b6ac:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    b6b0:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    b6b2:	f045 0503 	orr.w	r5, r5, #3
    b6b6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    b6ba:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    b6be:	b922      	cbnz	r2, b6ca <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
    b6c0:	4824      	ldr	r0, [pc, #144]	; (b754 <nrfx_gpiote_output_configure+0xfc>)
    b6c2:	e7d7      	b.n	b674 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    b6c4:	2b01      	cmp	r3, #1
    b6c6:	d1da      	bne.n	b67e <nrfx_gpiote_output_configure+0x26>
    b6c8:	e7d3      	b.n	b672 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b6ca:	4e1f      	ldr	r6, [pc, #124]	; (b748 <nrfx_gpiote_output_configure+0xf0>)
    b6cc:	f104 0708 	add.w	r7, r4, #8
    b6d0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    b6d4:	0783      	lsls	r3, r0, #30
    b6d6:	d5cc      	bpl.n	b672 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    b6d8:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    b6dc:	2300      	movs	r3, #0
    b6de:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    b6e0:	f020 0020 	bic.w	r0, r0, #32
    b6e4:	0089      	lsls	r1, r1, #2
    b6e6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b6ea:	04c0      	lsls	r0, r0, #19
    b6ec:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
    b6f0:	0cc0      	lsrs	r0, r0, #19
    b6f2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    b6f6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    b6fa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    b6fe:	7855      	ldrb	r5, [r2, #1]
    b700:	2d00      	cmp	r5, #0
    b702:	d0dd      	beq.n	b6c0 <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    b704:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    b708:	7892      	ldrb	r2, [r2, #2]
    b70a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    b70e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    b712:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b716:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    b71a:	0223      	lsls	r3, r4, #8
    b71c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b720:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b722:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    b726:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    b72a:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b72c:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    b72e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    b732:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    b736:	4313      	orrs	r3, r2
    b738:	f040 0020 	orr.w	r0, r0, #32
    b73c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    b740:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    b744:	e7bc      	b.n	b6c0 <nrfx_gpiote_output_configure+0x68>
    b746:	bf00      	nop
    b748:	2000c684 	.word	0x2000c684
    b74c:	0bad0004 	.word	0x0bad0004
    b750:	40842500 	.word	0x40842500
    b754:	0bad0000 	.word	0x0bad0000

0000b758 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    b758:	4b01      	ldr	r3, [pc, #4]	; (b760 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    b75a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    b75e:	4770      	bx	lr
    b760:	2000c684 	.word	0x2000c684

0000b764 <nrfx_gpiote_channel_get>:
{
    b764:	b508      	push	{r3, lr}
    b766:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    b768:	f7ff fe5a 	bl	b420 <pin_in_use_by_te>
    b76c:	b138      	cbz	r0, b77e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b76e:	4b05      	ldr	r3, [pc, #20]	; (b784 <nrfx_gpiote_channel_get+0x20>)
    b770:	3208      	adds	r2, #8
    b772:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    b776:	4804      	ldr	r0, [pc, #16]	; (b788 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b778:	0b5b      	lsrs	r3, r3, #13
    b77a:	700b      	strb	r3, [r1, #0]
}
    b77c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b77e:	4803      	ldr	r0, [pc, #12]	; (b78c <nrfx_gpiote_channel_get+0x28>)
    b780:	e7fc      	b.n	b77c <nrfx_gpiote_channel_get+0x18>
    b782:	bf00      	nop
    b784:	2000c684 	.word	0x2000c684
    b788:	0bad0000 	.word	0x0bad0000
    b78c:	0bad0004 	.word	0x0bad0004

0000b790 <nrfx_gpiote_init>:
{
    b790:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    b792:	4c0f      	ldr	r4, [pc, #60]	; (b7d0 <nrfx_gpiote_init+0x40>)
    b794:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    b798:	b9bd      	cbnz	r5, b7ca <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    b79a:	2240      	movs	r2, #64	; 0x40
    b79c:	4629      	mov	r1, r5
    b79e:	f104 0010 	add.w	r0, r4, #16
    b7a2:	f003 ffef 	bl	f784 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    b7a6:	2031      	movs	r0, #49	; 0x31
    b7a8:	f7fd fd6e 	bl	9288 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b7ac:	4b09      	ldr	r3, [pc, #36]	; (b7d4 <nrfx_gpiote_init+0x44>)
    return err_code;
    b7ae:	480a      	ldr	r0, [pc, #40]	; (b7d8 <nrfx_gpiote_init+0x48>)
    b7b0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    b7b4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    b7b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b7bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    b7c0:	2301      	movs	r3, #1
    b7c2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    b7c6:	6563      	str	r3, [r4, #84]	; 0x54
}
    b7c8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    b7ca:	4804      	ldr	r0, [pc, #16]	; (b7dc <nrfx_gpiote_init+0x4c>)
    b7cc:	e7fc      	b.n	b7c8 <nrfx_gpiote_init+0x38>
    b7ce:	bf00      	nop
    b7d0:	2000c684 	.word	0x2000c684
    b7d4:	40031000 	.word	0x40031000
    b7d8:	0bad0000 	.word	0x0bad0000
    b7dc:	0bad0005 	.word	0x0bad0005

0000b7e0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    b7e0:	4b03      	ldr	r3, [pc, #12]	; (b7f0 <nrfx_gpiote_is_init+0x10>)
    b7e2:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    b7e6:	3800      	subs	r0, #0
    b7e8:	bf18      	it	ne
    b7ea:	2001      	movne	r0, #1
    b7ec:	4770      	bx	lr
    b7ee:	bf00      	nop
    b7f0:	2000c684 	.word	0x2000c684

0000b7f4 <nrfx_gpiote_channel_free>:
{
    b7f4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    b7f6:	4801      	ldr	r0, [pc, #4]	; (b7fc <nrfx_gpiote_channel_free+0x8>)
    b7f8:	f7ff bcf2 	b.w	b1e0 <nrfx_flag32_free>
    b7fc:	2000c6d4 	.word	0x2000c6d4

0000b800 <nrfx_gpiote_channel_alloc>:
{
    b800:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    b802:	4801      	ldr	r0, [pc, #4]	; (b808 <nrfx_gpiote_channel_alloc+0x8>)
    b804:	f7ff bcd0 	b.w	b1a8 <nrfx_flag32_alloc>
    b808:	2000c6d4 	.word	0x2000c6d4

0000b80c <nrfx_gpiote_trigger_enable>:
{
    b80c:	4602      	mov	r2, r0
    b80e:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b810:	f7ff fe06 	bl	b420 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b814:	4b1b      	ldr	r3, [pc, #108]	; (b884 <nrfx_gpiote_trigger_enable+0x78>)
    b816:	f102 0408 	add.w	r4, r2, #8
    b81a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b81e:	b1c8      	cbz	r0, b854 <nrfx_gpiote_trigger_enable+0x48>
    b820:	f013 0402 	ands.w	r4, r3, #2
    b824:	d116      	bne.n	b854 <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
    b826:	4818      	ldr	r0, [pc, #96]	; (b888 <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b828:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    b82a:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b82c:	5084      	str	r4, [r0, r2]
    b82e:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    b830:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    b834:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    b838:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    b83c:	f040 0001 	orr.w	r0, r0, #1
    b840:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    b844:	b129      	cbz	r1, b852 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    b846:	2201      	movs	r2, #1
    b848:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    b84c:	4a0f      	ldr	r2, [pc, #60]	; (b88c <nrfx_gpiote_trigger_enable+0x80>)
    b84e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    b852:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b854:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    b858:	2b04      	cmp	r3, #4
    b85a:	d00e      	beq.n	b87a <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    b85c:	2b05      	cmp	r3, #5
    b85e:	d00e      	beq.n	b87e <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
    b860:	4b0b      	ldr	r3, [pc, #44]	; (b890 <nrfx_gpiote_trigger_enable+0x84>)
    b862:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    b864:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    b868:	40d9      	lsrs	r1, r3
    b86a:	f001 0101 	and.w	r1, r1, #1
    b86e:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    b870:	4610      	mov	r0, r2
}
    b872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    b876:	f7ff bdc3 	b.w	b400 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    b87a:	2103      	movs	r1, #3
    b87c:	e7f8      	b.n	b870 <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    b87e:	2102      	movs	r1, #2
    b880:	e7f6      	b.n	b870 <nrfx_gpiote_trigger_enable+0x64>
    b882:	bf00      	nop
    b884:	2000c684 	.word	0x2000c684
    b888:	40031100 	.word	0x40031100
    b88c:	40031000 	.word	0x40031000
    b890:	40842500 	.word	0x40842500

0000b894 <nrfx_gpiote_trigger_disable>:
{
    b894:	b508      	push	{r3, lr}
    b896:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b898:	f7ff fdc2 	bl	b420 <pin_in_use_by_te>
    b89c:	b1c0      	cbz	r0, b8d0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    b89e:	4b0f      	ldr	r3, [pc, #60]	; (b8dc <nrfx_gpiote_trigger_disable+0x48>)
    b8a0:	f102 0108 	add.w	r1, r2, #8
    b8a4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    b8a8:	0799      	lsls	r1, r3, #30
    b8aa:	d411      	bmi.n	b8d0 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    b8ac:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    b8ae:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    b8b0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    b8b2:	490b      	ldr	r1, [pc, #44]	; (b8e0 <nrfx_gpiote_trigger_disable+0x4c>)
    b8b4:	009b      	lsls	r3, r3, #2
    b8b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b8ba:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    b8be:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    b8c2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    b8c6:	f022 0203 	bic.w	r2, r2, #3
    b8ca:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    b8ce:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b8d0:	2100      	movs	r1, #0
}
    b8d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b8d6:	4610      	mov	r0, r2
    b8d8:	f7ff bd92 	b.w	b400 <nrf_gpio_cfg_sense_set>
    b8dc:	2000c684 	.word	0x2000c684
    b8e0:	40031000 	.word	0x40031000

0000b8e4 <nrfx_gpiote_pin_uninit>:
{
    b8e4:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    b8e6:	4b0c      	ldr	r3, [pc, #48]	; (b918 <nrfx_gpiote_pin_uninit+0x34>)
    b8e8:	f100 0208 	add.w	r2, r0, #8
    b8ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    b8f0:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    b8f2:	07db      	lsls	r3, r3, #31
    b8f4:	d50d      	bpl.n	b912 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    b8f6:	f7ff ffcd 	bl	b894 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    b8fa:	4620      	mov	r0, r4
    b8fc:	f7ff fde2 	bl	b4c4 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    b900:	2202      	movs	r2, #2
    b902:	4b06      	ldr	r3, [pc, #24]	; (b91c <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    b904:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    b908:	3480      	adds	r4, #128	; 0x80
    b90a:	4805      	ldr	r0, [pc, #20]	; (b920 <nrfx_gpiote_pin_uninit+0x3c>)
    b90c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    b910:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    b912:	4804      	ldr	r0, [pc, #16]	; (b924 <nrfx_gpiote_pin_uninit+0x40>)
    b914:	e7fc      	b.n	b910 <nrfx_gpiote_pin_uninit+0x2c>
    b916:	bf00      	nop
    b918:	2000c684 	.word	0x2000c684
    b91c:	40842500 	.word	0x40842500
    b920:	0bad0000 	.word	0x0bad0000
    b924:	0bad0004 	.word	0x0bad0004

0000b928 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    b928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    b92c:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    b92e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b930:	462c      	mov	r4, r5
{
    b932:	4b4d      	ldr	r3, [pc, #308]	; (ba68 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    b934:	484d      	ldr	r0, [pc, #308]	; (ba6c <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b936:	494e      	ldr	r1, [pc, #312]	; (ba70 <nrfx_gpiote_irq_handler+0x148>)
{
    b938:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b93a:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    b93c:	b136      	cbz	r6, b94c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    b93e:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    b942:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b944:	bf1e      	ittt	ne
    b946:	601c      	strne	r4, [r3, #0]
    b948:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    b94a:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b94c:	3304      	adds	r3, #4
    b94e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    b950:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    b954:	d1f1      	bne.n	b93a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b956:	4f45      	ldr	r7, [pc, #276]	; (ba6c <nrfx_gpiote_irq_handler+0x144>)
    b958:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    b95c:	b193      	cbz	r3, b984 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    b95e:	4e45      	ldr	r6, [pc, #276]	; (ba74 <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    b960:	f10d 090c 	add.w	r9, sp, #12
    b964:	6a33      	ldr	r3, [r6, #32]
    b966:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    b968:	6233      	str	r3, [r6, #32]
    b96a:	f04f 0a01 	mov.w	sl, #1
            while (latch[i])
    b96e:	9803      	ldr	r0, [sp, #12]
    b970:	b970      	cbnz	r0, b990 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    b972:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    b976:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    b97a:	6a33      	ldr	r3, [r6, #32]
    b97c:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    b97e:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    b980:	2b00      	cmp	r3, #0
    b982:	d1f2      	bne.n	b96a <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    b984:	2401      	movs	r4, #1
    while (mask)
    b986:	2d00      	cmp	r5, #0
    b988:	d156      	bne.n	ba38 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    b98a:	b005      	add	sp, #20
    b98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    b990:	fa90 fba0 	rbit	fp, r0
    b994:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b998:	4a37      	ldr	r2, [pc, #220]	; (ba78 <nrfx_gpiote_irq_handler+0x150>)
    b99a:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    b99e:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    b9a2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    b9a6:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    b9aa:	f819 300c 	ldrb.w	r3, [r9, ip]
    b9ae:	fa0a f404 	lsl.w	r4, sl, r4
    b9b2:	ea23 0304 	bic.w	r3, r3, r4
    b9b6:	f809 300c 	strb.w	r3, [r9, ip]
    b9ba:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b9be:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    b9c2:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
    b9c6:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    b9c8:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    b9ca:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    b9ce:	d518      	bpl.n	ba02 <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
    b9d0:	4611      	mov	r1, r2
    b9d2:	4658      	mov	r0, fp
    b9d4:	9301      	str	r3, [sp, #4]
    b9d6:	f7ff fd2d 	bl	b434 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    b9da:	9b01      	ldr	r3, [sp, #4]
    b9dc:	b2e4      	uxtb	r4, r4
    b9de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    b9e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
    b9e6:	429c      	cmp	r4, r3
    b9e8:	d107      	bne.n	b9fa <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    b9ea:	2100      	movs	r1, #0
    b9ec:	4658      	mov	r0, fp
    b9ee:	f7ff fd07 	bl	b400 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    b9f2:	4621      	mov	r1, r4
    b9f4:	4658      	mov	r0, fp
    b9f6:	f7ff fd03 	bl	b400 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    b9fa:	fa0a f00b 	lsl.w	r0, sl, fp
    b9fe:	6230      	str	r0, [r6, #32]
}
    ba00:	e7b5      	b.n	b96e <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    ba02:	2c02      	cmp	r4, #2
    ba04:	d10c      	bne.n	ba20 <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    ba06:	2103      	movs	r1, #3
    ba08:	4658      	mov	r0, fp
    ba0a:	f7ff fcf9 	bl	b400 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    ba0e:	f008 0305 	and.w	r3, r8, #5
    ba12:	2b01      	cmp	r3, #1
    ba14:	d1f1      	bne.n	b9fa <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
    ba16:	4641      	mov	r1, r8
    ba18:	4658      	mov	r0, fp
    ba1a:	f7ff fd0b 	bl	b434 <call_handler>
    ba1e:	e7ec      	b.n	b9fa <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    ba20:	2102      	movs	r1, #2
    ba22:	4658      	mov	r0, fp
    ba24:	9201      	str	r2, [sp, #4]
    ba26:	f7ff fceb 	bl	b400 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    ba2a:	9a01      	ldr	r2, [sp, #4]
    ba2c:	2a03      	cmp	r2, #3
    ba2e:	d0f2      	beq.n	ba16 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    ba30:	2c03      	cmp	r4, #3
    ba32:	d1e2      	bne.n	b9fa <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    ba34:	428a      	cmp	r2, r1
    ba36:	e7ed      	b.n	ba14 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
    ba38:	fa95 f3a5 	rbit	r3, r5
    ba3c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    ba40:	fa04 f203 	lsl.w	r2, r4, r3
    ba44:	009b      	lsls	r3, r3, #2
    ba46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ba4a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    ba4e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    ba52:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    ba56:	f3c0 2004 	ubfx	r0, r0, #8, #5
    ba5a:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    ba5e:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    ba62:	f7ff fce7 	bl	b434 <call_handler>
    ba66:	e78e      	b.n	b986 <nrfx_gpiote_irq_handler+0x5e>
    ba68:	40031100 	.word	0x40031100
    ba6c:	40031000 	.word	0x40031000
    ba70:	40031120 	.word	0x40031120
    ba74:	40842500 	.word	0x40842500
    ba78:	2000c684 	.word	0x2000c684

0000ba7c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    ba7c:	b570      	push	{r4, r5, r6, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    ba7e:	4c08      	ldr	r4, [pc, #32]	; (baa0 <nrfx_ipc_init+0x24>)
{
    ba80:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    ba82:	7923      	ldrb	r3, [r4, #4]
{
    ba84:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    ba86:	b943      	cbnz	r3, ba9a <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
    ba88:	202a      	movs	r0, #42	; 0x2a
    ba8a:	f7fd fbfd 	bl	9288 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    ba8e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
    ba90:	4804      	ldr	r0, [pc, #16]	; (baa4 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    ba92:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
    ba94:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
    ba96:	60a5      	str	r5, [r4, #8]
}
    ba98:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    ba9a:	4803      	ldr	r0, [pc, #12]	; (baa8 <nrfx_ipc_init+0x2c>)
    ba9c:	e7fc      	b.n	ba98 <nrfx_ipc_init+0x1c>
    ba9e:	bf00      	nop
    baa0:	2000cb28 	.word	0x2000cb28
    baa4:	0bad0000 	.word	0x0bad0000
    baa8:	0bad000c 	.word	0x0bad000c

0000baac <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    baac:	2300      	movs	r3, #0
{
    baae:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
    bab0:	4a0d      	ldr	r2, [pc, #52]	; (bae8 <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    bab2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    bab6:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
    baba:	3301      	adds	r3, #1
    babc:	2b08      	cmp	r3, #8
    babe:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
    bac2:	d1f6      	bne.n	bab2 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    bac4:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
    bac6:	4a08      	ldr	r2, [pc, #32]	; (bae8 <nrfx_ipc_config_load+0x3c>)
    bac8:	f100 011c 	add.w	r1, r0, #28
    bacc:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    bad0:	f851 5f04 	ldr.w	r5, [r1, #4]!
    for (i = 0; i < IPC_CONF_NUM; ++i)
    bad4:	3301      	adds	r3, #1
    bad6:	2b08      	cmp	r3, #8
    bad8:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    badc:	d1f6      	bne.n	bacc <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    bade:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
    bae0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    bae4:	bd30      	pop	{r4, r5, pc}
    bae6:	bf00      	nop
    bae8:	4002a000 	.word	0x4002a000

0000baec <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
    baec:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    baee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->SEND_CNF[index] = channels_mask;
    baf2:	4a13      	ldr	r2, [pc, #76]	; (bb40 <nrfx_ipc_uninit+0x54>)
    baf4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    baf8:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
    bafc:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    bb00:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    bb04:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    bb08:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    bb0c:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    bb10:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
    bb14:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
    bb18:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
    bb1c:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
    bb20:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
    bb24:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
    bb28:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
    bb2c:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    bb30:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
    bb34:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
    bb38:	4a02      	ldr	r2, [pc, #8]	; (bb44 <nrfx_ipc_uninit+0x58>)
    bb3a:	7113      	strb	r3, [r2, #4]
}
    bb3c:	4770      	bx	lr
    bb3e:	bf00      	nop
    bb40:	4002a000 	.word	0x4002a000
    bb44:	2000cb28 	.word	0x2000cb28

0000bb48 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    bb48:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    bb4a:	4a02      	ldr	r2, [pc, #8]	; (bb54 <nrfx_ipc_receive_event_enable+0xc>)
    bb4c:	4083      	lsls	r3, r0
    bb4e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    bb52:	4770      	bx	lr
    bb54:	4002a000 	.word	0x4002a000

0000bb58 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    bb58:	2301      	movs	r3, #1
    p_reg->INTENCLR = mask;
    bb5a:	4a02      	ldr	r2, [pc, #8]	; (bb64 <nrfx_ipc_receive_event_disable+0xc>)
    bb5c:	4083      	lsls	r3, r0
    bb5e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    bb62:	4770      	bx	lr
    bb64:	4002a000 	.word	0x4002a000

0000bb68 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t bitmask = events_map;

    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
    bb6a:	2601      	movs	r6, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bb6c:	2700      	movs	r7, #0
    return p_reg->INTPEND;
    bb6e:	4b0b      	ldr	r3, [pc, #44]	; (bb9c <nrfx_ipc_irq_handler+0x34>)
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
    bb70:	4d0b      	ldr	r5, [pc, #44]	; (bba0 <nrfx_ipc_irq_handler+0x38>)
    bb72:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    while (bitmask)
    bb76:	b904      	cbnz	r4, bb7a <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
    bb78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t event_idx = NRF_CTZ(bitmask);
    bb7a:	fa94 f0a4 	rbit	r0, r4
    bb7e:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
    bb82:	fa06 f300 	lsl.w	r3, r6, r0
    bb86:	ea24 0403 	bic.w	r4, r4, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bb8a:	4b06      	ldr	r3, [pc, #24]	; (bba4 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    bb8c:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bb8e:	509f      	str	r7, [r3, r2]
        if (m_ipc_cb.handler)
    bb90:	682b      	ldr	r3, [r5, #0]
    bb92:	2b00      	cmp	r3, #0
    bb94:	d0ef      	beq.n	bb76 <nrfx_ipc_irq_handler+0xe>
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
    bb96:	68a9      	ldr	r1, [r5, #8]
    bb98:	4798      	blx	r3
    bb9a:	e7ec      	b.n	bb76 <nrfx_ipc_irq_handler+0xe>
    bb9c:	4002a000 	.word	0x4002a000
    bba0:	2000cb28 	.word	0x2000cb28
    bba4:	4002a100 	.word	0x4002a100

0000bba8 <rpc_handle_data_message>:
    bba8:	b570      	push	{r4, r5, r6, lr}
    bbaa:	6803      	ldr	r3, [r0, #0]
    bbac:	4604      	mov	r4, r0
    bbae:	3b03      	subs	r3, #3
    bbb0:	b2db      	uxtb	r3, r3
    bbb2:	2b04      	cmp	r3, #4
    bbb4:	d803      	bhi.n	bbbe <rpc_handle_data_message+0x16>
    bbb6:	4a09      	ldr	r2, [pc, #36]	; (bbdc <rpc_handle_data_message+0x34>)
    bbb8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    bbbc:	b92d      	cbnz	r5, bbca <rpc_handle_data_message+0x22>
    bbbe:	68a0      	ldr	r0, [r4, #8]
    bbc0:	b108      	cbz	r0, bbc6 <rpc_handle_data_message+0x1e>
    bbc2:	f000 f819 	bl	bbf8 <rpc_transport_msg_data_rx_free>
    bbc6:	2000      	movs	r0, #0
    bbc8:	bd70      	pop	{r4, r5, r6, pc}
    bbca:	f003 fa45 	bl	f058 <rpc_client_msg_from_rpc_msg_get>
    bbce:	6821      	ldr	r1, [r4, #0]
    bbd0:	462b      	mov	r3, r5
    bbd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bbd6:	0c09      	lsrs	r1, r1, #16
    bbd8:	4718      	bx	r3
    bbda:	bf00      	nop
    bbdc:	0000ff28 	.word	0x0000ff28

0000bbe0 <rpc_transport_msg_alloc>:
    bbe0:	4b01      	ldr	r3, [pc, #4]	; (bbe8 <rpc_transport_msg_alloc+0x8>)
    bbe2:	681b      	ldr	r3, [r3, #0]
    bbe4:	4718      	bx	r3
    bbe6:	bf00      	nop
    bbe8:	2000c6e0 	.word	0x2000c6e0

0000bbec <rpc_transport_msg_rx_free>:
    bbec:	4b01      	ldr	r3, [pc, #4]	; (bbf4 <rpc_transport_msg_rx_free+0x8>)
    bbee:	68db      	ldr	r3, [r3, #12]
    bbf0:	4718      	bx	r3
    bbf2:	bf00      	nop
    bbf4:	2000c6e0 	.word	0x2000c6e0

0000bbf8 <rpc_transport_msg_data_rx_free>:
    bbf8:	4b01      	ldr	r3, [pc, #4]	; (bc00 <rpc_transport_msg_data_rx_free+0x8>)
    bbfa:	695b      	ldr	r3, [r3, #20]
    bbfc:	4718      	bx	r3
    bbfe:	bf00      	nop
    bc00:	2000c6e0 	.word	0x2000c6e0

0000bc04 <rpc_transport_msg_send>:
    bc04:	4b01      	ldr	r3, [pc, #4]	; (bc0c <rpc_transport_msg_send+0x8>)
    bc06:	689b      	ldr	r3, [r3, #8]
    bc08:	4718      	bx	r3
    bc0a:	bf00      	nop
    bc0c:	2000c6e0 	.word	0x2000c6e0

0000bc10 <rpc_transport_ipc_msg_data_tx_size>:
    bc10:	4b01      	ldr	r3, [pc, #4]	; (bc18 <rpc_transport_ipc_msg_data_tx_size+0x8>)
    bc12:	681b      	ldr	r3, [r3, #0]
    bc14:	68d8      	ldr	r0, [r3, #12]
    bc16:	4770      	bx	lr
    bc18:	2000cb34 	.word	0x2000cb34

0000bc1c <rpc_transport_ipc_msg_rx_free>:
    bc1c:	2300      	movs	r3, #0
    bc1e:	b530      	push	{r4, r5, lr}
    bc20:	4910      	ldr	r1, [pc, #64]	; (bc64 <rpc_transport_ipc_msg_rx_free+0x48>)
    bc22:	680a      	ldr	r2, [r1, #0]
    bc24:	6814      	ldr	r4, [r2, #0]
    bc26:	42a3      	cmp	r3, r4
    bc28:	d10b      	bne.n	bc42 <rpc_transport_ipc_msg_rx_free+0x26>
    bc2a:	2300      	movs	r3, #0
    bc2c:	684a      	ldr	r2, [r1, #4]
    bc2e:	6811      	ldr	r1, [r2, #0]
    bc30:	428b      	cmp	r3, r1
    bc32:	d015      	beq.n	bc60 <rpc_transport_ipc_msg_rx_free+0x44>
    bc34:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
    bc38:	68a4      	ldr	r4, [r4, #8]
    bc3a:	42a0      	cmp	r0, r4
    bc3c:	d008      	beq.n	bc50 <rpc_transport_ipc_msg_rx_free+0x34>
    bc3e:	3301      	adds	r3, #1
    bc40:	e7f6      	b.n	bc30 <rpc_transport_ipc_msg_rx_free+0x14>
    bc42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
    bc46:	68ad      	ldr	r5, [r5, #8]
    bc48:	42a8      	cmp	r0, r5
    bc4a:	d001      	beq.n	bc50 <rpc_transport_ipc_msg_rx_free+0x34>
    bc4c:	3301      	adds	r3, #1
    bc4e:	e7ea      	b.n	bc26 <rpc_transport_ipc_msg_rx_free+0xa>
    bc50:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    bc54:	6853      	ldr	r3, [r2, #4]
    bc56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bc5a:	f043 0303 	orr.w	r3, r3, #3
    bc5e:	6053      	str	r3, [r2, #4]
    bc60:	bd30      	pop	{r4, r5, pc}
    bc62:	bf00      	nop
    bc64:	2000cb54 	.word	0x2000cb54

0000bc68 <rpc_transport_ipc_msg_tx_free>:
    bc68:	2200      	movs	r2, #0
    bc6a:	b530      	push	{r4, r5, lr}
    bc6c:	4b0b      	ldr	r3, [pc, #44]	; (bc9c <rpc_transport_ipc_msg_tx_free+0x34>)
    bc6e:	6819      	ldr	r1, [r3, #0]
    bc70:	680c      	ldr	r4, [r1, #0]
    bc72:	4294      	cmp	r4, r2
    bc74:	d00f      	beq.n	bc96 <rpc_transport_ipc_msg_tx_free+0x2e>
    bc76:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    bc7a:	689d      	ldr	r5, [r3, #8]
    bc7c:	42a8      	cmp	r0, r5
    bc7e:	d10b      	bne.n	bc98 <rpc_transport_ipc_msg_tx_free+0x30>
    bc80:	f04f 0203 	mov.w	r2, #3
    bc84:	3304      	adds	r3, #4
    bc86:	e8d3 1fcf 	ldaexb	r1, [r3]
    bc8a:	2900      	cmp	r1, #0
    bc8c:	d103      	bne.n	bc96 <rpc_transport_ipc_msg_tx_free+0x2e>
    bc8e:	e8c3 2fc0 	stlexb	r0, r2, [r3]
    bc92:	2800      	cmp	r0, #0
    bc94:	d1f7      	bne.n	bc86 <rpc_transport_ipc_msg_tx_free+0x1e>
    bc96:	bd30      	pop	{r4, r5, pc}
    bc98:	3201      	adds	r2, #1
    bc9a:	e7ea      	b.n	bc72 <rpc_transport_ipc_msg_tx_free+0xa>
    bc9c:	2000cb4c 	.word	0x2000cb4c

0000bca0 <handle_modem_rpc_msg>:
    bca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bca4:	2500      	movs	r5, #0
    bca6:	4606      	mov	r6, r0
    bca8:	460f      	mov	r7, r1
    bcaa:	4628      	mov	r0, r5
    bcac:	f8df 8064 	ldr.w	r8, [pc, #100]	; bd14 <handle_modem_rpc_msg+0x74>
    bcb0:	6833      	ldr	r3, [r6, #0]
    bcb2:	42ab      	cmp	r3, r5
    bcb4:	d801      	bhi.n	bcba <handle_modem_rpc_msg+0x1a>
    bcb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcba:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
    bcbe:	6863      	ldr	r3, [r4, #4]
    bcc0:	b2db      	uxtb	r3, r3
    bcc2:	2b01      	cmp	r3, #1
    bcc4:	d117      	bne.n	bcf6 <handle_modem_rpc_msg+0x56>
    bcc6:	6862      	ldr	r2, [r4, #4]
    bcc8:	f8b8 3000 	ldrh.w	r3, [r8]
    bccc:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
    bcd0:	d111      	bne.n	bcf6 <handle_modem_rpc_msg+0x56>
    bcd2:	2f02      	cmp	r7, #2
    bcd4:	68a0      	ldr	r0, [r4, #8]
    bcd6:	d110      	bne.n	bcfa <handle_modem_rpc_msg+0x5a>
    bcd8:	f7ff ff66 	bl	bba8 <rpc_handle_data_message>
    bcdc:	b990      	cbnz	r0, bd04 <handle_modem_rpc_msg+0x64>
    bcde:	6863      	ldr	r3, [r4, #4]
    bce0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bce4:	f043 0303 	orr.w	r3, r3, #3
    bce8:	6063      	str	r3, [r4, #4]
    bcea:	2001      	movs	r0, #1
    bcec:	f8b8 3000 	ldrh.w	r3, [r8]
    bcf0:	3301      	adds	r3, #1
    bcf2:	f8a8 3000 	strh.w	r3, [r8]
    bcf6:	3501      	adds	r5, #1
    bcf8:	e7da      	b.n	bcb0 <handle_modem_rpc_msg+0x10>
    bcfa:	6801      	ldr	r1, [r0, #0]
    bcfc:	0c09      	lsrs	r1, r1, #16
    bcfe:	f003 f956 	bl	efae <rpc_handle_ctrl_message>
    bd02:	e7eb      	b.n	bcdc <handle_modem_rpc_msg+0x3c>
    bd04:	2801      	cmp	r0, #1
    bd06:	d1f0      	bne.n	bcea <handle_modem_rpc_msg+0x4a>
    bd08:	6863      	ldr	r3, [r4, #4]
    bd0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bd0e:	f043 0302 	orr.w	r3, r3, #2
    bd12:	e7e9      	b.n	bce8 <handle_modem_rpc_msg+0x48>
    bd14:	2000cf0c 	.word	0x2000cf0c

0000bd18 <rpc_message_handler>:
    bd18:	b538      	push	{r3, r4, r5, lr}
    bd1a:	4d07      	ldr	r5, [pc, #28]	; (bd38 <rpc_message_handler+0x20>)
    bd1c:	2101      	movs	r1, #1
    bd1e:	6828      	ldr	r0, [r5, #0]
    bd20:	f7ff ffbe 	bl	bca0 <handle_modem_rpc_msg>
    bd24:	2102      	movs	r1, #2
    bd26:	4604      	mov	r4, r0
    bd28:	6868      	ldr	r0, [r5, #4]
    bd2a:	f7ff ffb9 	bl	bca0 <handle_modem_rpc_msg>
    bd2e:	2800      	cmp	r0, #0
    bd30:	d1f4      	bne.n	bd1c <rpc_message_handler+0x4>
    bd32:	2c00      	cmp	r4, #0
    bd34:	d1f2      	bne.n	bd1c <rpc_message_handler+0x4>
    bd36:	bd38      	pop	{r3, r4, r5, pc}
    bd38:	2000cb54 	.word	0x2000cb54

0000bd3c <ipc_irq_handler>:
    bd3c:	b570      	push	{r4, r5, r6, lr}
    bd3e:	2807      	cmp	r0, #7
    bd40:	d868      	bhi.n	be14 <ipc_irq_handler+0xd8>
    bd42:	e8df f000 	tbb	[pc, r0]
    bd46:	670b      	.short	0x670b
    bd48:	674b674f 	.word	0x674b674f
    bd4c:	0440      	.short	0x0440
    bd4e:	f000 fe27 	bl	c9a0 <ipc_trace_handler>
    bd52:	2003      	movs	r0, #3
    bd54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bd58:	f7ff b96c 	b.w	b034 <nrf_modem_os_event_notify>
    bd5c:	2003      	movs	r0, #3
    bd5e:	4b2e      	ldr	r3, [pc, #184]	; (be18 <ipc_irq_handler+0xdc>)
    bd60:	f8d3 4614 	ldr.w	r4, [r3, #1556]	; 0x614
    bd64:	f8d3 6618 	ldr.w	r6, [r3, #1560]	; 0x618
    bd68:	4b2c      	ldr	r3, [pc, #176]	; (be1c <ipc_irq_handler+0xe0>)
    bd6a:	781d      	ldrb	r5, [r3, #0]
    bd6c:	7018      	strb	r0, [r3, #0]
    bd6e:	f000 fded 	bl	c94c <nrf_modem_state_set>
    bd72:	4b2b      	ldr	r3, [pc, #172]	; (be20 <ipc_irq_handler+0xe4>)
    bd74:	b2ed      	uxtb	r5, r5
    bd76:	6818      	ldr	r0, [r3, #0]
    bd78:	f003 f8e9 	bl	ef4e <nrf_modem_os_sem_give>
    bd7c:	2d01      	cmp	r5, #1
    bd7e:	d11c      	bne.n	bdba <ipc_irq_handler+0x7e>
    bd80:	4b28      	ldr	r3, [pc, #160]	; (be24 <ipc_irq_handler+0xe8>)
    bd82:	429c      	cmp	r4, r3
    bd84:	d010      	beq.n	bda8 <ipc_irq_handler+0x6c>
    bd86:	d809      	bhi.n	bd9c <ipc_irq_handler+0x60>
    bd88:	3b02      	subs	r3, #2
    bd8a:	429c      	cmp	r4, r3
    bd8c:	d00f      	beq.n	bdae <ipc_irq_handler+0x72>
    bd8e:	3301      	adds	r3, #1
    bd90:	429c      	cmp	r4, r3
    bd92:	d00f      	beq.n	bdb4 <ipc_irq_handler+0x78>
    bd94:	4b24      	ldr	r3, [pc, #144]	; (be28 <ipc_irq_handler+0xec>)
    bd96:	601c      	str	r4, [r3, #0]
    bd98:	2000      	movs	r0, #0
    bd9a:	e7db      	b.n	bd54 <ipc_irq_handler+0x18>
    bd9c:	4b23      	ldr	r3, [pc, #140]	; (be2c <ipc_irq_handler+0xf0>)
    bd9e:	429c      	cmp	r4, r3
    bda0:	d1f8      	bne.n	bd94 <ipc_irq_handler+0x58>
    bda2:	f06f 040c 	mvn.w	r4, #12
    bda6:	e7f5      	b.n	bd94 <ipc_irq_handler+0x58>
    bda8:	f06f 040b 	mvn.w	r4, #11
    bdac:	e7f2      	b.n	bd94 <ipc_irq_handler+0x58>
    bdae:	f06f 0415 	mvn.w	r4, #21
    bdb2:	e7ef      	b.n	bd94 <ipc_irq_handler+0x58>
    bdb4:	f06f 0485 	mvn.w	r4, #133	; 0x85
    bdb8:	e7ec      	b.n	bd94 <ipc_irq_handler+0x58>
    bdba:	4631      	mov	r1, r6
    bdbc:	f3c4 000b 	ubfx	r0, r4, #0, #12
    bdc0:	f000 fdb8 	bl	c934 <nrf_modem_fault_handler_internal>
    bdc4:	e7e8      	b.n	bd98 <ipc_irq_handler+0x5c>
    bdc6:	2202      	movs	r2, #2
    bdc8:	4b14      	ldr	r3, [pc, #80]	; (be1c <ipc_irq_handler+0xe0>)
    bdca:	2000      	movs	r0, #0
    bdcc:	701a      	strb	r2, [r3, #0]
    bdce:	f000 fdbd 	bl	c94c <nrf_modem_state_set>
    bdd2:	4b13      	ldr	r3, [pc, #76]	; (be20 <ipc_irq_handler+0xe4>)
    bdd4:	6818      	ldr	r0, [r3, #0]
    bdd6:	f003 f8ba 	bl	ef4e <nrf_modem_os_sem_give>
    bdda:	e7dd      	b.n	bd98 <ipc_irq_handler+0x5c>
    bddc:	f7ff ff9c 	bl	bd18 <rpc_message_handler>
    bde0:	2002      	movs	r0, #2
    bde2:	e7b7      	b.n	bd54 <ipc_irq_handler+0x18>
    bde4:	4b0d      	ldr	r3, [pc, #52]	; (be1c <ipc_irq_handler+0xe0>)
    bde6:	781a      	ldrb	r2, [r3, #0]
    bde8:	2a01      	cmp	r2, #1
    bdea:	b2d0      	uxtb	r0, r2
    bdec:	d10e      	bne.n	be0c <ipc_irq_handler+0xd0>
    bdee:	4a10      	ldr	r2, [pc, #64]	; (be30 <ipc_irq_handler+0xf4>)
    bdf0:	6811      	ldr	r1, [r2, #0]
    bdf2:	4a10      	ldr	r2, [pc, #64]	; (be34 <ipc_irq_handler+0xf8>)
    bdf4:	688c      	ldr	r4, [r1, #8]
    bdf6:	6054      	str	r4, [r2, #4]
    bdf8:	6849      	ldr	r1, [r1, #4]
    bdfa:	6011      	str	r1, [r2, #0]
    bdfc:	2200      	movs	r2, #0
    bdfe:	701a      	strb	r2, [r3, #0]
    be00:	f000 fda4 	bl	c94c <nrf_modem_state_set>
    be04:	4b06      	ldr	r3, [pc, #24]	; (be20 <ipc_irq_handler+0xe4>)
    be06:	6818      	ldr	r0, [r3, #0]
    be08:	f003 f8a1 	bl	ef4e <nrf_modem_os_sem_give>
    be0c:	f7ff ff84 	bl	bd18 <rpc_message_handler>
    be10:	2001      	movs	r0, #1
    be12:	e79f      	b.n	bd54 <ipc_irq_handler+0x18>
    be14:	bd70      	pop	{r4, r5, r6, pc}
    be16:	bf00      	nop
    be18:	4002a000 	.word	0x4002a000
    be1c:	2000cf27 	.word	0x2000cf27
    be20:	2000cb3c 	.word	0x2000cb3c
    be24:	00010022 	.word	0x00010022
    be28:	2000cb50 	.word	0x2000cb50
    be2c:	00013032 	.word	0x00013032
    be30:	2000cb38 	.word	0x2000cb38
    be34:	2000cb54 	.word	0x2000cb54

0000be38 <rpc_transport_ipc_data_msg_send>:
    be38:	b570      	push	{r4, r5, r6, lr}
    be3a:	4b16      	ldr	r3, [pc, #88]	; (be94 <rpc_transport_ipc_data_msg_send+0x5c>)
    be3c:	6842      	ldr	r2, [r0, #4]
    be3e:	681b      	ldr	r3, [r3, #0]
    be40:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    be44:	f042 0202 	orr.w	r2, r2, #2
    be48:	1ac3      	subs	r3, r0, r3
    be4a:	6042      	str	r2, [r0, #4]
    be4c:	4812      	ldr	r0, [pc, #72]	; (be98 <rpc_transport_ipc_data_msg_send+0x60>)
    be4e:	4a13      	ldr	r2, [pc, #76]	; (be9c <rpc_transport_ipc_data_msg_send+0x64>)
    be50:	6801      	ldr	r1, [r0, #0]
    be52:	f3c3 1389 	ubfx	r3, r3, #6, #10
    be56:	e8d2 4fdf 	ldaexh	r4, [r2]
    be5a:	1c65      	adds	r5, r4, #1
    be5c:	e8c2 5fd6 	stlexh	r6, r5, [r2]
    be60:	2e00      	cmp	r6, #0
    be62:	d1f8      	bne.n	be56 <rpc_transport_ipc_data_msg_send+0x1e>
    be64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    be68:	684a      	ldr	r2, [r1, #4]
    be6a:	b292      	uxth	r2, r2
    be6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    be70:	604a      	str	r2, [r1, #4]
    be72:	6802      	ldr	r2, [r0, #0]
    be74:	2003      	movs	r0, #3
    be76:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    be7a:	6853      	ldr	r3, [r2, #4]
    be7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    be80:	f043 0301 	orr.w	r3, r3, #1
    be84:	6053      	str	r3, [r2, #4]
    be86:	f003 f858 	bl	ef3a <nrf_modem_os_busywait>
    be8a:	2201      	movs	r2, #1
    be8c:	4b04      	ldr	r3, [pc, #16]	; (bea0 <rpc_transport_ipc_data_msg_send+0x68>)
    be8e:	60da      	str	r2, [r3, #12]
    be90:	bd70      	pop	{r4, r5, r6, pc}
    be92:	bf00      	nop
    be94:	2000cb44 	.word	0x2000cb44
    be98:	2000cb4c 	.word	0x2000cb4c
    be9c:	2000cf0e 	.word	0x2000cf0e
    bea0:	4002a000 	.word	0x4002a000

0000bea4 <rpc_transport_ipc_ctrl_msg_alloc>:
    bea4:	230a      	movs	r3, #10
    bea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bea8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    beac:	4e0c      	ldr	r6, [pc, #48]	; (bee0 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
    beae:	4f0d      	ldr	r7, [pc, #52]	; (bee4 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
    beb0:	9301      	str	r3, [sp, #4]
    beb2:	6831      	ldr	r1, [r6, #0]
    beb4:	6838      	ldr	r0, [r7, #0]
    beb6:	f003 f8aa 	bl	f00e <rpc_transport_ipc_msg_alloc>
    beba:	4604      	mov	r4, r0
    bebc:	b940      	cbnz	r0, bed0 <rpc_transport_ipc_ctrl_msg_alloc+0x2c>
    bebe:	f003 f844 	bl	ef4a <nrf_modem_os_is_in_isr>
    bec2:	b940      	cbnz	r0, bed6 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
    bec4:	2001      	movs	r0, #1
    bec6:	a901      	add	r1, sp, #4
    bec8:	f7fe ffd8 	bl	ae7c <nrf_modem_os_timedwait>
    becc:	306e      	adds	r0, #110	; 0x6e
    bece:	d1f0      	bne.n	beb2 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
    bed0:	4620      	mov	r0, r4
    bed2:	b003      	add	sp, #12
    bed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bed6:	9801      	ldr	r0, [sp, #4]
    bed8:	4368      	muls	r0, r5
    beda:	f003 f82e 	bl	ef3a <nrf_modem_os_busywait>
    bede:	e7e8      	b.n	beb2 <rpc_transport_ipc_ctrl_msg_alloc+0xe>
    bee0:	2000cb40 	.word	0x2000cb40
    bee4:	2000cb48 	.word	0x2000cb48

0000bee8 <rpc_transport_ipc_data_msg_alloc>:
    bee8:	4b05      	ldr	r3, [pc, #20]	; (bf00 <rpc_transport_ipc_data_msg_alloc+0x18>)
    beea:	781b      	ldrb	r3, [r3, #0]
    beec:	b92b      	cbnz	r3, befa <rpc_transport_ipc_data_msg_alloc+0x12>
    beee:	4b05      	ldr	r3, [pc, #20]	; (bf04 <rpc_transport_ipc_data_msg_alloc+0x1c>)
    bef0:	6819      	ldr	r1, [r3, #0]
    bef2:	4b05      	ldr	r3, [pc, #20]	; (bf08 <rpc_transport_ipc_data_msg_alloc+0x20>)
    bef4:	6818      	ldr	r0, [r3, #0]
    bef6:	f003 b88a 	b.w	f00e <rpc_transport_ipc_msg_alloc>
    befa:	2000      	movs	r0, #0
    befc:	4770      	bx	lr
    befe:	bf00      	nop
    bf00:	2000cf26 	.word	0x2000cf26
    bf04:	2000cb44 	.word	0x2000cb44
    bf08:	2000cb4c 	.word	0x2000cb4c

0000bf0c <rpc_transport_ipc_init>:
    bf0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf10:	b095      	sub	sp, #84	; 0x54
    bf12:	2238      	movs	r2, #56	; 0x38
    bf14:	2100      	movs	r1, #0
    bf16:	4606      	mov	r6, r0
    bf18:	a803      	add	r0, sp, #12
    bf1a:	f003 fc33 	bl	f784 <memset>
    bf1e:	2302      	movs	r3, #2
    bf20:	9304      	str	r3, [sp, #16]
    bf22:	2308      	movs	r3, #8
    bf24:	9306      	str	r3, [sp, #24]
    bf26:	2320      	movs	r3, #32
    bf28:	9308      	str	r3, [sp, #32]
    bf2a:	2304      	movs	r3, #4
    bf2c:	930d      	str	r3, [sp, #52]	; 0x34
    bf2e:	2310      	movs	r3, #16
    bf30:	2540      	movs	r5, #64	; 0x40
    bf32:	930f      	str	r3, [sp, #60]	; 0x3c
    bf34:	2380      	movs	r3, #128	; 0x80
    bf36:	2201      	movs	r2, #1
    bf38:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
    bf3c:	23d5      	movs	r3, #213	; 0xd5
    bf3e:	2100      	movs	r1, #0
    bf40:	4855      	ldr	r0, [pc, #340]	; (c098 <rpc_transport_ipc_init+0x18c>)
    bf42:	920b      	str	r2, [sp, #44]	; 0x2c
    bf44:	9313      	str	r3, [sp, #76]	; 0x4c
    bf46:	f7ff f85b 	bl	b000 <nrf_modem_os_sem_init>
    bf4a:	4605      	mov	r5, r0
    bf4c:	2800      	cmp	r0, #0
    bf4e:	f040 809f 	bne.w	c090 <rpc_transport_ipc_init+0x184>
    bf52:	4602      	mov	r2, r0
    bf54:	4951      	ldr	r1, [pc, #324]	; (c09c <rpc_transport_ipc_init+0x190>)
    bf56:	7930      	ldrb	r0, [r6, #4]
    bf58:	f7ff fd90 	bl	ba7c <nrfx_ipc_init>
    bf5c:	a803      	add	r0, sp, #12
    bf5e:	f7ff fda5 	bl	baac <nrfx_ipc_config_load>
    bf62:	6834      	ldr	r4, [r6, #0]
    bf64:	6862      	ldr	r2, [r4, #4]
    bf66:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
    bf6a:	f040 8089 	bne.w	c080 <rpc_transport_ipc_init+0x174>
    bf6e:	6961      	ldr	r1, [r4, #20]
    bf70:	68e3      	ldr	r3, [r4, #12]
    bf72:	440b      	add	r3, r1
    bf74:	69e1      	ldr	r1, [r4, #28]
    bf76:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
    bf7a:	440b      	add	r3, r1
    bf7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    bf80:	d87e      	bhi.n	c080 <rpc_transport_ipc_init+0x174>
    bf82:	6820      	ldr	r0, [r4, #0]
    bf84:	4629      	mov	r1, r5
    bf86:	f003 fbfd 	bl	f784 <memset>
    bf8a:	6833      	ldr	r3, [r6, #0]
    bf8c:	681c      	ldr	r4, [r3, #0]
    bf8e:	f8d3 901c 	ldr.w	r9, [r3, #28]
    bf92:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
    bf96:	9201      	str	r2, [sp, #4]
    bf98:	f104 0760 	add.w	r7, r4, #96	; 0x60
    bf9c:	4a40      	ldr	r2, [pc, #256]	; (c0a0 <rpc_transport_ipc_init+0x194>)
    bf9e:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
    bfa2:	f104 0b20 	add.w	fp, r4, #32
    bfa6:	f1b9 0f00 	cmp.w	r9, #0
    bfaa:	d15c      	bne.n	c066 <rpc_transport_ipc_init+0x15a>
    bfac:	f8c2 b000 	str.w	fp, [r2]
    bfb0:	2500      	movs	r5, #0
    bfb2:	f04f 0a01 	mov.w	sl, #1
    bfb6:	7025      	strb	r5, [r4, #0]
    bfb8:	7065      	strb	r5, [r4, #1]
    bfba:	f884 a002 	strb.w	sl, [r4, #2]
    bfbe:	70e5      	strb	r5, [r4, #3]
    bfc0:	6833      	ldr	r3, [r6, #0]
    bfc2:	4640      	mov	r0, r8
    bfc4:	691b      	ldr	r3, [r3, #16]
    bfc6:	6063      	str	r3, [r4, #4]
    bfc8:	6833      	ldr	r3, [r6, #0]
    bfca:	695b      	ldr	r3, [r3, #20]
    bfcc:	f8c4 b014 	str.w	fp, [r4, #20]
    bfd0:	60a3      	str	r3, [r4, #8]
    bfd2:	4b34      	ldr	r3, [pc, #208]	; (c0a4 <rpc_transport_ipc_init+0x198>)
    bfd4:	f8c4 9018 	str.w	r9, [r4, #24]
    bfd8:	f8c3 8000 	str.w	r8, [r3]
    bfdc:	4b32      	ldr	r3, [pc, #200]	; (c0a8 <rpc_transport_ipc_init+0x19c>)
    bfde:	60e7      	str	r7, [r4, #12]
    bfe0:	601f      	str	r7, [r3, #0]
    bfe2:	2308      	movs	r3, #8
    bfe4:	f8c4 8010 	str.w	r8, [r4, #16]
    bfe8:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
    bfec:	f888 5001 	strb.w	r5, [r8, #1]
    bff0:	f888 5002 	strb.w	r5, [r8, #2]
    bff4:	f888 5003 	strb.w	r5, [r8, #3]
    bff8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    bffc:	707d      	strb	r5, [r7, #1]
    bffe:	70bd      	strb	r5, [r7, #2]
    c000:	70fd      	strb	r5, [r7, #3]
    c002:	f002 ffec 	bl	efde <rpc_list_preambles_init>
    c006:	4638      	mov	r0, r7
    c008:	f002 ffe9 	bl	efde <rpc_list_preambles_init>
    c00c:	4b27      	ldr	r3, [pc, #156]	; (c0ac <rpc_transport_ipc_init+0x1a0>)
    c00e:	f504 723a 	add.w	r2, r4, #744	; 0x2e8
    c012:	601a      	str	r2, [r3, #0]
    c014:	4b26      	ldr	r3, [pc, #152]	; (c0b0 <rpc_transport_ipc_init+0x1a4>)
    c016:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
    c01a:	601a      	str	r2, [r3, #0]
    c01c:	6831      	ldr	r1, [r6, #0]
    c01e:	4b25      	ldr	r3, [pc, #148]	; (c0b4 <rpc_transport_ipc_init+0x1a8>)
    c020:	6019      	str	r1, [r3, #0]
    c022:	4b25      	ldr	r3, [pc, #148]	; (c0b8 <rpc_transport_ipc_init+0x1ac>)
    c024:	4925      	ldr	r1, [pc, #148]	; (c0bc <rpc_transport_ipc_init+0x1b0>)
    c026:	f8c3 4610 	str.w	r4, [r3, #1552]	; 0x610
    c02a:	f8c3 5614 	str.w	r5, [r3, #1556]	; 0x614
    c02e:	4b24      	ldr	r3, [pc, #144]	; (c0c0 <rpc_transport_ipc_init+0x1b4>)
    c030:	4c24      	ldr	r4, [pc, #144]	; (c0c4 <rpc_transport_ipc_init+0x1b8>)
    c032:	801d      	strh	r5, [r3, #0]
    c034:	4b24      	ldr	r3, [pc, #144]	; (c0c8 <rpc_transport_ipc_init+0x1bc>)
    c036:	6025      	str	r5, [r4, #0]
    c038:	801d      	strh	r5, [r3, #0]
    c03a:	4b24      	ldr	r3, [pc, #144]	; (c0cc <rpc_transport_ipc_init+0x1c0>)
    c03c:	f883 a000 	strb.w	sl, [r3]
    c040:	4b23      	ldr	r3, [pc, #140]	; (c0d0 <rpc_transport_ipc_init+0x1c4>)
    c042:	9502      	str	r5, [sp, #8]
    c044:	611d      	str	r5, [r3, #16]
    c046:	691b      	ldr	r3, [r3, #16]
    c048:	9302      	str	r3, [sp, #8]
    c04a:	9b02      	ldr	r3, [sp, #8]
    c04c:	4b12      	ldr	r3, [pc, #72]	; (c098 <rpc_transport_ipc_init+0x18c>)
    c04e:	6818      	ldr	r0, [r3, #0]
    c050:	f002 ff7f 	bl	ef52 <nrf_modem_os_sem_take>
    c054:	b9c8      	cbnz	r0, c08a <rpc_transport_ipc_init+0x17e>
    c056:	6824      	ldr	r4, [r4, #0]
    c058:	b9a4      	cbnz	r4, c084 <rpc_transport_ipc_init+0x178>
    c05a:	4b1e      	ldr	r3, [pc, #120]	; (c0d4 <rpc_transport_ipc_init+0x1c8>)
    c05c:	701c      	strb	r4, [r3, #0]
    c05e:	4620      	mov	r0, r4
    c060:	b015      	add	sp, #84	; 0x54
    c062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c066:	699b      	ldr	r3, [r3, #24]
    c068:	f104 0940 	add.w	r9, r4, #64	; 0x40
    c06c:	6463      	str	r3, [r4, #68]	; 0x44
    c06e:	6833      	ldr	r3, [r6, #0]
    c070:	4648      	mov	r0, r9
    c072:	69db      	ldr	r3, [r3, #28]
    c074:	f8c2 b000 	str.w	fp, [r2]
    c078:	6423      	str	r3, [r4, #64]	; 0x40
    c07a:	f000 fc75 	bl	c968 <ipc_trace_init>
    c07e:	e797      	b.n	bfb0 <rpc_transport_ipc_init+0xa4>
    c080:	f06f 0415 	mvn.w	r4, #21
    c084:	f7ff fd32 	bl	baec <nrfx_ipc_uninit>
    c088:	e7e9      	b.n	c05e <rpc_transport_ipc_init+0x152>
    c08a:	f06f 0473 	mvn.w	r4, #115	; 0x73
    c08e:	e7f9      	b.n	c084 <rpc_transport_ipc_init+0x178>
    c090:	f06f 042d 	mvn.w	r4, #45	; 0x2d
    c094:	e7e3      	b.n	c05e <rpc_transport_ipc_init+0x152>
    c096:	bf00      	nop
    c098:	2000cb3c 	.word	0x2000cb3c
    c09c:	0000bd3d 	.word	0x0000bd3d
    c0a0:	2000cb38 	.word	0x2000cb38
    c0a4:	2000cb4c 	.word	0x2000cb4c
    c0a8:	2000cb48 	.word	0x2000cb48
    c0ac:	2000cb44 	.word	0x2000cb44
    c0b0:	2000cb40 	.word	0x2000cb40
    c0b4:	2000cb34 	.word	0x2000cb34
    c0b8:	4002a000 	.word	0x4002a000
    c0bc:	000249f0 	.word	0x000249f0
    c0c0:	2000cf0e 	.word	0x2000cf0e
    c0c4:	2000cb50 	.word	0x2000cb50
    c0c8:	2000cf0c 	.word	0x2000cf0c
    c0cc:	2000cf27 	.word	0x2000cf27
    c0d0:	40005600 	.word	0x40005600
    c0d4:	2000cf26 	.word	0x2000cf26

0000c0d8 <rpc_transport_ipc_ctrl_msg_send>:
    c0d8:	b570      	push	{r4, r5, r6, lr}
    c0da:	4b16      	ldr	r3, [pc, #88]	; (c134 <rpc_transport_ipc_ctrl_msg_send+0x5c>)
    c0dc:	6842      	ldr	r2, [r0, #4]
    c0de:	681b      	ldr	r3, [r3, #0]
    c0e0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    c0e4:	f042 0201 	orr.w	r2, r2, #1
    c0e8:	1ac3      	subs	r3, r0, r3
    c0ea:	6042      	str	r2, [r0, #4]
    c0ec:	4812      	ldr	r0, [pc, #72]	; (c138 <rpc_transport_ipc_ctrl_msg_send+0x60>)
    c0ee:	4a13      	ldr	r2, [pc, #76]	; (c13c <rpc_transport_ipc_ctrl_msg_send+0x64>)
    c0f0:	6801      	ldr	r1, [r0, #0]
    c0f2:	f3c3 1389 	ubfx	r3, r3, #6, #10
    c0f6:	e8d2 4fdf 	ldaexh	r4, [r2]
    c0fa:	1c65      	adds	r5, r4, #1
    c0fc:	e8c2 5fd6 	stlexh	r6, r5, [r2]
    c100:	2e00      	cmp	r6, #0
    c102:	d1f8      	bne.n	c0f6 <rpc_transport_ipc_ctrl_msg_send+0x1e>
    c104:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    c108:	684a      	ldr	r2, [r1, #4]
    c10a:	b292      	uxth	r2, r2
    c10c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    c110:	604a      	str	r2, [r1, #4]
    c112:	6802      	ldr	r2, [r0, #0]
    c114:	2003      	movs	r0, #3
    c116:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    c11a:	6853      	ldr	r3, [r2, #4]
    c11c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c120:	f043 0301 	orr.w	r3, r3, #1
    c124:	6053      	str	r3, [r2, #4]
    c126:	f002 ff08 	bl	ef3a <nrf_modem_os_busywait>
    c12a:	2201      	movs	r2, #1
    c12c:	4b04      	ldr	r3, [pc, #16]	; (c140 <rpc_transport_ipc_ctrl_msg_send+0x68>)
    c12e:	605a      	str	r2, [r3, #4]
    c130:	bd70      	pop	{r4, r5, r6, pc}
    c132:	bf00      	nop
    c134:	2000cb40 	.word	0x2000cb40
    c138:	2000cb48 	.word	0x2000cb48
    c13c:	2000cf0e 	.word	0x2000cf0e
    c140:	4002a000 	.word	0x4002a000

0000c144 <rpc_transport_ipc_request_shutdown>:
    c144:	b510      	push	{r4, lr}
    c146:	f7ff fead 	bl	bea4 <rpc_transport_ipc_ctrl_msg_alloc>
    c14a:	2401      	movs	r4, #1
    c14c:	2200      	movs	r2, #0
    c14e:	2103      	movs	r1, #3
    c150:	7004      	strb	r4, [r0, #0]
    c152:	7081      	strb	r1, [r0, #2]
    c154:	7042      	strb	r2, [r0, #1]
    c156:	70c2      	strb	r2, [r0, #3]
    c158:	f7ff ffbe 	bl	c0d8 <rpc_transport_ipc_ctrl_msg_send>
    c15c:	4b05      	ldr	r3, [pc, #20]	; (c174 <rpc_transport_ipc_request_shutdown+0x30>)
    c15e:	701c      	strb	r4, [r3, #0]
    c160:	f002 ff50 	bl	f004 <rpc_transport_ipc_data_rx_suspend>
    c164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c168:	4b03      	ldr	r3, [pc, #12]	; (c178 <rpc_transport_ipc_request_shutdown+0x34>)
    c16a:	f247 5130 	movw	r1, #30000	; 0x7530
    c16e:	6818      	ldr	r0, [r3, #0]
    c170:	f002 beef 	b.w	ef52 <nrf_modem_os_sem_take>
    c174:	2000cf26 	.word	0x2000cf26
    c178:	2000cb3c 	.word	0x2000cb3c

0000c17c <rpc_transport_ipc_msg_data_rx_free>:
    c17c:	b510      	push	{r4, lr}
    c17e:	4b0a      	ldr	r3, [pc, #40]	; (c1a8 <rpc_transport_ipc_msg_data_rx_free+0x2c>)
    c180:	4604      	mov	r4, r0
    c182:	781b      	ldrb	r3, [r3, #0]
    c184:	2b03      	cmp	r3, #3
    c186:	d00e      	beq.n	c1a6 <rpc_transport_ipc_msg_data_rx_free+0x2a>
    c188:	f7ff fe8c 	bl	bea4 <rpc_transport_ipc_ctrl_msg_alloc>
    c18c:	b158      	cbz	r0, c1a6 <rpc_transport_ipc_msg_data_rx_free+0x2a>
    c18e:	2101      	movs	r1, #1
    c190:	2200      	movs	r2, #0
    c192:	7001      	strb	r1, [r0, #0]
    c194:	2102      	movs	r1, #2
    c196:	6084      	str	r4, [r0, #8]
    c198:	7042      	strb	r2, [r0, #1]
    c19a:	7081      	strb	r1, [r0, #2]
    c19c:	70c2      	strb	r2, [r0, #3]
    c19e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c1a2:	f7ff bf99 	b.w	c0d8 <rpc_transport_ipc_ctrl_msg_send>
    c1a6:	bd10      	pop	{r4, pc}
    c1a8:	2000cf27 	.word	0x2000cf27

0000c1ac <at_cmd_send>:
    c1ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c1b0:	4605      	mov	r5, r0
    c1b2:	2000      	movs	r0, #0
    c1b4:	4617      	mov	r7, r2
    c1b6:	4688      	mov	r8, r1
    c1b8:	461e      	mov	r6, r3
    c1ba:	f002 ff4f 	bl	f05c <rpc_client_msg_alloc>
    c1be:	4602      	mov	r2, r0
    c1c0:	b940      	cbnz	r0, c1d4 <at_cmd_send+0x28>
    c1c2:	b115      	cbz	r5, c1ca <at_cmd_send+0x1e>
    c1c4:	4628      	mov	r0, r5
    c1c6:	f002 ff73 	bl	f0b0 <rpc_client_msg_data_tx_free>
    c1ca:	f06f 000b 	mvn.w	r0, #11
    c1ce:	b002      	add	sp, #8
    c1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1d4:	f06f 0358 	mvn.w	r3, #88	; 0x58
    c1d8:	2400      	movs	r4, #0
    c1da:	7303      	strb	r3, [r0, #12]
    c1dc:	2304      	movs	r3, #4
    c1de:	6005      	str	r5, [r0, #0]
    c1e0:	4d0e      	ldr	r5, [pc, #56]	; (c21c <at_cmd_send+0x70>)
    c1e2:	7203      	strb	r3, [r0, #8]
    c1e4:	7344      	strb	r4, [r0, #13]
    c1e6:	7384      	strb	r4, [r0, #14]
    c1e8:	73c4      	strb	r4, [r0, #15]
    c1ea:	7244      	strb	r4, [r0, #9]
    c1ec:	7284      	strb	r4, [r0, #10]
    c1ee:	72c4      	strb	r4, [r0, #11]
    c1f0:	f8c0 8004 	str.w	r8, [r0, #4]
    c1f4:	4639      	mov	r1, r7
    c1f6:	2003      	movs	r0, #3
    c1f8:	702c      	strb	r4, [r5, #0]
    c1fa:	f002 ff4b 	bl	f094 <rpc_client_msg_send>
    c1fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c202:	9301      	str	r3, [sp, #4]
    c204:	782b      	ldrb	r3, [r5, #0]
    c206:	42b3      	cmp	r3, r6
    c208:	d101      	bne.n	c20e <at_cmd_send+0x62>
    c20a:	2000      	movs	r0, #0
    c20c:	e7df      	b.n	c1ce <at_cmd_send+0x22>
    c20e:	2002      	movs	r0, #2
    c210:	a901      	add	r1, sp, #4
    c212:	f7fe fe33 	bl	ae7c <nrf_modem_os_timedwait>
    c216:	2800      	cmp	r0, #0
    c218:	d0f4      	beq.n	c204 <at_cmd_send+0x58>
    c21a:	e7d8      	b.n	c1ce <at_cmd_send+0x22>
    c21c:	2000cf28 	.word	0x2000cf28

0000c220 <at_response_match>:
    c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c222:	4605      	mov	r5, r0
    c224:	2400      	movs	r4, #0
    c226:	4f0f      	ldr	r7, [pc, #60]	; (c264 <at_response_match+0x44>)
    c228:	f857 6b04 	ldr.w	r6, [r7], #4
    c22c:	4628      	mov	r0, r5
    c22e:	4631      	mov	r1, r6
    c230:	f003 facf 	bl	f7d2 <strstr>
    c234:	b928      	cbnz	r0, c242 <at_response_match+0x22>
    c236:	3401      	adds	r4, #1
    c238:	2c04      	cmp	r4, #4
    c23a:	d1f5      	bne.n	c228 <at_response_match+0x8>
    c23c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    c240:	e00d      	b.n	c25e <at_response_match+0x3e>
    c242:	b16c      	cbz	r4, c260 <at_response_match+0x40>
    c244:	1ea3      	subs	r3, r4, #2
    c246:	2b01      	cmp	r3, #1
    c248:	d8f8      	bhi.n	c23c <at_response_match+0x1c>
    c24a:	4630      	mov	r0, r6
    c24c:	f7fc f8e2 	bl	8414 <strlen>
    c250:	220a      	movs	r2, #10
    c252:	2100      	movs	r1, #0
    c254:	4428      	add	r0, r5
    c256:	f001 fd2f 	bl	dcb8 <strtol>
    c25a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    c25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c260:	4620      	mov	r0, r4
    c262:	e7fc      	b.n	c25e <at_response_match+0x3e>
    c264:	0000ff3c 	.word	0x0000ff3c

0000c268 <at_vsprintf>:
    c268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    c26c:	2500      	movs	r5, #0
    c26e:	4681      	mov	r9, r0
    c270:	460f      	mov	r7, r1
    c272:	4810      	ldr	r0, [pc, #64]	; (c2b4 <at_vsprintf+0x4c>)
    c274:	4629      	mov	r1, r5
    c276:	4690      	mov	r8, r2
    c278:	461e      	mov	r6, r3
    c27a:	9301      	str	r3, [sp, #4]
    c27c:	f001 fd26 	bl	dccc <vsniprintf>
    c280:	1e04      	subs	r4, r0, #0
    c282:	db11      	blt.n	c2a8 <at_vsprintf+0x40>
    c284:	3401      	adds	r4, #1
    c286:	4620      	mov	r0, r4
    c288:	f002 ff10 	bl	f0ac <rpc_client_msg_data_tx_alloc>
    c28c:	f8c9 0000 	str.w	r0, [r9]
    c290:	b168      	cbz	r0, c2ae <at_vsprintf+0x46>
    c292:	4633      	mov	r3, r6
    c294:	4642      	mov	r2, r8
    c296:	4621      	mov	r1, r4
    c298:	9601      	str	r6, [sp, #4]
    c29a:	f001 fd17 	bl	dccc <vsniprintf>
    c29e:	4628      	mov	r0, r5
    c2a0:	603c      	str	r4, [r7, #0]
    c2a2:	b003      	add	sp, #12
    c2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c2a8:	f06f 0015 	mvn.w	r0, #21
    c2ac:	e7f9      	b.n	c2a2 <at_vsprintf+0x3a>
    c2ae:	f06f 000b 	mvn.w	r0, #11
    c2b2:	e7f6      	b.n	c2a2 <at_vsprintf+0x3a>
    c2b4:	0000fde0 	.word	0x0000fde0

0000c2b8 <nrf_modem_at_printf>:
    c2b8:	b40f      	push	{r0, r1, r2, r3}
    c2ba:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    c2bc:	9c08      	ldr	r4, [sp, #32]
    c2be:	f000 fb4b 	bl	c958 <nrf_modem_state_is_initialized>
    c2c2:	2800      	cmp	r0, #0
    c2c4:	d039      	beq.n	c33a <nrf_modem_at_printf+0x82>
    c2c6:	2c00      	cmp	r4, #0
    c2c8:	d03a      	beq.n	c340 <nrf_modem_at_printf+0x88>
    c2ca:	4622      	mov	r2, r4
    c2cc:	ab09      	add	r3, sp, #36	; 0x24
    c2ce:	a903      	add	r1, sp, #12
    c2d0:	a802      	add	r0, sp, #8
    c2d2:	9301      	str	r3, [sp, #4]
    c2d4:	f7ff ffc8 	bl	c268 <at_vsprintf>
    c2d8:	4604      	mov	r4, r0
    c2da:	b960      	cbnz	r0, c2f6 <nrf_modem_at_printf+0x3e>
    c2dc:	4e1a      	ldr	r6, [pc, #104]	; (c348 <nrf_modem_at_printf+0x90>)
    c2de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c2e2:	6830      	ldr	r0, [r6, #0]
    c2e4:	f002 fe35 	bl	ef52 <nrf_modem_os_sem_take>
    c2e8:	4603      	mov	r3, r0
    c2ea:	9802      	ldr	r0, [sp, #8]
    c2ec:	b14b      	cbz	r3, c302 <nrf_modem_at_printf+0x4a>
    c2ee:	f002 fedf 	bl	f0b0 <rpc_client_msg_data_tx_free>
    c2f2:	f06f 040a 	mvn.w	r4, #10
    c2f6:	4620      	mov	r0, r4
    c2f8:	b004      	add	sp, #16
    c2fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c2fe:	b004      	add	sp, #16
    c300:	4770      	bx	lr
    c302:	2302      	movs	r3, #2
    c304:	2201      	movs	r2, #1
    c306:	9903      	ldr	r1, [sp, #12]
    c308:	f7ff ff50 	bl	c1ac <at_cmd_send>
    c30c:	4604      	mov	r4, r0
    c30e:	b118      	cbz	r0, c318 <nrf_modem_at_printf+0x60>
    c310:	6830      	ldr	r0, [r6, #0]
    c312:	f002 fe1c 	bl	ef4e <nrf_modem_os_sem_give>
    c316:	e7ee      	b.n	c2f6 <nrf_modem_at_printf+0x3e>
    c318:	4d0c      	ldr	r5, [pc, #48]	; (c34c <nrf_modem_at_printf+0x94>)
    c31a:	682b      	ldr	r3, [r5, #0]
    c31c:	6818      	ldr	r0, [r3, #0]
    c31e:	f7ff ff7f 	bl	c220 <at_response_match>
    c322:	4604      	mov	r4, r0
    c324:	6830      	ldr	r0, [r6, #0]
    c326:	f002 fe12 	bl	ef4e <nrf_modem_os_sem_give>
    c32a:	682b      	ldr	r3, [r5, #0]
    c32c:	6818      	ldr	r0, [r3, #0]
    c32e:	f002 febb 	bl	f0a8 <rpc_client_msg_data_rx_free>
    c332:	6828      	ldr	r0, [r5, #0]
    c334:	f002 feb5 	bl	f0a2 <rpc_client_msg_rx_free>
    c338:	e7dd      	b.n	c2f6 <nrf_modem_at_printf+0x3e>
    c33a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    c33e:	e7da      	b.n	c2f6 <nrf_modem_at_printf+0x3e>
    c340:	f06f 040d 	mvn.w	r4, #13
    c344:	e7d7      	b.n	c2f6 <nrf_modem_at_printf+0x3e>
    c346:	bf00      	nop
    c348:	2000cb68 	.word	0x2000cb68
    c34c:	2000cb64 	.word	0x2000cb64

0000c350 <rpc_at_event_handler>:
    c350:	b538      	push	{r3, r4, r5, lr}
    c352:	68c3      	ldr	r3, [r0, #12]
    c354:	4604      	mov	r4, r0
    c356:	2ba7      	cmp	r3, #167	; 0xa7
    c358:	d003      	beq.n	c362 <rpc_at_event_handler+0x12>
    c35a:	6820      	ldr	r0, [r4, #0]
    c35c:	f002 fea4 	bl	f0a8 <rpc_client_msg_data_rx_free>
    c360:	e008      	b.n	c374 <rpc_at_event_handler+0x24>
    c362:	2903      	cmp	r1, #3
    c364:	d008      	beq.n	c378 <rpc_at_event_handler+0x28>
    c366:	2904      	cmp	r1, #4
    c368:	d021      	beq.n	c3ae <rpc_at_event_handler+0x5e>
    c36a:	2902      	cmp	r1, #2
    c36c:	bf02      	ittt	eq
    c36e:	2201      	moveq	r2, #1
    c370:	4b12      	ldreq	r3, [pc, #72]	; (c3bc <rpc_at_event_handler+0x6c>)
    c372:	701a      	strbeq	r2, [r3, #0]
    c374:	2000      	movs	r0, #0
    c376:	bd38      	pop	{r3, r4, r5, pc}
    c378:	4d11      	ldr	r5, [pc, #68]	; (c3c0 <rpc_at_event_handler+0x70>)
    c37a:	682b      	ldr	r3, [r5, #0]
    c37c:	b13b      	cbz	r3, c38e <rpc_at_event_handler+0x3e>
    c37e:	6800      	ldr	r0, [r0, #0]
    c380:	4798      	blx	r3
    c382:	2300      	movs	r3, #0
    c384:	6820      	ldr	r0, [r4, #0]
    c386:	602b      	str	r3, [r5, #0]
    c388:	f002 fe8e 	bl	f0a8 <rpc_client_msg_data_rx_free>
    c38c:	e006      	b.n	c39c <rpc_at_event_handler+0x4c>
    c38e:	4b0b      	ldr	r3, [pc, #44]	; (c3bc <rpc_at_event_handler+0x6c>)
    c390:	781a      	ldrb	r2, [r3, #0]
    c392:	2a02      	cmp	r2, #2
    c394:	d105      	bne.n	c3a2 <rpc_at_event_handler+0x52>
    c396:	6800      	ldr	r0, [r0, #0]
    c398:	2800      	cmp	r0, #0
    c39a:	d1f5      	bne.n	c388 <rpc_at_event_handler+0x38>
    c39c:	2000      	movs	r0, #0
    c39e:	b2c0      	uxtb	r0, r0
    c3a0:	e7e9      	b.n	c376 <rpc_at_event_handler+0x26>
    c3a2:	4a08      	ldr	r2, [pc, #32]	; (c3c4 <rpc_at_event_handler+0x74>)
    c3a4:	6010      	str	r0, [r2, #0]
    c3a6:	2202      	movs	r2, #2
    c3a8:	2001      	movs	r0, #1
    c3aa:	701a      	strb	r2, [r3, #0]
    c3ac:	e7f7      	b.n	c39e <rpc_at_event_handler+0x4e>
    c3ae:	4b06      	ldr	r3, [pc, #24]	; (c3c8 <rpc_at_event_handler+0x78>)
    c3b0:	681b      	ldr	r3, [r3, #0]
    c3b2:	2b00      	cmp	r3, #0
    c3b4:	d0d1      	beq.n	c35a <rpc_at_event_handler+0xa>
    c3b6:	6800      	ldr	r0, [r0, #0]
    c3b8:	4798      	blx	r3
    c3ba:	e7ce      	b.n	c35a <rpc_at_event_handler+0xa>
    c3bc:	2000cf28 	.word	0x2000cf28
    c3c0:	2000cb5c 	.word	0x2000cb5c
    c3c4:	2000cb64 	.word	0x2000cb64
    c3c8:	2000cb60 	.word	0x2000cb60

0000c3cc <sock_find>:
    c3cc:	b530      	push	{r4, r5, lr}
    c3ce:	4602      	mov	r2, r0
    c3d0:	2300      	movs	r3, #0
    c3d2:	2564      	movs	r5, #100	; 0x64
    c3d4:	4905      	ldr	r1, [pc, #20]	; (c3ec <sock_find+0x20>)
    c3d6:	fb05 f403 	mul.w	r4, r5, r3
    c3da:	1860      	adds	r0, r4, r1
    c3dc:	590c      	ldr	r4, [r1, r4]
    c3de:	4294      	cmp	r4, r2
    c3e0:	d003      	beq.n	c3ea <sock_find+0x1e>
    c3e2:	3301      	adds	r3, #1
    c3e4:	2b08      	cmp	r3, #8
    c3e6:	d1f6      	bne.n	c3d6 <sock_find+0xa>
    c3e8:	2000      	movs	r0, #0
    c3ea:	bd30      	pop	{r4, r5, pc}
    c3ec:	2000cb6c 	.word	0x2000cb6c

0000c3f0 <sock_flow_control_set>:
    c3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c3f4:	1e02      	subs	r2, r0, #0
    c3f6:	4c10      	ldr	r4, [pc, #64]	; (c438 <sock_flow_control_set+0x48>)
    c3f8:	bf18      	it	ne
    c3fa:	2201      	movne	r2, #1
    c3fc:	4606      	mov	r6, r0
    c3fe:	2500      	movs	r5, #0
    c400:	46a0      	mov	r8, r4
    c402:	f04f 0964 	mov.w	r9, #100	; 0x64
    c406:	4b0d      	ldr	r3, [pc, #52]	; (c43c <sock_flow_control_set+0x4c>)
    c408:	4f0d      	ldr	r7, [pc, #52]	; (c440 <sock_flow_control_set+0x50>)
    c40a:	701a      	strb	r2, [r3, #0]
    c40c:	6823      	ldr	r3, [r4, #0]
    c40e:	42bb      	cmp	r3, r7
    c410:	d00a      	beq.n	c428 <sock_flow_control_set+0x38>
    c412:	fb09 8305 	mla	r3, r9, r5, r8
    c416:	7f1a      	ldrb	r2, [r3, #28]
    c418:	f366 1286 	bfi	r2, r6, #6, #1
    c41c:	771a      	strb	r2, [r3, #28]
    c41e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c420:	b113      	cbz	r3, c428 <sock_flow_control_set+0x38>
    c422:	4620      	mov	r0, r4
    c424:	f002 fe85 	bl	f132 <sock_pollcb>
    c428:	3501      	adds	r5, #1
    c42a:	2d08      	cmp	r5, #8
    c42c:	f104 0464 	add.w	r4, r4, #100	; 0x64
    c430:	d1ec      	bne.n	c40c <sock_flow_control_set+0x1c>
    c432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c436:	bf00      	nop
    c438:	2000cb6c 	.word	0x2000cb6c
    c43c:	2000cf29 	.word	0x2000cf29
    c440:	1badf11e 	.word	0x1badf11e

0000c444 <on_getaddrinfo_res>:
    c444:	2301      	movs	r3, #1
    c446:	4a03      	ldr	r2, [pc, #12]	; (c454 <on_getaddrinfo_res+0x10>)
    c448:	7013      	strb	r3, [r2, #0]
    c44a:	4a03      	ldr	r2, [pc, #12]	; (c458 <on_getaddrinfo_res+0x14>)
    c44c:	6010      	str	r0, [r2, #0]
    c44e:	4618      	mov	r0, r3
    c450:	4770      	bx	lr
    c452:	bf00      	nop
    c454:	2000cf2a 	.word	0x2000cf2a
    c458:	2000ce8c 	.word	0x2000ce8c

0000c45c <rpc_ip_event_handler>:
    c45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c45e:	f248 030f 	movw	r3, #32783	; 0x800f
    c462:	4299      	cmp	r1, r3
    c464:	4606      	mov	r6, r0
    c466:	460d      	mov	r5, r1
    c468:	d03b      	beq.n	c4e2 <rpc_ip_event_handler+0x86>
    c46a:	d822      	bhi.n	c4b2 <rpc_ip_event_handler+0x56>
    c46c:	f248 030d 	movw	r3, #32781	; 0x800d
    c470:	4299      	cmp	r1, r3
    c472:	d02f      	beq.n	c4d4 <rpc_ip_event_handler+0x78>
    c474:	f248 030e 	movw	r3, #32782	; 0x800e
    c478:	4299      	cmp	r1, r3
    c47a:	d02f      	beq.n	c4dc <rpc_ip_event_handler+0x80>
    c47c:	6900      	ldr	r0, [r0, #16]
    c47e:	f7ff ffa5 	bl	c3cc <sock_find>
    c482:	4604      	mov	r4, r0
    c484:	b308      	cbz	r0, c4ca <rpc_ip_event_handler+0x6e>
    c486:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    c48a:	d91e      	bls.n	c4ca <rpc_ip_event_handler+0x6e>
    c48c:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    c490:	3d01      	subs	r5, #1
    c492:	2d0b      	cmp	r5, #11
    c494:	d819      	bhi.n	c4ca <rpc_ip_event_handler+0x6e>
    c496:	e8df f015 	tbh	[pc, r5, lsl #1]
    c49a:	0090      	.short	0x0090
    c49c:	009400b3 	.word	0x009400b3
    c4a0:	00940094 	.word	0x00940094
    c4a4:	00ee00ee 	.word	0x00ee00ee
    c4a8:	00990094 	.word	0x00990094
    c4ac:	00180018 	.word	0x00180018
    c4b0:	00d2      	.short	0x00d2
    c4b2:	f249 0304 	movw	r3, #36868	; 0x9004
    c4b6:	4299      	cmp	r1, r3
    c4b8:	d016      	beq.n	c4e8 <rpc_ip_event_handler+0x8c>
    c4ba:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
    c4be:	d924      	bls.n	c50a <rpc_ip_event_handler+0xae>
    c4c0:	68c0      	ldr	r0, [r0, #12]
    c4c2:	f7ff ff83 	bl	c3cc <sock_find>
    c4c6:	4604      	mov	r4, r0
    c4c8:	bb70      	cbnz	r0, c528 <rpc_ip_event_handler+0xcc>
    c4ca:	6830      	ldr	r0, [r6, #0]
    c4cc:	b1b0      	cbz	r0, c4fc <rpc_ip_event_handler+0xa0>
    c4ce:	f002 fdeb 	bl	f0a8 <rpc_client_msg_data_rx_free>
    c4d2:	e013      	b.n	c4fc <rpc_ip_event_handler+0xa0>
    c4d4:	f7ff ffb6 	bl	c444 <on_getaddrinfo_res>
    c4d8:	b2c0      	uxtb	r0, r0
    c4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c4dc:	f002 feb1 	bl	f242 <on_getifaddrs_res>
    c4e0:	e7fa      	b.n	c4d8 <rpc_ip_event_handler+0x7c>
    c4e2:	f002 feac 	bl	f23e <on_conf_dnssrv_res>
    c4e6:	e7f7      	b.n	c4d8 <rpc_ip_event_handler+0x7c>
    c4e8:	6903      	ldr	r3, [r0, #16]
    c4ea:	2b03      	cmp	r3, #3
    c4ec:	d806      	bhi.n	c4fc <rpc_ip_event_handler+0xa0>
    c4ee:	e8df f003 	tbb	[pc, r3]
    c4f2:	0a02      	.short	0x0a02
    c4f4:	0702      	.short	0x0702
    c4f6:	2000      	movs	r0, #0
    c4f8:	f7ff ff7a 	bl	c3f0 <sock_flow_control_set>
    c4fc:	2000      	movs	r0, #0
    c4fe:	e7ec      	b.n	c4da <rpc_ip_event_handler+0x7e>
    c500:	2201      	movs	r2, #1
    c502:	4b65      	ldr	r3, [pc, #404]	; (c698 <rpc_ip_event_handler+0x23c>)
    c504:	701a      	strb	r2, [r3, #0]
    c506:	2001      	movs	r0, #1
    c508:	e7f6      	b.n	c4f8 <rpc_ip_event_handler+0x9c>
    c50a:	6900      	ldr	r0, [r0, #16]
    c50c:	f7ff ff5e 	bl	c3cc <sock_find>
    c510:	4604      	mov	r4, r0
    c512:	2800      	cmp	r0, #0
    c514:	d0d9      	beq.n	c4ca <rpc_ip_event_handler+0x6e>
    c516:	f248 0381 	movw	r3, #32897	; 0x8081
    c51a:	429d      	cmp	r5, r3
    c51c:	d1d5      	bne.n	c4ca <rpc_ip_event_handler+0x6e>
    c51e:	4601      	mov	r1, r0
    c520:	4630      	mov	r0, r6
    c522:	f000 f8bb 	bl	c69c <on_tls_attach_res>
    c526:	e04f      	b.n	c5c8 <rpc_ip_event_handler+0x16c>
    c528:	f249 0302 	movw	r3, #36866	; 0x9002
    c52c:	429d      	cmp	r5, r3
    c52e:	f000 809e 	beq.w	c66e <rpc_ip_event_handler+0x212>
    c532:	d835      	bhi.n	c5a0 <rpc_ip_event_handler+0x144>
    c534:	f002 fe4c 	bl	f1d0 <sock_has_stream_error>
    c538:	4607      	mov	r7, r0
    c53a:	b9e0      	cbnz	r0, c576 <rpc_ip_event_handler+0x11a>
    c53c:	2010      	movs	r0, #16
    c53e:	f7fe fd95 	bl	b06c <nrf_modem_os_alloc>
    c542:	4605      	mov	r5, r0
    c544:	b1b8      	cbz	r0, c576 <rpc_ip_event_handler+0x11a>
    c546:	4639      	mov	r1, r7
    c548:	2210      	movs	r2, #16
    c54a:	f003 f91b 	bl	f784 <memset>
    c54e:	6833      	ldr	r3, [r6, #0]
    c550:	606b      	str	r3, [r5, #4]
    c552:	6873      	ldr	r3, [r6, #4]
    c554:	812b      	strh	r3, [r5, #8]
    c556:	8a71      	ldrh	r1, [r6, #18]
    c558:	2900      	cmp	r1, #0
    c55a:	f000 8097 	beq.w	c68c <rpc_ip_event_handler+0x230>
    c55e:	8a32      	ldrh	r2, [r6, #16]
    c560:	f106 0014 	add.w	r0, r6, #20
    c564:	f002 fdac 	bl	f0c0 <sockaddr_init>
    c568:	60e8      	str	r0, [r5, #12]
    c56a:	2800      	cmp	r0, #0
    c56c:	f040 808e 	bne.w	c68c <rpc_ip_event_handler+0x230>
    c570:	4628      	mov	r0, r5
    c572:	f7fe fd83 	bl	b07c <nrf_modem_os_free>
    c576:	6830      	ldr	r0, [r6, #0]
    c578:	f002 fd96 	bl	f0a8 <rpc_client_msg_data_rx_free>
    c57c:	4620      	mov	r0, r4
    c57e:	f002 fdfa 	bl	f176 <sock_is_stream>
    c582:	b148      	cbz	r0, c598 <rpc_ip_event_handler+0x13c>
    c584:	4620      	mov	r0, r4
    c586:	f002 fe23 	bl	f1d0 <sock_has_stream_error>
    c58a:	b928      	cbnz	r0, c598 <rpc_ip_event_handler+0x13c>
    c58c:	230c      	movs	r3, #12
    c58e:	61a3      	str	r3, [r4, #24]
    c590:	7f23      	ldrb	r3, [r4, #28]
    c592:	f063 037e 	orn	r3, r3, #126	; 0x7e
    c596:	7723      	strb	r3, [r4, #28]
    c598:	4620      	mov	r0, r4
    c59a:	f002 fdf1 	bl	f180 <sock_is_datagram>
    c59e:	e025      	b.n	c5ec <rpc_ip_event_handler+0x190>
    c5a0:	f249 0303 	movw	r3, #36867	; 0x9003
    c5a4:	429d      	cmp	r5, r3
    c5a6:	d018      	beq.n	c5da <rpc_ip_event_handler+0x17e>
    c5a8:	f249 0382 	movw	r3, #36994	; 0x9082
    c5ac:	429d      	cmp	r5, r3
    c5ae:	d18c      	bne.n	c4ca <rpc_ip_event_handler+0x6e>
    c5b0:	4601      	mov	r1, r0
    c5b2:	4630      	mov	r0, r6
    c5b4:	f000 f886 	bl	c6c4 <on_tls_handshake_ntf>
    c5b8:	e006      	b.n	c5c8 <rpc_ip_event_handler+0x16c>
    c5ba:	6973      	ldr	r3, [r6, #20]
    c5bc:	b90b      	cbnz	r3, c5c2 <rpc_ip_event_handler+0x166>
    c5be:	69b3      	ldr	r3, [r6, #24]
    c5c0:	6003      	str	r3, [r0, #0]
    c5c2:	4630      	mov	r0, r6
    c5c4:	f002 fe8a 	bl	f2dc <res_forward>
    c5c8:	4605      	mov	r5, r0
    c5ca:	e010      	b.n	c5ee <rpc_ip_event_handler+0x192>
    c5cc:	7f03      	ldrb	r3, [r0, #28]
    c5ce:	f023 0303 	bic.w	r3, r3, #3
    c5d2:	f043 0303 	orr.w	r3, r3, #3
    c5d6:	7703      	strb	r3, [r0, #28]
    c5d8:	e7f3      	b.n	c5c2 <rpc_ip_event_handler+0x166>
    c5da:	7f03      	ldrb	r3, [r0, #28]
    c5dc:	f043 0301 	orr.w	r3, r3, #1
    c5e0:	7703      	strb	r3, [r0, #28]
    c5e2:	6930      	ldr	r0, [r6, #16]
    c5e4:	2869      	cmp	r0, #105	; 0x69
    c5e6:	d112      	bne.n	c60e <rpc_ip_event_handler+0x1b2>
    c5e8:	2368      	movs	r3, #104	; 0x68
    c5ea:	61a3      	str	r3, [r4, #24]
    c5ec:	2500      	movs	r5, #0
    c5ee:	4620      	mov	r0, r4
    c5f0:	f002 fdf8 	bl	f1e4 <sock_has_pollcb>
    c5f4:	b110      	cbz	r0, c5fc <rpc_ip_event_handler+0x1a0>
    c5f6:	4620      	mov	r0, r4
    c5f8:	f002 fd9b 	bl	f132 <sock_pollcb>
    c5fc:	b2e8      	uxtb	r0, r5
    c5fe:	e76c      	b.n	c4da <rpc_ip_event_handler+0x7e>
    c600:	7f03      	ldrb	r3, [r0, #28]
    c602:	68f5      	ldr	r5, [r6, #12]
    c604:	f36f 0382 	bfc	r3, #2, #1
    c608:	7703      	strb	r3, [r0, #28]
    c60a:	6970      	ldr	r0, [r6, #20]
    c60c:	b118      	cbz	r0, c616 <rpc_ip_event_handler+0x1ba>
    c60e:	f000 f8eb 	bl	c7e8 <rpc_error_to_nrf_errno>
    c612:	61a0      	str	r0, [r4, #24]
    c614:	e7ea      	b.n	c5ec <rpc_ip_event_handler+0x190>
    c616:	4620      	mov	r0, r4
    c618:	f002 fdb7 	bl	f18a <sock_proto_is_secure>
    c61c:	b918      	cbnz	r0, c626 <rpc_ip_event_handler+0x1ca>
    c61e:	7f23      	ldrb	r3, [r4, #28]
    c620:	f043 0308 	orr.w	r3, r3, #8
    c624:	7723      	strb	r3, [r4, #28]
    c626:	4620      	mov	r0, r4
    c628:	f002 fdaf 	bl	f18a <sock_proto_is_secure>
    c62c:	2800      	cmp	r0, #0
    c62e:	d0cb      	beq.n	c5c8 <rpc_ip_event_handler+0x16c>
    c630:	2d00      	cmp	r5, #0
    c632:	d0dc      	beq.n	c5ee <rpc_ip_event_handler+0x192>
    c634:	2100      	movs	r1, #0
    c636:	4620      	mov	r0, r4
    c638:	f000 f85e 	bl	c6f8 <tls_attach>
    c63c:	e7d6      	b.n	c5ec <rpc_ip_event_handler+0x190>
    c63e:	7f43      	ldrb	r3, [r0, #29]
    c640:	3b01      	subs	r3, #1
    c642:	7743      	strb	r3, [r0, #29]
    c644:	6973      	ldr	r3, [r6, #20]
    c646:	2b00      	cmp	r3, #0
    c648:	d1bb      	bne.n	c5c2 <rpc_ip_event_handler+0x166>
    c64a:	4630      	mov	r0, r6
    c64c:	f002 fe44 	bl	f2d8 <res_cookie_get>
    c650:	69b2      	ldr	r2, [r6, #24]
    c652:	6843      	ldr	r3, [r0, #4]
    c654:	601a      	str	r2, [r3, #0]
    c656:	6842      	ldr	r2, [r0, #4]
    c658:	7f13      	ldrb	r3, [r2, #28]
    c65a:	f043 0308 	orr.w	r3, r3, #8
    c65e:	7713      	strb	r3, [r2, #28]
    c660:	6843      	ldr	r3, [r0, #4]
    c662:	6922      	ldr	r2, [r4, #16]
    c664:	611a      	str	r2, [r3, #16]
    c666:	6843      	ldr	r3, [r0, #4]
    c668:	6962      	ldr	r2, [r4, #20]
    c66a:	615a      	str	r2, [r3, #20]
    c66c:	e7a9      	b.n	c5c2 <rpc_ip_event_handler+0x166>
    c66e:	7f43      	ldrb	r3, [r0, #29]
    c670:	3301      	adds	r3, #1
    c672:	7743      	strb	r3, [r0, #29]
    c674:	e7ba      	b.n	c5ec <rpc_ip_event_handler+0x190>
    c676:	4630      	mov	r0, r6
    c678:	f002 fe2e 	bl	f2d8 <res_cookie_get>
    c67c:	6973      	ldr	r3, [r6, #20]
    c67e:	b913      	cbnz	r3, c686 <rpc_ip_event_handler+0x22a>
    c680:	69b3      	ldr	r3, [r6, #24]
    c682:	6043      	str	r3, [r0, #4]
    c684:	e79d      	b.n	c5c2 <rpc_ip_event_handler+0x166>
    c686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c68a:	e7fa      	b.n	c682 <rpc_ip_event_handler+0x226>
    c68c:	4629      	mov	r1, r5
    c68e:	4620      	mov	r0, r4
    c690:	f002 fd67 	bl	f162 <sock_pkt_append>
    c694:	e7aa      	b.n	c5ec <rpc_ip_event_handler+0x190>
    c696:	bf00      	nop
    c698:	2000cf2b 	.word	0x2000cf2b

0000c69c <on_tls_attach_res>:
    c69c:	b510      	push	{r4, lr}
    c69e:	6943      	ldr	r3, [r0, #20]
    c6a0:	460c      	mov	r4, r1
    c6a2:	b15b      	cbz	r3, c6bc <on_tls_attach_res+0x20>
    c6a4:	7f0b      	ldrb	r3, [r1, #28]
    c6a6:	f36f 1304 	bfc	r3, #4, #1
    c6aa:	770b      	strb	r3, [r1, #28]
    c6ac:	6940      	ldr	r0, [r0, #20]
    c6ae:	f000 f89b 	bl	c7e8 <rpc_error_to_nrf_errno>
    c6b2:	4b03      	ldr	r3, [pc, #12]	; (c6c0 <on_tls_attach_res+0x24>)
    c6b4:	61a0      	str	r0, [r4, #24]
    c6b6:	6818      	ldr	r0, [r3, #0]
    c6b8:	f002 fc49 	bl	ef4e <nrf_modem_os_sem_give>
    c6bc:	2000      	movs	r0, #0
    c6be:	bd10      	pop	{r4, pc}
    c6c0:	2000ce90 	.word	0x2000ce90

0000c6c4 <on_tls_handshake_ntf>:
    c6c4:	b510      	push	{r4, lr}
    c6c6:	7f0b      	ldrb	r3, [r1, #28]
    c6c8:	460c      	mov	r4, r1
    c6ca:	f36f 1304 	bfc	r3, #4, #1
    c6ce:	770b      	strb	r3, [r1, #28]
    c6d0:	6900      	ldr	r0, [r0, #16]
    c6d2:	b958      	cbnz	r0, c6ec <on_tls_handshake_ntf+0x28>
    c6d4:	b2db      	uxtb	r3, r3
    c6d6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
    c6da:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    c6de:	770b      	strb	r3, [r1, #28]
    c6e0:	4b04      	ldr	r3, [pc, #16]	; (c6f4 <on_tls_handshake_ntf+0x30>)
    c6e2:	6818      	ldr	r0, [r3, #0]
    c6e4:	f002 fc33 	bl	ef4e <nrf_modem_os_sem_give>
    c6e8:	2000      	movs	r0, #0
    c6ea:	bd10      	pop	{r4, pc}
    c6ec:	f000 f87c 	bl	c7e8 <rpc_error_to_nrf_errno>
    c6f0:	61a0      	str	r0, [r4, #24]
    c6f2:	e7f5      	b.n	c6e0 <on_tls_handshake_ntf+0x1c>
    c6f4:	2000ce90 	.word	0x2000ce90

0000c6f8 <tls_attach>:
    c6f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c6fc:	f8df 80e4 	ldr.w	r8, [pc, #228]	; c7e4 <tls_attach+0xec>
    c700:	4605      	mov	r5, r0
    c702:	f8d8 0000 	ldr.w	r0, [r8]
    c706:	9101      	str	r1, [sp, #4]
    c708:	f002 fc23 	bl	ef52 <nrf_modem_os_sem_take>
    c70c:	4607      	mov	r7, r0
    c70e:	b150      	cbz	r0, c726 <tls_attach+0x2e>
    c710:	9b01      	ldr	r3, [sp, #4]
    c712:	2b00      	cmp	r3, #0
    c714:	d163      	bne.n	c7de <tls_attach+0xe6>
    c716:	2310      	movs	r3, #16
    c718:	61ab      	str	r3, [r5, #24]
    c71a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    c71e:	4638      	mov	r0, r7
    c720:	b002      	add	sp, #8
    c722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c726:	6c28      	ldr	r0, [r5, #64]	; 0x40
    c728:	b1a8      	cbz	r0, c756 <tls_attach+0x5e>
    c72a:	f7fb fe73 	bl	8414 <strlen>
    c72e:	1c46      	adds	r6, r0, #1
    c730:	4630      	mov	r0, r6
    c732:	f002 fc93 	bl	f05c <rpc_client_msg_alloc>
    c736:	4604      	mov	r4, r0
    c738:	b978      	cbnz	r0, c75a <tls_attach+0x62>
    c73a:	4628      	mov	r0, r5
    c73c:	f002 fd35 	bl	f1aa <sock_is_nonblock>
    c740:	b108      	cbz	r0, c746 <tls_attach+0x4e>
    c742:	2369      	movs	r3, #105	; 0x69
    c744:	61ab      	str	r3, [r5, #24]
    c746:	f8d8 0000 	ldr.w	r0, [r8]
    c74a:	f002 fc00 	bl	ef4e <nrf_modem_os_sem_give>
    c74e:	2069      	movs	r0, #105	; 0x69
    c750:	f002 fbf5 	bl	ef3e <nrf_modem_os_errno_set>
    c754:	e7e1      	b.n	c71a <tls_attach+0x22>
    c756:	463e      	mov	r6, r7
    c758:	e7ea      	b.n	c730 <tls_attach+0x38>
    c75a:	682b      	ldr	r3, [r5, #0]
    c75c:	2204      	movs	r2, #4
    c75e:	6103      	str	r3, [r0, #16]
    c760:	2300      	movs	r3, #0
    c762:	7202      	strb	r2, [r0, #8]
    c764:	7243      	strb	r3, [r0, #9]
    c766:	7283      	strb	r3, [r0, #10]
    c768:	72c3      	strb	r3, [r0, #11]
    c76a:	f895 2047 	ldrb.w	r2, [r5, #71]	; 0x47
    c76e:	f105 0144 	add.w	r1, r5, #68	; 0x44
    c772:	3201      	adds	r2, #1
    c774:	0092      	lsls	r2, r2, #2
    c776:	6082      	str	r2, [r0, #8]
    c778:	3014      	adds	r0, #20
    c77a:	f002 fff6 	bl	f76a <memcpy>
    c77e:	b1e6      	cbz	r6, c7ba <tls_attach+0xc2>
    c780:	4632      	mov	r2, r6
    c782:	6c29      	ldr	r1, [r5, #64]	; 0x40
    c784:	6820      	ldr	r0, [r4, #0]
    c786:	f003 f805 	bl	f794 <strncpy>
    c78a:	6066      	str	r6, [r4, #4]
    c78c:	7f2b      	ldrb	r3, [r5, #28]
    c78e:	2004      	movs	r0, #4
    c790:	f043 0310 	orr.w	r3, r3, #16
    c794:	4622      	mov	r2, r4
    c796:	f247 0181 	movw	r1, #28801	; 0x7081
    c79a:	772b      	strb	r3, [r5, #28]
    c79c:	f002 fc7a 	bl	f094 <rpc_client_msg_send>
    c7a0:	4628      	mov	r0, r5
    c7a2:	f002 fd02 	bl	f1aa <sock_is_nonblock>
    c7a6:	2800      	cmp	r0, #0
    c7a8:	d1b9      	bne.n	c71e <tls_attach+0x26>
    c7aa:	4628      	mov	r0, r5
    c7ac:	f002 fcf9 	bl	f1a2 <sock_is_attaching>
    c7b0:	b940      	cbnz	r0, c7c4 <tls_attach+0xcc>
    c7b2:	69a8      	ldr	r0, [r5, #24]
    c7b4:	2800      	cmp	r0, #0
    c7b6:	d0b2      	beq.n	c71e <tls_attach+0x26>
    c7b8:	e7ca      	b.n	c750 <tls_attach+0x58>
    c7ba:	7026      	strb	r6, [r4, #0]
    c7bc:	7066      	strb	r6, [r4, #1]
    c7be:	70a6      	strb	r6, [r4, #2]
    c7c0:	70e6      	strb	r6, [r4, #3]
    c7c2:	e7e2      	b.n	c78a <tls_attach+0x92>
    c7c4:	2002      	movs	r0, #2
    c7c6:	a901      	add	r1, sp, #4
    c7c8:	f7fe fb58 	bl	ae7c <nrf_modem_os_timedwait>
    c7cc:	f110 0f0b 	cmn.w	r0, #11
    c7d0:	d005      	beq.n	c7de <tls_attach+0xe6>
    c7d2:	2800      	cmp	r0, #0
    c7d4:	d0e9      	beq.n	c7aa <tls_attach+0xb2>
    c7d6:	2800      	cmp	r0, #0
    c7d8:	bfb8      	it	lt
    c7da:	4240      	neglt	r0, r0
    c7dc:	e7b8      	b.n	c750 <tls_attach+0x58>
    c7de:	2074      	movs	r0, #116	; 0x74
    c7e0:	e7b6      	b.n	c750 <tls_attach+0x58>
    c7e2:	bf00      	nop
    c7e4:	2000ce90 	.word	0x2000ce90

0000c7e8 <rpc_error_to_nrf_errno>:
    c7e8:	2870      	cmp	r0, #112	; 0x70
    c7ea:	bf9a      	itte	ls
    c7ec:	4b02      	ldrls	r3, [pc, #8]	; (c7f8 <rpc_error_to_nrf_errno+0x10>)
    c7ee:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    c7f2:	4802      	ldrhi	r0, [pc, #8]	; (c7fc <rpc_error_to_nrf_errno+0x14>)
    c7f4:	4770      	bx	lr
    c7f6:	bf00      	nop
    c7f8:	0000ff4c 	.word	0x0000ff4c
    c7fc:	baadbaad 	.word	0xbaadbaad

0000c800 <rpc_gnss_event_handler>:
    c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c802:	6804      	ldr	r4, [r0, #0]
    c804:	4606      	mov	r6, r0
    c806:	b13c      	cbz	r4, c818 <rpc_gnss_event_handler+0x18>
    c808:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
    c80c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    c810:	d104      	bne.n	c81c <rpc_gnss_event_handler+0x1c>
    c812:	4b41      	ldr	r3, [pc, #260]	; (c918 <rpc_gnss_event_handler+0x118>)
    c814:	e9c3 1400 	strd	r1, r4, [r3]
    c818:	2000      	movs	r0, #0
    c81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c81c:	4d3f      	ldr	r5, [pc, #252]	; (c91c <rpc_gnss_event_handler+0x11c>)
    c81e:	682b      	ldr	r3, [r5, #0]
    c820:	2b00      	cmp	r3, #0
    c822:	d06f      	beq.n	c904 <rpc_gnss_event_handler+0x104>
    c824:	f244 0204 	movw	r2, #16388	; 0x4004
    c828:	4291      	cmp	r1, r2
    c82a:	d80b      	bhi.n	c844 <rpc_gnss_event_handler+0x44>
    c82c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    c830:	d968      	bls.n	c904 <rpc_gnss_event_handler+0x104>
    c832:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
    c836:	3902      	subs	r1, #2
    c838:	2902      	cmp	r1, #2
    c83a:	d82a      	bhi.n	c892 <rpc_gnss_event_handler+0x92>
    c83c:	e8df f001 	tbb	[pc, r1]
    c840:	5047      	.short	0x5047
    c842:	59          	.byte	0x59
    c843:	00          	.byte	0x00
    c844:	f244 1301 	movw	r3, #16641	; 0x4101
    c848:	4299      	cmp	r1, r3
    c84a:	d02e      	beq.n	c8aa <rpc_gnss_event_handler+0xaa>
    c84c:	f244 2301 	movw	r3, #16897	; 0x4201
    c850:	4299      	cmp	r1, r3
    c852:	d157      	bne.n	c904 <rpc_gnss_event_handler+0x104>
    c854:	4e32      	ldr	r6, [pc, #200]	; (c920 <rpc_gnss_event_handler+0x120>)
    c856:	6830      	ldr	r0, [r6, #0]
    c858:	b108      	cbz	r0, c85e <rpc_gnss_event_handler+0x5e>
    c85a:	f002 fc25 	bl	f0a8 <rpc_client_msg_data_rx_free>
    c85e:	2202      	movs	r2, #2
    c860:	4b30      	ldr	r3, [pc, #192]	; (c924 <rpc_gnss_event_handler+0x124>)
    c862:	6034      	str	r4, [r6, #0]
    c864:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
    c868:	701a      	strb	r2, [r3, #0]
    c86a:	4e2f      	ldr	r6, [pc, #188]	; (c928 <rpc_gnss_event_handler+0x128>)
    c86c:	f014 0708 	ands.w	r7, r4, #8
    c870:	682b      	ldr	r3, [r5, #0]
    c872:	7832      	ldrb	r2, [r6, #0]
    c874:	d025      	beq.n	c8c2 <rpc_gnss_event_handler+0xc2>
    c876:	b91a      	cbnz	r2, c880 <rpc_gnss_event_handler+0x80>
    c878:	2005      	movs	r0, #5
    c87a:	4798      	blx	r3
    c87c:	2301      	movs	r3, #1
    c87e:	7033      	strb	r3, [r6, #0]
    c880:	07e3      	lsls	r3, r4, #31
    c882:	d502      	bpl.n	c88a <rpc_gnss_event_handler+0x8a>
    c884:	2002      	movs	r0, #2
    c886:	682b      	ldr	r3, [r5, #0]
    c888:	4798      	blx	r3
    c88a:	2001      	movs	r0, #1
    c88c:	682b      	ldr	r3, [r5, #0]
    c88e:	4798      	blx	r3
    c890:	e7c2      	b.n	c818 <rpc_gnss_event_handler+0x18>
    c892:	4e23      	ldr	r6, [pc, #140]	; (c920 <rpc_gnss_event_handler+0x120>)
    c894:	6830      	ldr	r0, [r6, #0]
    c896:	b108      	cbz	r0, c89c <rpc_gnss_event_handler+0x9c>
    c898:	f002 fc06 	bl	f0a8 <rpc_client_msg_data_rx_free>
    c89c:	2200      	movs	r2, #0
    c89e:	4b21      	ldr	r3, [pc, #132]	; (c924 <rpc_gnss_event_handler+0x124>)
    c8a0:	6034      	str	r4, [r6, #0]
    c8a2:	701a      	strb	r2, [r3, #0]
    c8a4:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
    c8a8:	e7df      	b.n	c86a <rpc_gnss_event_handler+0x6a>
    c8aa:	4e1d      	ldr	r6, [pc, #116]	; (c920 <rpc_gnss_event_handler+0x120>)
    c8ac:	6830      	ldr	r0, [r6, #0]
    c8ae:	b108      	cbz	r0, c8b4 <rpc_gnss_event_handler+0xb4>
    c8b0:	f002 fbfa 	bl	f0a8 <rpc_client_msg_data_rx_free>
    c8b4:	2201      	movs	r2, #1
    c8b6:	4b1b      	ldr	r3, [pc, #108]	; (c924 <rpc_gnss_event_handler+0x124>)
    c8b8:	6034      	str	r4, [r6, #0]
    c8ba:	701a      	strb	r2, [r3, #0]
    c8bc:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
    c8c0:	e7d3      	b.n	c86a <rpc_gnss_event_handler+0x6a>
    c8c2:	2a00      	cmp	r2, #0
    c8c4:	d0dc      	beq.n	c880 <rpc_gnss_event_handler+0x80>
    c8c6:	2006      	movs	r0, #6
    c8c8:	4798      	blx	r3
    c8ca:	7037      	strb	r7, [r6, #0]
    c8cc:	e7d8      	b.n	c880 <rpc_gnss_event_handler+0x80>
    c8ce:	4e17      	ldr	r6, [pc, #92]	; (c92c <rpc_gnss_event_handler+0x12c>)
    c8d0:	6830      	ldr	r0, [r6, #0]
    c8d2:	b108      	cbz	r0, c8d8 <rpc_gnss_event_handler+0xd8>
    c8d4:	f002 fbe8 	bl	f0a8 <rpc_client_msg_data_rx_free>
    c8d8:	2003      	movs	r0, #3
    c8da:	682b      	ldr	r3, [r5, #0]
    c8dc:	6034      	str	r4, [r6, #0]
    c8de:	e7d6      	b.n	c88e <rpc_gnss_event_handler+0x8e>
    c8e0:	4e13      	ldr	r6, [pc, #76]	; (c930 <rpc_gnss_event_handler+0x130>)
    c8e2:	6830      	ldr	r0, [r6, #0]
    c8e4:	b108      	cbz	r0, c8ea <rpc_gnss_event_handler+0xea>
    c8e6:	f002 fbdf 	bl	f0a8 <rpc_client_msg_data_rx_free>
    c8ea:	2004      	movs	r0, #4
    c8ec:	682b      	ldr	r3, [r5, #0]
    c8ee:	6034      	str	r4, [r6, #0]
    c8f0:	e7cd      	b.n	c88e <rpc_gnss_event_handler+0x8e>
    c8f2:	7822      	ldrb	r2, [r4, #0]
    c8f4:	2a03      	cmp	r2, #3
    c8f6:	d805      	bhi.n	c904 <rpc_gnss_event_handler+0x104>
    c8f8:	e8df f002 	tbb	[pc, r2]
    c8fc:	0c0a0802 	.word	0x0c0a0802
    c900:	2007      	movs	r0, #7
    c902:	4798      	blx	r3
    c904:	6830      	ldr	r0, [r6, #0]
    c906:	f002 fbcf 	bl	f0a8 <rpc_client_msg_data_rx_free>
    c90a:	e785      	b.n	c818 <rpc_gnss_event_handler+0x18>
    c90c:	2008      	movs	r0, #8
    c90e:	e7f8      	b.n	c902 <rpc_gnss_event_handler+0x102>
    c910:	2009      	movs	r0, #9
    c912:	e7f6      	b.n	c902 <rpc_gnss_event_handler+0x102>
    c914:	200a      	movs	r0, #10
    c916:	e7f4      	b.n	c902 <rpc_gnss_event_handler+0x102>
    c918:	2000cea4 	.word	0x2000cea4
    c91c:	2000ce94 	.word	0x2000ce94
    c920:	2000cea0 	.word	0x2000cea0
    c924:	2000cf2c 	.word	0x2000cf2c
    c928:	2000cf2d 	.word	0x2000cf2d
    c92c:	2000ce9c 	.word	0x2000ce9c
    c930:	2000ce98 	.word	0x2000ce98

0000c934 <nrf_modem_fault_handler_internal>:
    c934:	b507      	push	{r0, r1, r2, lr}
    c936:	4b04      	ldr	r3, [pc, #16]	; (c948 <nrf_modem_fault_handler_internal+0x14>)
    c938:	e9cd 0100 	strd	r0, r1, [sp]
    c93c:	681b      	ldr	r3, [r3, #0]
    c93e:	4668      	mov	r0, sp
    c940:	4798      	blx	r3
    c942:	b003      	add	sp, #12
    c944:	f85d fb04 	ldr.w	pc, [sp], #4
    c948:	2000ceac 	.word	0x2000ceac

0000c94c <nrf_modem_state_set>:
    c94c:	4b01      	ldr	r3, [pc, #4]	; (c954 <nrf_modem_state_set+0x8>)
    c94e:	7018      	strb	r0, [r3, #0]
    c950:	4770      	bx	lr
    c952:	bf00      	nop
    c954:	2000cf2e 	.word	0x2000cf2e

0000c958 <nrf_modem_state_is_initialized>:
    c958:	4b02      	ldr	r3, [pc, #8]	; (c964 <nrf_modem_state_is_initialized+0xc>)
    c95a:	7818      	ldrb	r0, [r3, #0]
    c95c:	1e43      	subs	r3, r0, #1
    c95e:	4258      	negs	r0, r3
    c960:	4158      	adcs	r0, r3
    c962:	4770      	bx	lr
    c964:	2000cf2e 	.word	0x2000cf2e

0000c968 <ipc_trace_init>:
    c968:	2100      	movs	r1, #0
    c96a:	4b07      	ldr	r3, [pc, #28]	; (c988 <ipc_trace_init+0x20>)
    c96c:	2201      	movs	r2, #1
    c96e:	7019      	strb	r1, [r3, #0]
    c970:	4b06      	ldr	r3, [pc, #24]	; (c98c <ipc_trace_init+0x24>)
    c972:	7019      	strb	r1, [r3, #0]
    c974:	4b06      	ldr	r3, [pc, #24]	; (c990 <ipc_trace_init+0x28>)
    c976:	6019      	str	r1, [r3, #0]
    c978:	4b06      	ldr	r3, [pc, #24]	; (c994 <ipc_trace_init+0x2c>)
    c97a:	6019      	str	r1, [r3, #0]
    c97c:	4b06      	ldr	r3, [pc, #24]	; (c998 <ipc_trace_init+0x30>)
    c97e:	6018      	str	r0, [r3, #0]
    c980:	4806      	ldr	r0, [pc, #24]	; (c99c <ipc_trace_init+0x34>)
    c982:	f7fe bb3d 	b.w	b000 <nrf_modem_os_sem_init>
    c986:	bf00      	nop
    c988:	2000cf2f 	.word	0x2000cf2f
    c98c:	2000cf30 	.word	0x2000cf30
    c990:	2000ceb4 	.word	0x2000ceb4
    c994:	2000ceb8 	.word	0x2000ceb8
    c998:	2000cec8 	.word	0x2000cec8
    c99c:	2000ceb0 	.word	0x2000ceb0

0000c9a0 <ipc_trace_handler>:
    c9a0:	b470      	push	{r4, r5, r6}
    c9a2:	4b2d      	ldr	r3, [pc, #180]	; (ca58 <ipc_trace_handler+0xb8>)
    c9a4:	681b      	ldr	r3, [r3, #0]
    c9a6:	6919      	ldr	r1, [r3, #16]
    c9a8:	6958      	ldr	r0, [r3, #20]
    c9aa:	7c1a      	ldrb	r2, [r3, #16]
    c9ac:	2200      	movs	r2, #0
    c9ae:	741a      	strb	r2, [r3, #16]
    c9b0:	7c5c      	ldrb	r4, [r3, #17]
    c9b2:	745a      	strb	r2, [r3, #17]
    c9b4:	7c9c      	ldrb	r4, [r3, #18]
    c9b6:	749a      	strb	r2, [r3, #18]
    c9b8:	7cdc      	ldrb	r4, [r3, #19]
    c9ba:	74da      	strb	r2, [r3, #19]
    c9bc:	7d1c      	ldrb	r4, [r3, #20]
    c9be:	751a      	strb	r2, [r3, #20]
    c9c0:	7d5c      	ldrb	r4, [r3, #21]
    c9c2:	755a      	strb	r2, [r3, #21]
    c9c4:	7d9c      	ldrb	r4, [r3, #22]
    c9c6:	2903      	cmp	r1, #3
    c9c8:	759a      	strb	r2, [r3, #22]
    c9ca:	7ddc      	ldrb	r4, [r3, #23]
    c9cc:	75da      	strb	r2, [r3, #23]
    c9ce:	d029      	beq.n	ca24 <ipc_trace_handler+0x84>
    c9d0:	2904      	cmp	r1, #4
    c9d2:	d033      	beq.n	ca3c <ipc_trace_handler+0x9c>
    c9d4:	2901      	cmp	r1, #1
    c9d6:	d12f      	bne.n	ca38 <ipc_trace_handler+0x98>
    c9d8:	6885      	ldr	r5, [r0, #8]
    c9da:	4e20      	ldr	r6, [pc, #128]	; (ca5c <ipc_trace_handler+0xbc>)
    c9dc:	4295      	cmp	r5, r2
    c9de:	d110      	bne.n	ca02 <ipc_trace_handler+0x62>
    c9e0:	2101      	movs	r1, #1
    c9e2:	7a1a      	ldrb	r2, [r3, #8]
    c9e4:	2200      	movs	r2, #0
    c9e6:	7219      	strb	r1, [r3, #8]
    c9e8:	7a59      	ldrb	r1, [r3, #9]
    c9ea:	725a      	strb	r2, [r3, #9]
    c9ec:	7a99      	ldrb	r1, [r3, #10]
    c9ee:	729a      	strb	r2, [r3, #10]
    c9f0:	7ada      	ldrb	r2, [r3, #11]
    c9f2:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    c9f6:	72da      	strb	r2, [r3, #11]
    c9f8:	4b19      	ldr	r3, [pc, #100]	; (ca60 <ipc_trace_handler+0xc0>)
    c9fa:	bc70      	pop	{r4, r5, r6}
    c9fc:	6818      	ldr	r0, [r3, #0]
    c9fe:	f002 baa6 	b.w	ef4e <nrf_modem_os_sem_give>
    ca02:	1c91      	adds	r1, r2, #2
    ca04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    ca08:	684c      	ldr	r4, [r1, #4]
    ca0a:	7821      	ldrb	r1, [r4, #0]
    ca0c:	2962      	cmp	r1, #98	; 0x62
    ca0e:	d007      	beq.n	ca20 <ipc_trace_handler+0x80>
    ca10:	3963      	subs	r1, #99	; 0x63
    ca12:	bf18      	it	ne
    ca14:	2101      	movne	r1, #1
    ca16:	0049      	lsls	r1, r1, #1
    ca18:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
    ca1c:	3201      	adds	r2, #1
    ca1e:	e7dd      	b.n	c9dc <ipc_trace_handler+0x3c>
    ca20:	2101      	movs	r1, #1
    ca22:	e7f9      	b.n	ca18 <ipc_trace_handler+0x78>
    ca24:	7a18      	ldrb	r0, [r3, #8]
    ca26:	7219      	strb	r1, [r3, #8]
    ca28:	7a59      	ldrb	r1, [r3, #9]
    ca2a:	725a      	strb	r2, [r3, #9]
    ca2c:	7a99      	ldrb	r1, [r3, #10]
    ca2e:	729a      	strb	r2, [r3, #10]
    ca30:	7ada      	ldrb	r2, [r3, #11]
    ca32:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    ca36:	72da      	strb	r2, [r3, #11]
    ca38:	bc70      	pop	{r4, r5, r6}
    ca3a:	4770      	bx	lr
    ca3c:	7a18      	ldrb	r0, [r3, #8]
    ca3e:	7219      	strb	r1, [r3, #8]
    ca40:	7a59      	ldrb	r1, [r3, #9]
    ca42:	725a      	strb	r2, [r3, #9]
    ca44:	7a99      	ldrb	r1, [r3, #10]
    ca46:	729a      	strb	r2, [r3, #10]
    ca48:	7ada      	ldrb	r2, [r3, #11]
    ca4a:	f06f 025f 	mvn.w	r2, #95	; 0x5f
    ca4e:	72da      	strb	r2, [r3, #11]
    ca50:	2201      	movs	r2, #1
    ca52:	4b04      	ldr	r3, [pc, #16]	; (ca64 <ipc_trace_handler+0xc4>)
    ca54:	701a      	strb	r2, [r3, #0]
    ca56:	e7ef      	b.n	ca38 <ipc_trace_handler+0x98>
    ca58:	2000cec8 	.word	0x2000cec8
    ca5c:	2000cebc 	.word	0x2000cebc
    ca60:	2000ceb0 	.word	0x2000ceb0
    ca64:	2000cf30 	.word	0x2000cf30

0000ca68 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    ca68:	4b01      	ldr	r3, [pc, #4]	; (ca70 <z_impl_z_errno+0x8>)
    ca6a:	6898      	ldr	r0, [r3, #8]
}
    ca6c:	3060      	adds	r0, #96	; 0x60
    ca6e:	4770      	bx	lr
    ca70:	2000cecc 	.word	0x2000cecc

0000ca74 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ca74:	4b10      	ldr	r3, [pc, #64]	; (cab8 <z_sys_init_run_level+0x44>)
{
    ca76:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ca78:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    ca7c:	3001      	adds	r0, #1
    ca7e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    ca82:	42a6      	cmp	r6, r4
    ca84:	d800      	bhi.n	ca88 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    ca86:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    ca88:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    ca8c:	b18d      	cbz	r5, cab2 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    ca8e:	4628      	mov	r0, r5
    ca90:	4798      	blx	r3
			if (rc != 0) {
    ca92:	b138      	cbz	r0, caa4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    ca94:	2800      	cmp	r0, #0
    ca96:	bfb8      	it	lt
    ca98:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    ca9a:	28ff      	cmp	r0, #255	; 0xff
    ca9c:	bfa8      	it	ge
    ca9e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    caa0:	68eb      	ldr	r3, [r5, #12]
    caa2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    caa4:	68ea      	ldr	r2, [r5, #12]
    caa6:	7853      	ldrb	r3, [r2, #1]
    caa8:	f043 0301 	orr.w	r3, r3, #1
    caac:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    caae:	3408      	adds	r4, #8
    cab0:	e7e7      	b.n	ca82 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    cab2:	4798      	blx	r3
    cab4:	e7fb      	b.n	caae <z_sys_init_run_level+0x3a>
    cab6:	bf00      	nop
    cab8:	00010114 	.word	0x00010114

0000cabc <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    cabc:	2201      	movs	r2, #1
{
    cabe:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    cac0:	4b09      	ldr	r3, [pc, #36]	; (cae8 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    cac2:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    cac4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    cac6:	f7ff ffd5 	bl	ca74 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    caca:	f000 ffbd 	bl	da48 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    cace:	2004      	movs	r0, #4
    cad0:	f7ff ffd0 	bl	ca74 <z_sys_init_run_level>

	z_init_static_threads();
    cad4:	f000 f8fe 	bl	ccd4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    cad8:	f7fb fcd6 	bl	8488 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    cadc:	4a03      	ldr	r2, [pc, #12]	; (caec <bg_thread_main+0x30>)
    cade:	7b13      	ldrb	r3, [r2, #12]
    cae0:	f023 0301 	bic.w	r3, r3, #1
    cae4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    cae6:	bd08      	pop	{r3, pc}
    cae8:	2000cf31 	.word	0x2000cf31
    caec:	2000c8d0 	.word	0x2000c8d0

0000caf0 <z_bss_zero>:
{
    caf0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    caf2:	4803      	ldr	r0, [pc, #12]	; (cb00 <z_bss_zero+0x10>)
    caf4:	4a03      	ldr	r2, [pc, #12]	; (cb04 <z_bss_zero+0x14>)
    caf6:	2100      	movs	r1, #0
    caf8:	1a12      	subs	r2, r2, r0
    cafa:	f002 fc27 	bl	f34c <z_early_memset>
}
    cafe:	bd08      	pop	{r3, pc}
    cb00:	2000c830 	.word	0x2000c830
    cb04:	2000cf34 	.word	0x2000cf34

0000cb08 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    cb08:	2300      	movs	r3, #0
    cb0a:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    cb0c:	b570      	push	{r4, r5, r6, lr}
    cb0e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    cb10:	e9cd 2304 	strd	r2, r3, [sp, #16]
    cb14:	220f      	movs	r2, #15
    cb16:	9301      	str	r3, [sp, #4]
    cb18:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    cb1c:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    cb1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    cb22:	4d0e      	ldr	r5, [pc, #56]	; (cb5c <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    cb24:	4e0e      	ldr	r6, [pc, #56]	; (cb60 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    cb26:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    cb2a:	490e      	ldr	r1, [pc, #56]	; (cb64 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    cb2c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    cb30:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    cb32:	fb02 1100 	mla	r1, r2, r0, r1
    cb36:	4b0c      	ldr	r3, [pc, #48]	; (cb68 <z_init_cpu+0x60>)
    cb38:	4630      	mov	r0, r6
    cb3a:	9500      	str	r5, [sp, #0]
    cb3c:	f000 f89a 	bl	cc74 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    cb40:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    cb42:	742c      	strb	r4, [r5, #16]
    cb44:	f023 0304 	bic.w	r3, r3, #4
    cb48:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    cb4a:	4b08      	ldr	r3, [pc, #32]	; (cb6c <z_init_cpu+0x64>)
    cb4c:	3401      	adds	r4, #1
    cb4e:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    cb52:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    cb54:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    cb56:	b006      	add	sp, #24
    cb58:	bd70      	pop	{r4, r5, r6, pc}
    cb5a:	bf00      	nop
    cb5c:	2000cecc 	.word	0x2000cecc
    cb60:	2000c850 	.word	0x2000c850
    cb64:	2000d738 	.word	0x2000d738
    cb68:	0000cd8d 	.word	0x0000cd8d
    cb6c:	2000cf38 	.word	0x2000cf38

0000cb70 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    cb70:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    cb72:	2000      	movs	r0, #0
{
    cb74:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    cb76:	f7ff ff7d 	bl	ca74 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    cb7a:	4b2e      	ldr	r3, [pc, #184]	; (cc34 <z_cstart+0xc4>)
	uint32_t msp =
    cb7c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    cb80:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    cb84:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cb88:	2400      	movs	r4, #0
    cb8a:	23e0      	movs	r3, #224	; 0xe0
    cb8c:	4d2a      	ldr	r5, [pc, #168]	; (cc38 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    cb8e:	4e2b      	ldr	r6, [pc, #172]	; (cc3c <z_cstart+0xcc>)
    cb90:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    cb94:	77ec      	strb	r4, [r5, #31]
    cb96:	762c      	strb	r4, [r5, #24]
    cb98:	766c      	strb	r4, [r5, #25]
    cb9a:	76ac      	strb	r4, [r5, #26]
    cb9c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    cba0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    cba2:	4f27      	ldr	r7, [pc, #156]	; (cc40 <z_cstart+0xd0>)
    cba4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    cba8:	626b      	str	r3, [r5, #36]	; 0x24
    cbaa:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    cbae:	f7fc fdaf 	bl	9710 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    cbb2:	f7fc fb49 	bl	9248 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    cbb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cbba:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    cbbc:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    cbbe:	f7fc ffb1 	bl	9b24 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    cbc2:	f7fc fe57 	bl	9874 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    cbc6:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    cbca:	ad06      	add	r5, sp, #24
    cbcc:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    cbce:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    cbd2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    cbd6:	f000 ff31 	bl	da3c <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    cbda:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    cbdc:	f002 fb8f 	bl	f2fe <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    cbe0:	2001      	movs	r0, #1
    cbe2:	f7ff ff47 	bl	ca74 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    cbe6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    cbe8:	4d16      	ldr	r5, [pc, #88]	; (cc44 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    cbea:	f7ff ff43 	bl	ca74 <z_sys_init_run_level>
	z_sched_init();
    cbee:	f000 fc1f 	bl	d430 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    cbf2:	4b15      	ldr	r3, [pc, #84]	; (cc48 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    cbf4:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    cbf6:	9305      	str	r3, [sp, #20]
    cbf8:	2301      	movs	r3, #1
    cbfa:	4914      	ldr	r1, [pc, #80]	; (cc4c <z_cstart+0xdc>)
    cbfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    cc00:	e9cd 4303 	strd	r4, r3, [sp, #12]
    cc04:	4628      	mov	r0, r5
    cc06:	463b      	mov	r3, r7
    cc08:	e9cd 4401 	strd	r4, r4, [sp, #4]
    cc0c:	9400      	str	r4, [sp, #0]
    cc0e:	f000 f831 	bl	cc74 <z_setup_new_thread>
    cc12:	4606      	mov	r6, r0
    cc14:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    cc16:	4628      	mov	r0, r5
    cc18:	f022 0204 	bic.w	r2, r2, #4
    cc1c:	736a      	strb	r2, [r5, #13]
    cc1e:	f002 fc70 	bl	f502 <z_ready_thread>
	z_init_cpu(0);
    cc22:	4620      	mov	r0, r4
    cc24:	f7ff ff70 	bl	cb08 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    cc28:	463a      	mov	r2, r7
    cc2a:	4631      	mov	r1, r6
    cc2c:	4628      	mov	r0, r5
    cc2e:	f7fc fbf5 	bl	941c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    cc32:	bf00      	nop
    cc34:	2000cf38 	.word	0x2000cf38
    cc38:	e000ed00 	.word	0xe000ed00
    cc3c:	2000cecc 	.word	0x2000cecc
    cc40:	0000cabd 	.word	0x0000cabd
    cc44:	2000c8d0 	.word	0x2000c8d0
    cc48:	000102db 	.word	0x000102db
    cc4c:	2000d878 	.word	0x2000d878

0000cc50 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    cc50:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    cc52:	4c06      	ldr	r4, [pc, #24]	; (cc6c <statics_init+0x1c>)
    cc54:	4d06      	ldr	r5, [pc, #24]	; (cc70 <statics_init+0x20>)
    cc56:	42ac      	cmp	r4, r5
    cc58:	d301      	bcc.n	cc5e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    cc5a:	2000      	movs	r0, #0
    cc5c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    cc5e:	4620      	mov	r0, r4
    cc60:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    cc64:	f002 fb76 	bl	f354 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    cc68:	3414      	adds	r4, #20
    cc6a:	e7f4      	b.n	cc56 <statics_init+0x6>
    cc6c:	2000c7f0 	.word	0x2000c7f0
    cc70:	2000c804 	.word	0x2000c804

0000cc74 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    cc74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    cc78:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    cc7a:	f100 0558 	add.w	r5, r0, #88	; 0x58
    cc7e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    cc80:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    cc82:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    cc86:	2500      	movs	r5, #0
{
    cc88:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    cc8a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    cc8c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    cc8e:	e9c0 5506 	strd	r5, r5, [r0, #24]
    cc92:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    cc94:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    cc96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    cc98:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    cc9c:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    cca0:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    cca2:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    cca4:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    cca6:	9202      	str	r2, [sp, #8]
    cca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    ccaa:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    ccae:	9201      	str	r2, [sp, #4]
    ccb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ccb2:	9200      	str	r2, [sp, #0]
    ccb4:	4642      	mov	r2, r8
    ccb6:	f7fc fb93 	bl	93e0 <arch_new_thread>
	if (!_current) {
    ccba:	4b05      	ldr	r3, [pc, #20]	; (ccd0 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    ccbc:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    ccbe:	689b      	ldr	r3, [r3, #8]
    ccc0:	b103      	cbz	r3, ccc4 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    ccc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    ccc4:	4640      	mov	r0, r8
    ccc6:	6723      	str	r3, [r4, #112]	; 0x70
    ccc8:	b004      	add	sp, #16
    ccca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ccce:	bf00      	nop
    ccd0:	2000cecc 	.word	0x2000cecc

0000ccd4 <z_init_static_threads>:
{
    ccd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ccd8:	4c29      	ldr	r4, [pc, #164]	; (cd80 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    ccda:	4d2a      	ldr	r5, [pc, #168]	; (cd84 <z_init_static_threads+0xb0>)
{
    ccdc:	b087      	sub	sp, #28
    ccde:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    cce0:	42ae      	cmp	r6, r5
    cce2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    cce6:	d30f      	bcc.n	cd08 <z_init_static_threads+0x34>
	k_sched_lock();
    cce8:	f000 fb72 	bl	d3d0 <k_sched_lock>
    ccec:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    ccf0:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    ccf4:	4c22      	ldr	r4, [pc, #136]	; (cd80 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    ccf6:	f8df 9090 	ldr.w	r9, [pc, #144]	; cd88 <z_init_static_threads+0xb4>
    ccfa:	42ac      	cmp	r4, r5
    ccfc:	d320      	bcc.n	cd40 <z_init_static_threads+0x6c>
}
    ccfe:	b007      	add	sp, #28
    cd00:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    cd04:	f000 bb78 	b.w	d3f8 <k_sched_unlock>
		z_setup_new_thread(
    cd08:	f854 3c04 	ldr.w	r3, [r4, #-4]
    cd0c:	9305      	str	r3, [sp, #20]
    cd0e:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    cd12:	9304      	str	r3, [sp, #16]
    cd14:	f854 3c10 	ldr.w	r3, [r4, #-16]
    cd18:	9303      	str	r3, [sp, #12]
    cd1a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    cd1e:	9302      	str	r3, [sp, #8]
    cd20:	f854 3c18 	ldr.w	r3, [r4, #-24]
    cd24:	9301      	str	r3, [sp, #4]
    cd26:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    cd2a:	9300      	str	r3, [sp, #0]
    cd2c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    cd30:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    cd34:	f7ff ff9e 	bl	cc74 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    cd38:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    cd3c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    cd3e:	e7ce      	b.n	ccde <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    cd40:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cd42:	1c5a      	adds	r2, r3, #1
    cd44:	d00d      	beq.n	cd62 <z_init_static_threads+0x8e>
    cd46:	2100      	movs	r1, #0
    cd48:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    cd4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    cd4e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    cd52:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    cd56:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    cd5a:	d104      	bne.n	cd66 <z_init_static_threads+0x92>
	z_sched_start(thread);
    cd5c:	4640      	mov	r0, r8
    cd5e:	f000 fae7 	bl	d330 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    cd62:	342c      	adds	r4, #44	; 0x2c
    cd64:	e7c9      	b.n	ccfa <z_init_static_threads+0x26>
    cd66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cd6a:	2300      	movs	r3, #0
    cd6c:	f7fb f9ea 	bl	8144 <__aeabi_uldivmod>
    cd70:	4602      	mov	r2, r0
    cd72:	460b      	mov	r3, r1
    cd74:	f108 0018 	add.w	r0, r8, #24
    cd78:	4649      	mov	r1, r9
    cd7a:	f000 fcc3 	bl	d704 <z_add_timeout>
    cd7e:	e7f0      	b.n	cd62 <z_init_static_threads+0x8e>
    cd80:	0000fd60 	.word	0x0000fd60
    cd84:	0000fd60 	.word	0x0000fd60
    cd88:	0000f58b 	.word	0x0000f58b

0000cd8c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    cd8c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    cd8e:	4c0b      	ldr	r4, [pc, #44]	; (cdbc <idle+0x30>)
    cd90:	4d0b      	ldr	r5, [pc, #44]	; (cdc0 <idle+0x34>)
	__asm__ volatile(
    cd92:	f04f 0220 	mov.w	r2, #32
    cd96:	f3ef 8311 	mrs	r3, BASEPRI
    cd9a:	f382 8812 	msr	BASEPRI_MAX, r2
    cd9e:	f3bf 8f6f 	isb	sy
    cda2:	f002 fc7d 	bl	f6a0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    cda6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    cda8:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    cdaa:	b913      	cbnz	r3, cdb2 <idle+0x26>
	arch_cpu_idle();
    cdac:	f7fc fa52 	bl	9254 <arch_cpu_idle>
}
    cdb0:	e7ef      	b.n	cd92 <idle+0x6>
    cdb2:	f7fc f981 	bl	90b8 <pm_system_suspend>
    cdb6:	2800      	cmp	r0, #0
    cdb8:	d1eb      	bne.n	cd92 <idle+0x6>
    cdba:	e7f7      	b.n	cdac <idle+0x20>
    cdbc:	2000cecc 	.word	0x2000cecc
    cdc0:	2000cf31 	.word	0x2000cf31

0000cdc4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    cdc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    cdc8:	4604      	mov	r4, r0
    cdca:	4617      	mov	r7, r2
    cdcc:	461e      	mov	r6, r3
    cdce:	f04f 0320 	mov.w	r3, #32
    cdd2:	f3ef 8811 	mrs	r8, BASEPRI
    cdd6:	f383 8812 	msr	BASEPRI_MAX, r3
    cdda:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    cdde:	68c3      	ldr	r3, [r0, #12]
    cde0:	4a33      	ldr	r2, [pc, #204]	; (ceb0 <z_impl_k_mutex_lock+0xec>)
    cde2:	b17b      	cbz	r3, ce04 <z_impl_k_mutex_lock+0x40>
    cde4:	6880      	ldr	r0, [r0, #8]
    cde6:	6891      	ldr	r1, [r2, #8]
    cde8:	4288      	cmp	r0, r1
    cdea:	d019      	beq.n	ce20 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    cdec:	ea57 0306 	orrs.w	r3, r7, r6
    cdf0:	d118      	bne.n	ce24 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    cdf2:	f388 8811 	msr	BASEPRI, r8
    cdf6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    cdfa:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    cdfe:	b002      	add	sp, #8
    ce00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    ce04:	6891      	ldr	r1, [r2, #8]
    ce06:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    ce0a:	3301      	adds	r3, #1
    ce0c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    ce0e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    ce10:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    ce12:	60a3      	str	r3, [r4, #8]
    ce14:	f388 8811 	msr	BASEPRI, r8
    ce18:	f3bf 8f6f 	isb	sy
		return 0;
    ce1c:	2000      	movs	r0, #0
    ce1e:	e7ee      	b.n	cdfe <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    ce20:	6921      	ldr	r1, [r4, #16]
    ce22:	e7f2      	b.n	ce0a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    ce24:	f991 100e 	ldrsb.w	r1, [r1, #14]
    ce28:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    ce2c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    ce30:	4299      	cmp	r1, r3
    ce32:	bfa8      	it	ge
    ce34:	4619      	movge	r1, r3
    ce36:	4291      	cmp	r1, r2
    ce38:	bfb8      	it	lt
    ce3a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    ce3c:	428b      	cmp	r3, r1
    ce3e:	dd2e      	ble.n	ce9e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    ce40:	f002 fb11 	bl	f466 <adjust_owner_prio.isra.0>
    ce44:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    ce46:	4622      	mov	r2, r4
    ce48:	4641      	mov	r1, r8
    ce4a:	e9cd 7600 	strd	r7, r6, [sp]
    ce4e:	4819      	ldr	r0, [pc, #100]	; (ceb4 <z_impl_k_mutex_lock+0xf0>)
    ce50:	f000 f9f8 	bl	d244 <z_pend_curr>
	if (got_mutex == 0) {
    ce54:	2800      	cmp	r0, #0
    ce56:	d0e1      	beq.n	ce1c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    ce58:	f04f 0320 	mov.w	r3, #32
    ce5c:	f3ef 8611 	mrs	r6, BASEPRI
    ce60:	f383 8812 	msr	BASEPRI_MAX, r3
    ce64:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    ce68:	68a0      	ldr	r0, [r4, #8]
    ce6a:	b1d0      	cbz	r0, cea2 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ce6c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ce6e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ce70:	429c      	cmp	r4, r3
    ce72:	d00a      	beq.n	ce8a <z_impl_k_mutex_lock+0xc6>
    ce74:	b14b      	cbz	r3, ce8a <z_impl_k_mutex_lock+0xc6>
    ce76:	f993 300e 	ldrsb.w	r3, [r3, #14]
    ce7a:	4299      	cmp	r1, r3
    ce7c:	bfa8      	it	ge
    ce7e:	4619      	movge	r1, r3
    ce80:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    ce84:	4299      	cmp	r1, r3
    ce86:	bfb8      	it	lt
    ce88:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    ce8a:	f002 faec 	bl	f466 <adjust_owner_prio.isra.0>
    ce8e:	b140      	cbz	r0, cea2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    ce90:	4631      	mov	r1, r6
    ce92:	4808      	ldr	r0, [pc, #32]	; (ceb4 <z_impl_k_mutex_lock+0xf0>)
    ce94:	f000 fa3a 	bl	d30c <z_reschedule>
	return -EAGAIN;
    ce98:	f06f 000a 	mvn.w	r0, #10
    ce9c:	e7af      	b.n	cdfe <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    ce9e:	2500      	movs	r5, #0
    cea0:	e7d1      	b.n	ce46 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    cea2:	2d00      	cmp	r5, #0
    cea4:	d1f4      	bne.n	ce90 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    cea6:	f386 8811 	msr	BASEPRI, r6
    ceaa:	f3bf 8f6f 	isb	sy
    ceae:	e7f3      	b.n	ce98 <z_impl_k_mutex_lock+0xd4>
    ceb0:	2000cecc 	.word	0x2000cecc
    ceb4:	2000cf32 	.word	0x2000cf32

0000ceb8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    ceb8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    ceba:	6883      	ldr	r3, [r0, #8]
{
    cebc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    cebe:	b36b      	cbz	r3, cf1c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    cec0:	4a19      	ldr	r2, [pc, #100]	; (cf28 <z_impl_k_mutex_unlock+0x70>)
    cec2:	6892      	ldr	r2, [r2, #8]
    cec4:	4293      	cmp	r3, r2
    cec6:	d12c      	bne.n	cf22 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    cec8:	68c3      	ldr	r3, [r0, #12]
    ceca:	2b01      	cmp	r3, #1
    cecc:	d903      	bls.n	ced6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    cece:	3b01      	subs	r3, #1
    ced0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    ced2:	2000      	movs	r0, #0
}
    ced4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    ced6:	f04f 0320 	mov.w	r3, #32
    ceda:	f3ef 8511 	mrs	r5, BASEPRI
    cede:	f383 8812 	msr	BASEPRI_MAX, r3
    cee2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    cee6:	6901      	ldr	r1, [r0, #16]
    cee8:	6880      	ldr	r0, [r0, #8]
    ceea:	f002 fabc 	bl	f466 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    ceee:	4620      	mov	r0, r4
    cef0:	f002 fb66 	bl	f5c0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    cef4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    cef6:	b158      	cbz	r0, cf10 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    cef8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    cefc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    cefe:	2200      	movs	r2, #0
    cf00:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    cf02:	f002 fafe 	bl	f502 <z_ready_thread>
		z_reschedule(&lock, key);
    cf06:	4629      	mov	r1, r5
    cf08:	4808      	ldr	r0, [pc, #32]	; (cf2c <z_impl_k_mutex_unlock+0x74>)
    cf0a:	f000 f9ff 	bl	d30c <z_reschedule>
    cf0e:	e7e0      	b.n	ced2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    cf10:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    cf12:	f385 8811 	msr	BASEPRI, r5
    cf16:	f3bf 8f6f 	isb	sy
    cf1a:	e7da      	b.n	ced2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    cf1c:	f06f 0015 	mvn.w	r0, #21
    cf20:	e7d8      	b.n	ced4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    cf22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cf26:	e7d5      	b.n	ced4 <z_impl_k_mutex_unlock+0x1c>
    cf28:	2000cecc 	.word	0x2000cecc
    cf2c:	2000cf32 	.word	0x2000cf32

0000cf30 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    cf30:	b538      	push	{r3, r4, r5, lr}
    cf32:	4604      	mov	r4, r0
	__asm__ volatile(
    cf34:	f04f 0320 	mov.w	r3, #32
    cf38:	f3ef 8511 	mrs	r5, BASEPRI
    cf3c:	f383 8812 	msr	BASEPRI_MAX, r3
    cf40:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    cf44:	f002 fb3c 	bl	f5c0 <z_unpend_first_thread>

	if (thread != NULL) {
    cf48:	b148      	cbz	r0, cf5e <z_impl_k_sem_give+0x2e>
    cf4a:	2200      	movs	r2, #0
    cf4c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    cf4e:	f002 fad8 	bl	f502 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    cf52:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    cf54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    cf58:	4804      	ldr	r0, [pc, #16]	; (cf6c <z_impl_k_sem_give+0x3c>)
    cf5a:	f000 b9d7 	b.w	d30c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    cf5e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    cf62:	429a      	cmp	r2, r3
    cf64:	bf18      	it	ne
    cf66:	3301      	addne	r3, #1
    cf68:	60a3      	str	r3, [r4, #8]
}
    cf6a:	e7f2      	b.n	cf52 <z_impl_k_sem_give+0x22>
    cf6c:	2000cf32 	.word	0x2000cf32

0000cf70 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    cf70:	b513      	push	{r0, r1, r4, lr}
    cf72:	f04f 0420 	mov.w	r4, #32
    cf76:	f3ef 8111 	mrs	r1, BASEPRI
    cf7a:	f384 8812 	msr	BASEPRI_MAX, r4
    cf7e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    cf82:	6884      	ldr	r4, [r0, #8]
    cf84:	b144      	cbz	r4, cf98 <z_impl_k_sem_take+0x28>
		sem->count--;
    cf86:	3c01      	subs	r4, #1
    cf88:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    cf8a:	f381 8811 	msr	BASEPRI, r1
    cf8e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    cf92:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    cf94:	b002      	add	sp, #8
    cf96:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    cf98:	ea52 0403 	orrs.w	r4, r2, r3
    cf9c:	d106      	bne.n	cfac <z_impl_k_sem_take+0x3c>
    cf9e:	f381 8811 	msr	BASEPRI, r1
    cfa2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    cfa6:	f06f 000f 	mvn.w	r0, #15
    cfaa:	e7f3      	b.n	cf94 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    cfac:	e9cd 2300 	strd	r2, r3, [sp]
    cfb0:	4602      	mov	r2, r0
    cfb2:	4802      	ldr	r0, [pc, #8]	; (cfbc <z_impl_k_sem_take+0x4c>)
    cfb4:	f000 f946 	bl	d244 <z_pend_curr>
	return ret;
    cfb8:	e7ec      	b.n	cf94 <z_impl_k_sem_take+0x24>
    cfba:	bf00      	nop
    cfbc:	2000cf32 	.word	0x2000cf32

0000cfc0 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    cfc0:	89c3      	ldrh	r3, [r0, #14]
    cfc2:	2b7f      	cmp	r3, #127	; 0x7f
    cfc4:	d812      	bhi.n	cfec <sliceable+0x2c>
	int ret = slice_ticks;
    cfc6:	4b0a      	ldr	r3, [pc, #40]	; (cff0 <sliceable+0x30>)
    cfc8:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    cfca:	b163      	cbz	r3, cfe6 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    cfcc:	4b09      	ldr	r3, [pc, #36]	; (cff4 <sliceable+0x34>)
    cfce:	f990 200e 	ldrsb.w	r2, [r0, #14]
    cfd2:	681b      	ldr	r3, [r3, #0]
    cfd4:	429a      	cmp	r2, r3
    cfd6:	db09      	blt.n	cfec <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    cfd8:	7b43      	ldrb	r3, [r0, #13]
    cfda:	06db      	lsls	r3, r3, #27
    cfdc:	d106      	bne.n	cfec <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    cfde:	4b06      	ldr	r3, [pc, #24]	; (cff8 <sliceable+0x38>)
    cfe0:	1ac3      	subs	r3, r0, r3
    cfe2:	bf18      	it	ne
    cfe4:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    cfe6:	f003 0001 	and.w	r0, r3, #1
    cfea:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    cfec:	2300      	movs	r3, #0
    cfee:	e7fa      	b.n	cfe6 <sliceable+0x26>
    cff0:	2000cef8 	.word	0x2000cef8
    cff4:	2000cef4 	.word	0x2000cef4
    cff8:	2000c850 	.word	0x2000c850

0000cffc <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
    cffc:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    cffe:	4b04      	ldr	r3, [pc, #16]	; (d010 <slice_timeout+0x14>)
    d000:	1ac0      	subs	r0, r0, r3
    d002:	4b04      	ldr	r3, [pc, #16]	; (d014 <slice_timeout+0x18>)
    d004:	10c0      	asrs	r0, r0, #3
    d006:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
    d008:	4b03      	ldr	r3, [pc, #12]	; (d018 <slice_timeout+0x1c>)
    d00a:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    d00c:	4770      	bx	lr
    d00e:	bf00      	nop
    d010:	2000c950 	.word	0x2000c950
    d014:	aaaaaaab 	.word	0xaaaaaaab
    d018:	2000cf32 	.word	0x2000cf32

0000d01c <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    d01c:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    d01e:	4b0e      	ldr	r3, [pc, #56]	; (d058 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    d020:	4c0e      	ldr	r4, [pc, #56]	; (d05c <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    d022:	7c1e      	ldrb	r6, [r3, #16]
{
    d024:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    d026:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    d02a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    d02e:	4620      	mov	r0, r4
    d030:	f002 fb20 	bl	f674 <z_abort_timeout>
	slice_expired[cpu] = false;
    d034:	2200      	movs	r2, #0
    d036:	4b0a      	ldr	r3, [pc, #40]	; (d060 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
    d038:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    d03a:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    d03c:	f7ff ffc0 	bl	cfc0 <sliceable>
    d040:	b148      	cbz	r0, d056 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    d042:	4b08      	ldr	r3, [pc, #32]	; (d064 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    d044:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
    d046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
    d04a:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    d04c:	4906      	ldr	r1, [pc, #24]	; (d068 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    d04e:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    d050:	17d3      	asrs	r3, r2, #31
    d052:	f000 bb57 	b.w	d704 <z_add_timeout>
}
    d056:	bd70      	pop	{r4, r5, r6, pc}
    d058:	2000cecc 	.word	0x2000cecc
    d05c:	2000c950 	.word	0x2000c950
    d060:	2000cf32 	.word	0x2000cf32
    d064:	2000cef8 	.word	0x2000cef8
    d068:	0000cffd 	.word	0x0000cffd

0000d06c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    d06c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    d06e:	4d0d      	ldr	r5, [pc, #52]	; (d0a4 <update_cache+0x38>)
    d070:	462b      	mov	r3, r5
    d072:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d076:	429c      	cmp	r4, r3
    d078:	d000      	beq.n	d07c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    d07a:	b904      	cbnz	r4, d07e <update_cache+0x12>
    d07c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    d07e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    d080:	b938      	cbnz	r0, d092 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    d082:	7b5a      	ldrb	r2, [r3, #13]
    d084:	06d2      	lsls	r2, r2, #27
    d086:	d104      	bne.n	d092 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    d088:	69a2      	ldr	r2, [r4, #24]
    d08a:	b912      	cbnz	r2, d092 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    d08c:	89da      	ldrh	r2, [r3, #14]
    d08e:	2a7f      	cmp	r2, #127	; 0x7f
    d090:	d805      	bhi.n	d09e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    d092:	429c      	cmp	r4, r3
    d094:	d002      	beq.n	d09c <update_cache+0x30>
			z_reset_time_slice(thread);
    d096:	4620      	mov	r0, r4
    d098:	f7ff ffc0 	bl	d01c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    d09c:	4623      	mov	r3, r4
    d09e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    d0a0:	bd38      	pop	{r3, r4, r5, pc}
    d0a2:	bf00      	nop
    d0a4:	2000cecc 	.word	0x2000cecc

0000d0a8 <move_thread_to_end_of_prio_q>:
{
    d0a8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    d0aa:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    d0ae:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    d0b0:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    d0b2:	7b43      	ldrb	r3, [r0, #13]
    d0b4:	da04      	bge.n	d0c0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d0b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d0ba:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    d0bc:	f002 f9e7 	bl	f48e <sys_dlist_remove>
	return list->head == list;
    d0c0:	4a15      	ldr	r2, [pc, #84]	; (d118 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    d0c2:	7b4b      	ldrb	r3, [r1, #13]
    d0c4:	4610      	mov	r0, r2
    d0c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d0ca:	734b      	strb	r3, [r1, #13]
    d0cc:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    d0d0:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d0d2:	4283      	cmp	r3, r0
    d0d4:	bf08      	it	eq
    d0d6:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d0d8:	b923      	cbnz	r3, d0e4 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    d0da:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    d0de:	6021      	str	r1, [r4, #0]
	list->tail = node;
    d0e0:	6211      	str	r1, [r2, #32]
}
    d0e2:	e00c      	b.n	d0fe <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    d0e4:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    d0e8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    d0ec:	42b5      	cmp	r5, r6
    d0ee:	d00e      	beq.n	d10e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d0f0:	42ae      	cmp	r6, r5
    d0f2:	dd0c      	ble.n	d10e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    d0f4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    d0f6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    d0fa:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    d0fc:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    d0fe:	6890      	ldr	r0, [r2, #8]
}
    d100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    d104:	1a43      	subs	r3, r0, r1
    d106:	4258      	negs	r0, r3
    d108:	4158      	adcs	r0, r3
    d10a:	f7ff bfaf 	b.w	d06c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    d10e:	429c      	cmp	r4, r3
    d110:	d0e3      	beq.n	d0da <move_thread_to_end_of_prio_q+0x32>
    d112:	681b      	ldr	r3, [r3, #0]
    d114:	e7e0      	b.n	d0d8 <move_thread_to_end_of_prio_q+0x30>
    d116:	bf00      	nop
    d118:	2000cecc 	.word	0x2000cecc

0000d11c <ready_thread>:
{
    d11c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    d11e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    d122:	7b42      	ldrb	r2, [r0, #13]
    d124:	2b00      	cmp	r3, #0
    d126:	db29      	blt.n	d17c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    d128:	06d3      	lsls	r3, r2, #27
    d12a:	d127      	bne.n	d17c <ready_thread+0x60>
	return node->next != NULL;
    d12c:	6983      	ldr	r3, [r0, #24]
    d12e:	bb2b      	cbnz	r3, d17c <ready_thread+0x60>
	return list->head == list;
    d130:	4913      	ldr	r1, [pc, #76]	; (d180 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    d132:	f062 027f 	orn	r2, r2, #127	; 0x7f
    d136:	7342      	strb	r2, [r0, #13]
    d138:	460a      	mov	r2, r1
    d13a:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d13e:	4294      	cmp	r4, r2
    d140:	bf18      	it	ne
    d142:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    d144:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d146:	b923      	cbnz	r3, d152 <ready_thread+0x36>
	node->prev = tail;
    d148:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    d14c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    d14e:	6208      	str	r0, [r1, #32]
}
    d150:	e00c      	b.n	d16c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    d152:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    d156:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    d15a:	42b5      	cmp	r5, r6
    d15c:	d00a      	beq.n	d174 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d15e:	42ae      	cmp	r6, r5
    d160:	dd08      	ble.n	d174 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    d162:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    d164:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    d168:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    d16a:	6058      	str	r0, [r3, #4]
		update_cache(0);
    d16c:	2000      	movs	r0, #0
}
    d16e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    d170:	f7ff bf7c 	b.w	d06c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    d174:	42a3      	cmp	r3, r4
    d176:	d0e7      	beq.n	d148 <ready_thread+0x2c>
    d178:	681b      	ldr	r3, [r3, #0]
    d17a:	e7e4      	b.n	d146 <ready_thread+0x2a>
}
    d17c:	bc70      	pop	{r4, r5, r6}
    d17e:	4770      	bx	lr
    d180:	2000cecc 	.word	0x2000cecc

0000d184 <unready_thread>:
{
    d184:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    d186:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    d18a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    d18c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    d18e:	7b43      	ldrb	r3, [r0, #13]
    d190:	da04      	bge.n	d19c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d196:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    d198:	f002 f979 	bl	f48e <sys_dlist_remove>
	update_cache(thread == _current);
    d19c:	4b04      	ldr	r3, [pc, #16]	; (d1b0 <unready_thread+0x2c>)
    d19e:	6898      	ldr	r0, [r3, #8]
    d1a0:	1a43      	subs	r3, r0, r1
    d1a2:	4258      	negs	r0, r3
    d1a4:	4158      	adcs	r0, r3
}
    d1a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    d1aa:	f7ff bf5f 	b.w	d06c <update_cache>
    d1ae:	bf00      	nop
    d1b0:	2000cecc 	.word	0x2000cecc

0000d1b4 <pend_locked>:
{
    d1b4:	b570      	push	{r4, r5, r6, lr}
    d1b6:	4615      	mov	r5, r2
    d1b8:	461c      	mov	r4, r3
    d1ba:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    d1bc:	f002 f979 	bl	f4b2 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d1c0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    d1c4:	bf08      	it	eq
    d1c6:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    d1ca:	d008      	beq.n	d1de <pend_locked+0x2a>
    d1cc:	462a      	mov	r2, r5
    d1ce:	4623      	mov	r3, r4
    d1d0:	f106 0018 	add.w	r0, r6, #24
    d1d4:	4902      	ldr	r1, [pc, #8]	; (d1e0 <pend_locked+0x2c>)
}
    d1d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d1da:	f000 ba93 	b.w	d704 <z_add_timeout>
    d1de:	bd70      	pop	{r4, r5, r6, pc}
    d1e0:	0000f58b 	.word	0x0000f58b

0000d1e4 <z_time_slice>:
{
    d1e4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d1e6:	f04f 0320 	mov.w	r3, #32
    d1ea:	f3ef 8511 	mrs	r5, BASEPRI
    d1ee:	f383 8812 	msr	BASEPRI_MAX, r3
    d1f2:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    d1f6:	4b10      	ldr	r3, [pc, #64]	; (d238 <z_time_slice+0x54>)
	if (pending_current == curr) {
    d1f8:	4a10      	ldr	r2, [pc, #64]	; (d23c <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    d1fa:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    d1fc:	6810      	ldr	r0, [r2, #0]
    d1fe:	42a0      	cmp	r0, r4
    d200:	d106      	bne.n	d210 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    d202:	f7ff ff0b 	bl	d01c <z_reset_time_slice>
	__asm__ volatile(
    d206:	f385 8811 	msr	BASEPRI, r5
    d20a:	f3bf 8f6f 	isb	sy
}
    d20e:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    d210:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    d212:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    d214:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    d216:	4a0a      	ldr	r2, [pc, #40]	; (d240 <z_time_slice+0x5c>)
    d218:	5cd3      	ldrb	r3, [r2, r3]
    d21a:	2b00      	cmp	r3, #0
    d21c:	d0f3      	beq.n	d206 <z_time_slice+0x22>
    d21e:	4620      	mov	r0, r4
    d220:	f7ff fece 	bl	cfc0 <sliceable>
    d224:	2800      	cmp	r0, #0
    d226:	d0ee      	beq.n	d206 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    d228:	7b63      	ldrb	r3, [r4, #13]
    d22a:	06db      	lsls	r3, r3, #27
    d22c:	d102      	bne.n	d234 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    d22e:	4620      	mov	r0, r4
    d230:	f7ff ff3a 	bl	d0a8 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    d234:	4620      	mov	r0, r4
    d236:	e7e4      	b.n	d202 <z_time_slice+0x1e>
    d238:	2000cecc 	.word	0x2000cecc
    d23c:	2000cef0 	.word	0x2000cef0
    d240:	2000cf32 	.word	0x2000cf32

0000d244 <z_pend_curr>:
{
    d244:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    d246:	480c      	ldr	r0, [pc, #48]	; (d278 <z_pend_curr+0x34>)
    d248:	4d0c      	ldr	r5, [pc, #48]	; (d27c <z_pend_curr+0x38>)
    d24a:	6886      	ldr	r6, [r0, #8]
{
    d24c:	460c      	mov	r4, r1
	pending_current = _current;
    d24e:	602e      	str	r6, [r5, #0]
{
    d250:	4611      	mov	r1, r2
    d252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    d256:	f04f 0620 	mov.w	r6, #32
    d25a:	f3ef 8511 	mrs	r5, BASEPRI
    d25e:	f386 8812 	msr	BASEPRI_MAX, r6
    d262:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    d266:	6880      	ldr	r0, [r0, #8]
    d268:	f7ff ffa4 	bl	d1b4 <pend_locked>
	ret = arch_swap(key);
    d26c:	4620      	mov	r0, r4
}
    d26e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d272:	f7fc b85b 	b.w	932c <arch_swap>
    d276:	bf00      	nop
    d278:	2000cecc 	.word	0x2000cecc
    d27c:	2000cef0 	.word	0x2000cef0

0000d280 <z_set_prio>:
{
    d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d282:	4604      	mov	r4, r0
    d284:	f04f 0320 	mov.w	r3, #32
    d288:	f3ef 8611 	mrs	r6, BASEPRI
    d28c:	f383 8812 	msr	BASEPRI_MAX, r3
    d290:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    d294:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    d296:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    d298:	06da      	lsls	r2, r3, #27
    d29a:	d119      	bne.n	d2d0 <z_set_prio+0x50>
	return node->next != NULL;
    d29c:	6985      	ldr	r5, [r0, #24]
    d29e:	b9bd      	cbnz	r5, d2d0 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d2a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d2a4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    d2a6:	f002 f8f2 	bl	f48e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    d2aa:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    d2ac:	4a16      	ldr	r2, [pc, #88]	; (d308 <z_set_prio+0x88>)
    d2ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d2b2:	7343      	strb	r3, [r0, #13]
    d2b4:	4613      	mov	r3, r2
				thread->base.prio = prio;
    d2b6:	7381      	strb	r1, [r0, #14]
    d2b8:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d2bc:	4298      	cmp	r0, r3
    d2be:	bf18      	it	ne
    d2c0:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    d2c2:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d2c4:	b95d      	cbnz	r5, d2de <z_set_prio+0x5e>
	node->prev = tail;
    d2c6:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    d2ca:	6004      	str	r4, [r0, #0]
	list->tail = node;
    d2cc:	6214      	str	r4, [r2, #32]
}
    d2ce:	e011      	b.n	d2f4 <z_set_prio+0x74>
    d2d0:	2000      	movs	r0, #0
			thread->base.prio = prio;
    d2d2:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    d2d4:	f386 8811 	msr	BASEPRI, r6
    d2d8:	f3bf 8f6f 	isb	sy
}
    d2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    d2de:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    d2e2:	42b9      	cmp	r1, r7
    d2e4:	d00b      	beq.n	d2fe <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d2e6:	428f      	cmp	r7, r1
    d2e8:	dd09      	ble.n	d2fe <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    d2ea:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    d2ec:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    d2f0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    d2f2:	606c      	str	r4, [r5, #4]
			update_cache(1);
    d2f4:	2001      	movs	r0, #1
    d2f6:	f7ff feb9 	bl	d06c <update_cache>
    d2fa:	2001      	movs	r0, #1
    d2fc:	e7ea      	b.n	d2d4 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    d2fe:	42a8      	cmp	r0, r5
    d300:	d0e1      	beq.n	d2c6 <z_set_prio+0x46>
    d302:	682d      	ldr	r5, [r5, #0]
    d304:	e7de      	b.n	d2c4 <z_set_prio+0x44>
    d306:	bf00      	nop
    d308:	2000cecc 	.word	0x2000cecc

0000d30c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    d30c:	b949      	cbnz	r1, d322 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d30e:	f3ef 8005 	mrs	r0, IPSR
    d312:	b930      	cbnz	r0, d322 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    d314:	4b05      	ldr	r3, [pc, #20]	; (d32c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    d316:	699a      	ldr	r2, [r3, #24]
    d318:	689b      	ldr	r3, [r3, #8]
    d31a:	429a      	cmp	r2, r3
    d31c:	d001      	beq.n	d322 <z_reschedule+0x16>
    d31e:	f7fc b805 	b.w	932c <arch_swap>
    d322:	f381 8811 	msr	BASEPRI, r1
    d326:	f3bf 8f6f 	isb	sy
}
    d32a:	4770      	bx	lr
    d32c:	2000cecc 	.word	0x2000cecc

0000d330 <z_sched_start>:
{
    d330:	b510      	push	{r4, lr}
	__asm__ volatile(
    d332:	f04f 0220 	mov.w	r2, #32
    d336:	f3ef 8411 	mrs	r4, BASEPRI
    d33a:	f382 8812 	msr	BASEPRI_MAX, r2
    d33e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    d342:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    d344:	0751      	lsls	r1, r2, #29
    d346:	d404      	bmi.n	d352 <z_sched_start+0x22>
	__asm__ volatile(
    d348:	f384 8811 	msr	BASEPRI, r4
    d34c:	f3bf 8f6f 	isb	sy
}
    d350:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    d352:	f022 0204 	bic.w	r2, r2, #4
    d356:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    d358:	f7ff fee0 	bl	d11c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    d35c:	4621      	mov	r1, r4
}
    d35e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    d362:	4801      	ldr	r0, [pc, #4]	; (d368 <z_sched_start+0x38>)
    d364:	f7ff bfd2 	b.w	d30c <z_reschedule>
    d368:	2000cf33 	.word	0x2000cf33

0000d36c <z_impl_k_thread_suspend>:
{
    d36c:	b570      	push	{r4, r5, r6, lr}
    d36e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    d370:	3018      	adds	r0, #24
    d372:	f002 f97f 	bl	f674 <z_abort_timeout>
	__asm__ volatile(
    d376:	f04f 0320 	mov.w	r3, #32
    d37a:	f3ef 8611 	mrs	r6, BASEPRI
    d37e:	f383 8812 	msr	BASEPRI_MAX, r3
    d382:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    d386:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    d38a:	7b63      	ldrb	r3, [r4, #13]
    d38c:	2a00      	cmp	r2, #0
    d38e:	da05      	bge.n	d39c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    d394:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d396:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    d398:	f002 f879 	bl	f48e <sys_dlist_remove>
		update_cache(thread == _current);
    d39c:	4d0b      	ldr	r5, [pc, #44]	; (d3cc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    d39e:	7b63      	ldrb	r3, [r4, #13]
    d3a0:	68a8      	ldr	r0, [r5, #8]
    d3a2:	f043 0310 	orr.w	r3, r3, #16
    d3a6:	7363      	strb	r3, [r4, #13]
    d3a8:	1b03      	subs	r3, r0, r4
    d3aa:	4258      	negs	r0, r3
    d3ac:	4158      	adcs	r0, r3
    d3ae:	f7ff fe5d 	bl	d06c <update_cache>
	__asm__ volatile(
    d3b2:	f386 8811 	msr	BASEPRI, r6
    d3b6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    d3ba:	68ab      	ldr	r3, [r5, #8]
    d3bc:	42a3      	cmp	r3, r4
    d3be:	d103      	bne.n	d3c8 <z_impl_k_thread_suspend+0x5c>
}
    d3c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    d3c4:	f002 b93c 	b.w	f640 <z_reschedule_unlocked>
}
    d3c8:	bd70      	pop	{r4, r5, r6, pc}
    d3ca:	bf00      	nop
    d3cc:	2000cecc 	.word	0x2000cecc

0000d3d0 <k_sched_lock>:
	__asm__ volatile(
    d3d0:	f04f 0320 	mov.w	r3, #32
    d3d4:	f3ef 8111 	mrs	r1, BASEPRI
    d3d8:	f383 8812 	msr	BASEPRI_MAX, r3
    d3dc:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    d3e0:	4b04      	ldr	r3, [pc, #16]	; (d3f4 <k_sched_lock+0x24>)
    d3e2:	689a      	ldr	r2, [r3, #8]
    d3e4:	7bd3      	ldrb	r3, [r2, #15]
    d3e6:	3b01      	subs	r3, #1
    d3e8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    d3ea:	f381 8811 	msr	BASEPRI, r1
    d3ee:	f3bf 8f6f 	isb	sy
}
    d3f2:	4770      	bx	lr
    d3f4:	2000cecc 	.word	0x2000cecc

0000d3f8 <k_sched_unlock>:
{
    d3f8:	b510      	push	{r4, lr}
	__asm__ volatile(
    d3fa:	f04f 0320 	mov.w	r3, #32
    d3fe:	f3ef 8411 	mrs	r4, BASEPRI
    d402:	f383 8812 	msr	BASEPRI_MAX, r3
    d406:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    d40a:	4b08      	ldr	r3, [pc, #32]	; (d42c <k_sched_unlock+0x34>)
		update_cache(0);
    d40c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    d40e:	689a      	ldr	r2, [r3, #8]
    d410:	7bd3      	ldrb	r3, [r2, #15]
    d412:	3301      	adds	r3, #1
    d414:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    d416:	f7ff fe29 	bl	d06c <update_cache>
	__asm__ volatile(
    d41a:	f384 8811 	msr	BASEPRI, r4
    d41e:	f3bf 8f6f 	isb	sy
}
    d422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    d426:	f002 b90b 	b.w	f640 <z_reschedule_unlocked>
    d42a:	bf00      	nop
    d42c:	2000cecc 	.word	0x2000cecc

0000d430 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    d430:	4b02      	ldr	r3, [pc, #8]	; (d43c <z_sched_init+0xc>)
    d432:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    d436:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    d43a:	4770      	bx	lr
    d43c:	2000cecc 	.word	0x2000cecc

0000d440 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    d440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    d442:	f04f 0320 	mov.w	r3, #32
    d446:	f3ef 8511 	mrs	r5, BASEPRI
    d44a:	f383 8812 	msr	BASEPRI_MAX, r3
    d44e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    d452:	4919      	ldr	r1, [pc, #100]	; (d4b8 <z_impl_k_yield+0x78>)
    d454:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d456:	7b43      	ldrb	r3, [r0, #13]
    d458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d45c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    d45e:	f002 f816 	bl	f48e <sys_dlist_remove>
	return list->head == list;
    d462:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    d464:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    d466:	7b5a      	ldrb	r2, [r3, #13]
    d468:	f062 027f 	orn	r2, r2, #127	; 0x7f
    d46c:	735a      	strb	r2, [r3, #13]
    d46e:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    d472:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d474:	4282      	cmp	r2, r0
    d476:	bf08      	it	eq
    d478:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d47a:	b922      	cbnz	r2, d486 <z_impl_k_yield+0x46>
	node->prev = tail;
    d47c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    d480:	6023      	str	r3, [r4, #0]
	list->tail = node;
    d482:	620b      	str	r3, [r1, #32]
}
    d484:	e00c      	b.n	d4a0 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    d486:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    d48a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    d48e:	42be      	cmp	r6, r7
    d490:	d00e      	beq.n	d4b0 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d492:	42b7      	cmp	r7, r6
    d494:	dd0c      	ble.n	d4b0 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    d496:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    d498:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    d49c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    d49e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    d4a0:	2001      	movs	r0, #1
    d4a2:	f7ff fde3 	bl	d06c <update_cache>
    d4a6:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    d4a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d4ac:	f7fb bf3e 	b.w	932c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    d4b0:	42a2      	cmp	r2, r4
    d4b2:	d0e3      	beq.n	d47c <z_impl_k_yield+0x3c>
    d4b4:	6812      	ldr	r2, [r2, #0]
    d4b6:	e7e0      	b.n	d47a <z_impl_k_yield+0x3a>
    d4b8:	2000cecc 	.word	0x2000cecc

0000d4bc <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    d4bc:	ea50 0301 	orrs.w	r3, r0, r1
{
    d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4c4:	4605      	mov	r5, r0
    d4c6:	460e      	mov	r6, r1
	if (ticks == 0) {
    d4c8:	d103      	bne.n	d4d2 <z_tick_sleep+0x16>
	z_impl_k_yield();
    d4ca:	f7ff ffb9 	bl	d440 <z_impl_k_yield>
		k_yield();
		return 0;
    d4ce:	2000      	movs	r0, #0
    d4d0:	e02c      	b.n	d52c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    d4d2:	1c83      	adds	r3, r0, #2
    d4d4:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    d4d8:	db2a      	blt.n	d530 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    d4da:	f002 f8f1 	bl	f6c0 <sys_clock_tick_get_32>
    d4de:	182c      	adds	r4, r5, r0
    d4e0:	f04f 0320 	mov.w	r3, #32
    d4e4:	f3ef 8811 	mrs	r8, BASEPRI
    d4e8:	f383 8812 	msr	BASEPRI_MAX, r3
    d4ec:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    d4f0:	4f11      	ldr	r7, [pc, #68]	; (d538 <z_tick_sleep+0x7c>)
    d4f2:	4b12      	ldr	r3, [pc, #72]	; (d53c <z_tick_sleep+0x80>)
    d4f4:	68b8      	ldr	r0, [r7, #8]
    d4f6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    d4f8:	f7ff fe44 	bl	d184 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    d4fc:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    d4fe:	4910      	ldr	r1, [pc, #64]	; (d540 <z_tick_sleep+0x84>)
    d500:	462a      	mov	r2, r5
    d502:	4633      	mov	r3, r6
    d504:	3018      	adds	r0, #24
    d506:	f000 f8fd 	bl	d704 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    d50a:	68ba      	ldr	r2, [r7, #8]
    d50c:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    d50e:	7b53      	ldrb	r3, [r2, #13]
    d510:	f043 0310 	orr.w	r3, r3, #16
    d514:	7353      	strb	r3, [r2, #13]
    d516:	f7fb ff09 	bl	932c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    d51a:	f002 f8d1 	bl	f6c0 <sys_clock_tick_get_32>
    d51e:	1a20      	subs	r0, r4, r0
    d520:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    d524:	2801      	cmp	r0, #1
    d526:	f173 0300 	sbcs.w	r3, r3, #0
    d52a:	dbd0      	blt.n	d4ce <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    d52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    d530:	f06f 0401 	mvn.w	r4, #1
    d534:	1a24      	subs	r4, r4, r0
    d536:	e7d3      	b.n	d4e0 <z_tick_sleep+0x24>
    d538:	2000cecc 	.word	0x2000cecc
    d53c:	2000cef0 	.word	0x2000cef0
    d540:	0000f58b 	.word	0x0000f58b

0000d544 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d544:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    d548:	bf08      	it	eq
    d54a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    d54e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d550:	d106      	bne.n	d560 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    d552:	4b08      	ldr	r3, [pc, #32]	; (d574 <z_impl_k_sleep+0x30>)
    d554:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    d556:	f7ff ff09 	bl	d36c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    d55a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    d55e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    d560:	f7ff ffac 	bl	d4bc <z_tick_sleep>
    d564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    d568:	fb80 0303 	smull	r0, r3, r0, r3
    d56c:	0bc0      	lsrs	r0, r0, #15
    d56e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    d572:	e7f4      	b.n	d55e <z_impl_k_sleep+0x1a>
    d574:	2000cecc 	.word	0x2000cecc

0000d578 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    d578:	4b01      	ldr	r3, [pc, #4]	; (d580 <z_impl_z_current_get+0x8>)
    d57a:	6898      	ldr	r0, [r3, #8]
    d57c:	4770      	bx	lr
    d57e:	bf00      	nop
    d580:	2000cecc 	.word	0x2000cecc

0000d584 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    d584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d588:	4604      	mov	r4, r0
    d58a:	f04f 0320 	mov.w	r3, #32
    d58e:	f3ef 8611 	mrs	r6, BASEPRI
    d592:	f383 8812 	msr	BASEPRI_MAX, r3
    d596:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    d59a:	7b03      	ldrb	r3, [r0, #12]
    d59c:	07d9      	lsls	r1, r3, #31
    d59e:	d50b      	bpl.n	d5b8 <z_thread_abort+0x34>
	__asm__ volatile(
    d5a0:	f386 8811 	msr	BASEPRI, r6
    d5a4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    d5a8:	4040      	eors	r0, r0
    d5aa:	f380 8811 	msr	BASEPRI, r0
    d5ae:	f04f 0004 	mov.w	r0, #4
    d5b2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    d5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    d5b8:	7b43      	ldrb	r3, [r0, #13]
    d5ba:	071a      	lsls	r2, r3, #28
    d5bc:	d504      	bpl.n	d5c8 <z_thread_abort+0x44>
    d5be:	f386 8811 	msr	BASEPRI, r6
    d5c2:	f3bf 8f6f 	isb	sy
    d5c6:	e7f5      	b.n	d5b4 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    d5c8:	f023 0220 	bic.w	r2, r3, #32
    d5cc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    d5d0:	09d2      	lsrs	r2, r2, #7
    d5d2:	d120      	bne.n	d616 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    d5d4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    d5d6:	68a3      	ldr	r3, [r4, #8]
    d5d8:	b113      	cbz	r3, d5e0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    d5da:	4620      	mov	r0, r4
    d5dc:	f001 ff5f 	bl	f49e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    d5e0:	f104 0018 	add.w	r0, r4, #24
    d5e4:	f002 f846 	bl	f674 <z_abort_timeout>
    d5e8:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    d5ec:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    d5f0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d5f2:	42bd      	cmp	r5, r7
    d5f4:	d000      	beq.n	d5f8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    d5f6:	b9b5      	cbnz	r5, d626 <z_thread_abort+0xa2>
		update_cache(1);
    d5f8:	2001      	movs	r0, #1
    d5fa:	f7ff fd37 	bl	d06c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    d5fe:	4b10      	ldr	r3, [pc, #64]	; (d640 <z_thread_abort+0xbc>)
    d600:	689b      	ldr	r3, [r3, #8]
    d602:	42a3      	cmp	r3, r4
    d604:	d1db      	bne.n	d5be <z_thread_abort+0x3a>
    d606:	f3ef 8305 	mrs	r3, IPSR
    d60a:	2b00      	cmp	r3, #0
    d60c:	d1d7      	bne.n	d5be <z_thread_abort+0x3a>
    d60e:	4630      	mov	r0, r6
    d610:	f7fb fe8c 	bl	932c <arch_swap>
	return ret;
    d614:	e7d3      	b.n	d5be <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d616:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    d61a:	f043 0308 	orr.w	r3, r3, #8
    d61e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    d620:	f001 ff35 	bl	f48e <sys_dlist_remove>
}
    d624:	e7d7      	b.n	d5d6 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    d626:	4628      	mov	r0, r5
    d628:	f001 ff39 	bl	f49e <unpend_thread_no_timeout>
    d62c:	f105 0018 	add.w	r0, r5, #24
    d630:	f002 f820 	bl	f674 <z_abort_timeout>
		ready_thread(thread);
    d634:	4628      	mov	r0, r5
    d636:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    d63a:	f7ff fd6f 	bl	d11c <ready_thread>
    d63e:	e7d7      	b.n	d5f0 <z_thread_abort+0x6c>
    d640:	2000cecc 	.word	0x2000cecc

0000d644 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    d644:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    d646:	4806      	ldr	r0, [pc, #24]	; (d660 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    d648:	4a06      	ldr	r2, [pc, #24]	; (d664 <z_data_copy+0x20>)
    d64a:	4907      	ldr	r1, [pc, #28]	; (d668 <z_data_copy+0x24>)
    d64c:	1a12      	subs	r2, r2, r0
    d64e:	f001 fe7f 	bl	f350 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    d652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    d656:	4a05      	ldr	r2, [pc, #20]	; (d66c <z_data_copy+0x28>)
    d658:	4905      	ldr	r1, [pc, #20]	; (d670 <z_data_copy+0x2c>)
    d65a:	4806      	ldr	r0, [pc, #24]	; (d674 <z_data_copy+0x30>)
    d65c:	f001 be78 	b.w	f350 <z_early_memcpy>
    d660:	2000c580 	.word	0x2000c580
    d664:	2000c82c 	.word	0x2000c82c
    d668:	00010468 	.word	0x00010468
    d66c:	00000000 	.word	0x00000000
    d670:	00010450 	.word	0x00010450
    d674:	2000c580 	.word	0x2000c580

0000d678 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    d678:	4b03      	ldr	r3, [pc, #12]	; (d688 <elapsed+0x10>)
    d67a:	681b      	ldr	r3, [r3, #0]
    d67c:	b90b      	cbnz	r3, d682 <elapsed+0xa>
    d67e:	f7fd bbbf 	b.w	ae00 <sys_clock_elapsed>
}
    d682:	2000      	movs	r0, #0
    d684:	4770      	bx	lr
    d686:	bf00      	nop
    d688:	2000cefc 	.word	0x2000cefc

0000d68c <next_timeout>:

static int32_t next_timeout(void)
{
    d68c:	b510      	push	{r4, lr}
	return list->head == list;
    d68e:	4b0e      	ldr	r3, [pc, #56]	; (d6c8 <next_timeout+0x3c>)
    d690:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d692:	429c      	cmp	r4, r3
    d694:	d104      	bne.n	d6a0 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    d696:	f7ff ffef 	bl	d678 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    d69a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    d69e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    d6a0:	f7ff ffea 	bl	d678 <elapsed>
	if ((to == NULL) ||
    d6a4:	2c00      	cmp	r4, #0
    d6a6:	d0f8      	beq.n	d69a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    d6a8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    d6ac:	1a1b      	subs	r3, r3, r0
    d6ae:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    d6b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    d6b6:	f172 0100 	sbcs.w	r1, r2, #0
    d6ba:	daee      	bge.n	d69a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    d6bc:	2a00      	cmp	r2, #0
    d6be:	bfac      	ite	ge
    d6c0:	4618      	movge	r0, r3
    d6c2:	2000      	movlt	r0, #0
	return ret;
    d6c4:	e7eb      	b.n	d69e <next_timeout+0x12>
    d6c6:	bf00      	nop
    d6c8:	2000c70c 	.word	0x2000c70c

0000d6cc <remove_timeout>:
{
    d6cc:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    d6ce:	b170      	cbz	r0, d6ee <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    d6d0:	4b0b      	ldr	r3, [pc, #44]	; (d700 <remove_timeout+0x34>)
    d6d2:	685b      	ldr	r3, [r3, #4]
    d6d4:	4298      	cmp	r0, r3
    d6d6:	d00a      	beq.n	d6ee <remove_timeout+0x22>
    d6d8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    d6da:	b143      	cbz	r3, d6ee <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    d6dc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    d6e0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    d6e4:	1912      	adds	r2, r2, r4
    d6e6:	eb41 0105 	adc.w	r1, r1, r5
    d6ea:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    d6ee:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    d6f2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    d6f4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    d6f6:	2300      	movs	r3, #0
	node->prev = NULL;
    d6f8:	e9c0 3300 	strd	r3, r3, [r0]
}
    d6fc:	bd30      	pop	{r4, r5, pc}
    d6fe:	bf00      	nop
    d700:	2000c70c 	.word	0x2000c70c

0000d704 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d708:	bf08      	it	eq
    d70a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    d70e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d710:	4604      	mov	r4, r0
    d712:	461d      	mov	r5, r3
    d714:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d716:	d05c      	beq.n	d7d2 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    d718:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    d71a:	f04f 0320 	mov.w	r3, #32
    d71e:	f3ef 8711 	mrs	r7, BASEPRI
    d722:	f383 8812 	msr	BASEPRI_MAX, r3
    d726:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    d72a:	3201      	adds	r2, #1
    d72c:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    d730:	da24      	bge.n	d77c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    d732:	f06f 0301 	mvn.w	r3, #1
    d736:	492c      	ldr	r1, [pc, #176]	; (d7e8 <z_add_timeout+0xe4>)
    d738:	e9d1 2000 	ldrd	r2, r0, [r1]
    d73c:	1a9b      	subs	r3, r3, r2
    d73e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d742:	eb62 0000 	sbc.w	r0, r2, r0
    d746:	1b9e      	subs	r6, r3, r6
    d748:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    d74c:	2e01      	cmp	r6, #1
    d74e:	f170 0300 	sbcs.w	r3, r0, #0
    d752:	da01      	bge.n	d758 <z_add_timeout+0x54>
    d754:	2601      	movs	r6, #1
    d756:	2000      	movs	r0, #0
    d758:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    d75c:	4e23      	ldr	r6, [pc, #140]	; (d7ec <z_add_timeout+0xe8>)
    d75e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    d762:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d764:	45b4      	cmp	ip, r6
    d766:	bf08      	it	eq
    d768:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    d76c:	f1bc 0f00 	cmp.w	ip, #0
    d770:	d10d      	bne.n	d78e <z_add_timeout+0x8a>
	node->prev = tail;
    d772:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    d776:	602c      	str	r4, [r5, #0]
	list->tail = node;
    d778:	6074      	str	r4, [r6, #4]
}
    d77a:	e01c      	b.n	d7b6 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    d77c:	f7ff ff7c 	bl	d678 <elapsed>
    d780:	3601      	adds	r6, #1
    d782:	f145 0500 	adc.w	r5, r5, #0
    d786:	1836      	adds	r6, r6, r0
    d788:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    d78c:	e7e4      	b.n	d758 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    d78e:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    d792:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    d796:	4293      	cmp	r3, r2
    d798:	eb71 0e00 	sbcs.w	lr, r1, r0
    d79c:	da1a      	bge.n	d7d4 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    d79e:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    d7a0:	f8dc 3004 	ldr.w	r3, [ip, #4]
    d7a4:	eb60 0001 	sbc.w	r0, r0, r1
    d7a8:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    d7ac:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    d7b0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    d7b2:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    d7b6:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d7b8:	42b3      	cmp	r3, r6
    d7ba:	d006      	beq.n	d7ca <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    d7bc:	429c      	cmp	r4, r3
    d7be:	d104      	bne.n	d7ca <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    d7c0:	f7ff ff64 	bl	d68c <next_timeout>
    d7c4:	2100      	movs	r1, #0
    d7c6:	f7fd fae9 	bl	ad9c <sys_clock_set_timeout>
	__asm__ volatile(
    d7ca:	f387 8811 	msr	BASEPRI, r7
    d7ce:	f3bf 8f6f 	isb	sy
		}
	}
}
    d7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    d7d4:	1a9b      	subs	r3, r3, r2
    d7d6:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    d7da:	45ac      	cmp	ip, r5
    d7dc:	e9c4 3104 	strd	r3, r1, [r4, #16]
    d7e0:	d0c7      	beq.n	d772 <z_add_timeout+0x6e>
    d7e2:	f8dc c000 	ldr.w	ip, [ip]
    d7e6:	e7c1      	b.n	d76c <z_add_timeout+0x68>
    d7e8:	2000c968 	.word	0x2000c968
    d7ec:	2000c70c 	.word	0x2000c70c

0000d7f0 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    d7f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    d7f4:	f04f 0320 	mov.w	r3, #32
    d7f8:	f3ef 8c11 	mrs	ip, BASEPRI
    d7fc:	f383 8812 	msr	BASEPRI_MAX, r3
    d800:	f3bf 8f6f 	isb	sy
	return list->head == list;
    d804:	f8df a0b0 	ldr.w	sl, [pc, #176]	; d8b8 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    d808:	f8df 90b0 	ldr.w	r9, [pc, #176]	; d8bc <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    d80c:	2400      	movs	r4, #0
	announce_remaining = ticks;
    d80e:	f8c9 0000 	str.w	r0, [r9]
    d812:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    d816:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d818:	4550      	cmp	r0, sl
    d81a:	bf08      	it	eq
    d81c:	2000      	moveq	r0, #0
		curr_tick += dt;
    d81e:	4f28      	ldr	r7, [pc, #160]	; (d8c0 <sys_clock_announce+0xd0>)
    d820:	46e0      	mov	r8, ip
    d822:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    d826:	f8d9 3000 	ldr.w	r3, [r9]
    d82a:	b380      	cbz	r0, d88e <sys_clock_announce+0x9e>
    d82c:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    d830:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    d834:	42b3      	cmp	r3, r6
    d836:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    d83a:	da05      	bge.n	d848 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    d83c:	1af6      	subs	r6, r6, r3
    d83e:	eb6c 040e 	sbc.w	r4, ip, lr
    d842:	e9c0 6404 	strd	r6, r4, [r0, #16]
    d846:	e022      	b.n	d88e <sys_clock_announce+0x9e>
		curr_tick += dt;
    d848:	18b2      	adds	r2, r6, r2
    d84a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    d84e:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    d852:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    d856:	f7ff ff39 	bl	d6cc <remove_timeout>
	__asm__ volatile(
    d85a:	f388 8811 	msr	BASEPRI, r8
    d85e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    d862:	6883      	ldr	r3, [r0, #8]
    d864:	4798      	blx	r3
	__asm__ volatile(
    d866:	f04f 0320 	mov.w	r3, #32
    d86a:	f3ef 8811 	mrs	r8, BASEPRI
    d86e:	f383 8812 	msr	BASEPRI_MAX, r3
    d872:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    d876:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    d87a:	f8da 0000 	ldr.w	r0, [sl]
    d87e:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d880:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    d882:	46c4      	mov	ip, r8
    d884:	f8c9 3000 	str.w	r3, [r9]
    d888:	d1ca      	bne.n	d820 <sys_clock_announce+0x30>
		curr_tick += dt;
    d88a:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    d88e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    d890:	189a      	adds	r2, r3, r2
    d892:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    d896:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    d89a:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    d89e:	f7ff fef5 	bl	d68c <next_timeout>
    d8a2:	4621      	mov	r1, r4
    d8a4:	f7fd fa7a 	bl	ad9c <sys_clock_set_timeout>
	__asm__ volatile(
    d8a8:	f388 8811 	msr	BASEPRI, r8
    d8ac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    d8b0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    d8b4:	f7ff bc96 	b.w	d1e4 <z_time_slice>
    d8b8:	2000c70c 	.word	0x2000c70c
    d8bc:	2000cefc 	.word	0x2000cefc
    d8c0:	2000c968 	.word	0x2000c968

0000d8c4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    d8c4:	b510      	push	{r4, lr}
	__asm__ volatile(
    d8c6:	f04f 0320 	mov.w	r3, #32
    d8ca:	f3ef 8411 	mrs	r4, BASEPRI
    d8ce:	f383 8812 	msr	BASEPRI_MAX, r3
    d8d2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    d8d6:	f7ff fecf 	bl	d678 <elapsed>
    d8da:	4603      	mov	r3, r0
    d8dc:	4a05      	ldr	r2, [pc, #20]	; (d8f4 <sys_clock_tick_get+0x30>)
    d8de:	e9d2 0100 	ldrd	r0, r1, [r2]
    d8e2:	1818      	adds	r0, r3, r0
    d8e4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    d8e8:	f384 8811 	msr	BASEPRI, r4
    d8ec:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    d8f0:	bd10      	pop	{r4, pc}
    d8f2:	bf00      	nop
    d8f4:	2000c968 	.word	0x2000c968

0000d8f8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    d8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8fa:	4604      	mov	r4, r0
	__asm__ volatile(
    d8fc:	f04f 0320 	mov.w	r3, #32
    d900:	f3ef 8711 	mrs	r7, BASEPRI
    d904:	f383 8812 	msr	BASEPRI_MAX, r3
    d908:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    d90c:	6802      	ldr	r2, [r0, #0]
    d90e:	b122      	cbz	r2, d91a <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    d910:	f387 8811 	msr	BASEPRI, r7
    d914:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    d918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    d91a:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    d91e:	1c58      	adds	r0, r3, #1
    d920:	f146 0100 	adc.w	r1, r6, #0
    d924:	2802      	cmp	r0, #2
    d926:	f171 0100 	sbcs.w	r1, r1, #0
    d92a:	d327      	bcc.n	d97c <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    d92c:	2b01      	cmp	r3, #1
    d92e:	f176 0100 	sbcs.w	r1, r6, #0
    d932:	bfbc      	itt	lt
    d934:	2301      	movlt	r3, #1
    d936:	4616      	movlt	r6, r2
    d938:	1e5d      	subs	r5, r3, #1
    d93a:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
    d93e:	f001 fec3 	bl	f6c8 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    d942:	3001      	adds	r0, #1
    d944:	f141 0100 	adc.w	r1, r1, #0
    d948:	1940      	adds	r0, r0, r5
    d94a:	eb46 0101 	adc.w	r1, r6, r1
    d94e:	2801      	cmp	r0, #1
    d950:	f171 0100 	sbcs.w	r1, r1, #0
    d954:	db3a      	blt.n	d9cc <z_timer_expiration_handler+0xd4>
    d956:	f001 feb7 	bl	f6c8 <z_impl_k_uptime_ticks>
    d95a:	3001      	adds	r0, #1
    d95c:	f141 0100 	adc.w	r1, r1, #0
    d960:	f06f 0201 	mvn.w	r2, #1
    d964:	1940      	adds	r0, r0, r5
    d966:	eb46 0301 	adc.w	r3, r6, r1
    d96a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d96e:	1a12      	subs	r2, r2, r0
    d970:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    d974:	4620      	mov	r0, r4
    d976:	4918      	ldr	r1, [pc, #96]	; (d9d8 <z_timer_expiration_handler+0xe0>)
    d978:	f7ff fec4 	bl	d704 <z_add_timeout>
	timer->status += 1U;
    d97c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d97e:	3301      	adds	r3, #1
    d980:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    d982:	6a23      	ldr	r3, [r4, #32]
    d984:	b173      	cbz	r3, d9a4 <z_timer_expiration_handler+0xac>
    d986:	f387 8811 	msr	BASEPRI, r7
    d98a:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    d98e:	4620      	mov	r0, r4
    d990:	6a23      	ldr	r3, [r4, #32]
    d992:	4798      	blx	r3
	__asm__ volatile(
    d994:	f04f 0320 	mov.w	r3, #32
    d998:	f3ef 8711 	mrs	r7, BASEPRI
    d99c:	f383 8812 	msr	BASEPRI_MAX, r3
    d9a0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    d9a4:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d9a8:	42a5      	cmp	r5, r4
    d9aa:	d0b1      	beq.n	d910 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    d9ac:	2d00      	cmp	r5, #0
    d9ae:	d0af      	beq.n	d910 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    d9b0:	4628      	mov	r0, r5
    d9b2:	f001 fdb6 	bl	f522 <z_unpend_thread_no_timeout>
    d9b6:	2300      	movs	r3, #0
    d9b8:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
    d9ba:	f387 8811 	msr	BASEPRI, r7
    d9be:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    d9c2:	4628      	mov	r0, r5
}
    d9c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    d9c8:	f001 bd9b 	b.w	f502 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    d9cc:	f06f 0201 	mvn.w	r2, #1
    d9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d9d4:	e7ce      	b.n	d974 <z_timer_expiration_handler+0x7c>
    d9d6:	bf00      	nop
    d9d8:	0000d8f9 	.word	0x0000d8f9

0000d9dc <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    d9dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d9e0:	bf08      	it	eq
    d9e2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    d9e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d9ea:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    d9ee:	4605      	mov	r5, r0
    d9f0:	461c      	mov	r4, r3
    d9f2:	4691      	mov	r9, r2
    d9f4:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    d9f6:	d01c      	beq.n	da32 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    d9f8:	1c53      	adds	r3, r2, #1
    d9fa:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
    d9fe:	db09      	blt.n	da14 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    da00:	2a01      	cmp	r2, #1
    da02:	f174 0300 	sbcs.w	r3, r4, #0
    da06:	bfbc      	itt	lt
    da08:	2201      	movlt	r2, #1
    da0a:	2400      	movlt	r4, #0
    da0c:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    da10:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    da14:	4628      	mov	r0, r5
    da16:	f001 fe2d 	bl	f674 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    da1a:	2300      	movs	r3, #0
	timer->period = period;
    da1c:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    da20:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    da22:	464a      	mov	r2, r9
    da24:	4643      	mov	r3, r8
    da26:	4628      	mov	r0, r5
		     duration);
}
    da28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    da2c:	4902      	ldr	r1, [pc, #8]	; (da38 <z_impl_k_timer_start+0x5c>)
    da2e:	f7ff be69 	b.w	d704 <z_add_timeout>
}
    da32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    da36:	bf00      	nop
    da38:	0000d8f9 	.word	0x0000d8f9

0000da3c <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    da3c:	4b01      	ldr	r3, [pc, #4]	; (da44 <k_thread_system_pool_assign+0x8>)
    da3e:	6703      	str	r3, [r0, #112]	; 0x70
}
    da40:	4770      	bx	lr
    da42:	bf00      	nop
    da44:	2000c7f0 	.word	0x2000c7f0

0000da48 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    da48:	4801      	ldr	r0, [pc, #4]	; (da50 <boot_banner+0x8>)
    da4a:	f000 bba8 	b.w	e19e <printk>
    da4e:	bf00      	nop
    da50:	000102e3 	.word	0x000102e3

0000da54 <_free_r>:
    da54:	b538      	push	{r3, r4, r5, lr}
    da56:	4605      	mov	r5, r0
    da58:	2900      	cmp	r1, #0
    da5a:	d041      	beq.n	dae0 <_free_r+0x8c>
    da5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    da60:	1f0c      	subs	r4, r1, #4
    da62:	2b00      	cmp	r3, #0
    da64:	bfb8      	it	lt
    da66:	18e4      	addlt	r4, r4, r3
    da68:	f000 f93e 	bl	dce8 <__malloc_lock>
    da6c:	4a1d      	ldr	r2, [pc, #116]	; (dae4 <_free_r+0x90>)
    da6e:	6813      	ldr	r3, [r2, #0]
    da70:	b933      	cbnz	r3, da80 <_free_r+0x2c>
    da72:	6063      	str	r3, [r4, #4]
    da74:	6014      	str	r4, [r2, #0]
    da76:	4628      	mov	r0, r5
    da78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    da7c:	f000 b93a 	b.w	dcf4 <__malloc_unlock>
    da80:	42a3      	cmp	r3, r4
    da82:	d908      	bls.n	da96 <_free_r+0x42>
    da84:	6820      	ldr	r0, [r4, #0]
    da86:	1821      	adds	r1, r4, r0
    da88:	428b      	cmp	r3, r1
    da8a:	bf01      	itttt	eq
    da8c:	6819      	ldreq	r1, [r3, #0]
    da8e:	685b      	ldreq	r3, [r3, #4]
    da90:	1809      	addeq	r1, r1, r0
    da92:	6021      	streq	r1, [r4, #0]
    da94:	e7ed      	b.n	da72 <_free_r+0x1e>
    da96:	461a      	mov	r2, r3
    da98:	685b      	ldr	r3, [r3, #4]
    da9a:	b10b      	cbz	r3, daa0 <_free_r+0x4c>
    da9c:	42a3      	cmp	r3, r4
    da9e:	d9fa      	bls.n	da96 <_free_r+0x42>
    daa0:	6811      	ldr	r1, [r2, #0]
    daa2:	1850      	adds	r0, r2, r1
    daa4:	42a0      	cmp	r0, r4
    daa6:	d10b      	bne.n	dac0 <_free_r+0x6c>
    daa8:	6820      	ldr	r0, [r4, #0]
    daaa:	4401      	add	r1, r0
    daac:	1850      	adds	r0, r2, r1
    daae:	6011      	str	r1, [r2, #0]
    dab0:	4283      	cmp	r3, r0
    dab2:	d1e0      	bne.n	da76 <_free_r+0x22>
    dab4:	6818      	ldr	r0, [r3, #0]
    dab6:	685b      	ldr	r3, [r3, #4]
    dab8:	4408      	add	r0, r1
    daba:	6053      	str	r3, [r2, #4]
    dabc:	6010      	str	r0, [r2, #0]
    dabe:	e7da      	b.n	da76 <_free_r+0x22>
    dac0:	d902      	bls.n	dac8 <_free_r+0x74>
    dac2:	230c      	movs	r3, #12
    dac4:	602b      	str	r3, [r5, #0]
    dac6:	e7d6      	b.n	da76 <_free_r+0x22>
    dac8:	6820      	ldr	r0, [r4, #0]
    daca:	1821      	adds	r1, r4, r0
    dacc:	428b      	cmp	r3, r1
    dace:	bf02      	ittt	eq
    dad0:	6819      	ldreq	r1, [r3, #0]
    dad2:	685b      	ldreq	r3, [r3, #4]
    dad4:	1809      	addeq	r1, r1, r0
    dad6:	6063      	str	r3, [r4, #4]
    dad8:	bf08      	it	eq
    dada:	6021      	streq	r1, [r4, #0]
    dadc:	6054      	str	r4, [r2, #4]
    dade:	e7ca      	b.n	da76 <_free_r+0x22>
    dae0:	bd38      	pop	{r3, r4, r5, pc}
    dae2:	bf00      	nop
    dae4:	2000cf04 	.word	0x2000cf04

0000dae8 <_malloc_r>:
    dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    daea:	1ccd      	adds	r5, r1, #3
    daec:	4606      	mov	r6, r0
    daee:	f025 0503 	bic.w	r5, r5, #3
    daf2:	3508      	adds	r5, #8
    daf4:	2d0c      	cmp	r5, #12
    daf6:	bf38      	it	cc
    daf8:	250c      	movcc	r5, #12
    dafa:	2d00      	cmp	r5, #0
    dafc:	db01      	blt.n	db02 <_malloc_r+0x1a>
    dafe:	42a9      	cmp	r1, r5
    db00:	d903      	bls.n	db0a <_malloc_r+0x22>
    db02:	230c      	movs	r3, #12
    db04:	6033      	str	r3, [r6, #0]
    db06:	2000      	movs	r0, #0
    db08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    db0a:	f000 f8ed 	bl	dce8 <__malloc_lock>
    db0e:	4921      	ldr	r1, [pc, #132]	; (db94 <_malloc_r+0xac>)
    db10:	680a      	ldr	r2, [r1, #0]
    db12:	4614      	mov	r4, r2
    db14:	b99c      	cbnz	r4, db3e <_malloc_r+0x56>
    db16:	4f20      	ldr	r7, [pc, #128]	; (db98 <_malloc_r+0xb0>)
    db18:	683b      	ldr	r3, [r7, #0]
    db1a:	b923      	cbnz	r3, db26 <_malloc_r+0x3e>
    db1c:	4621      	mov	r1, r4
    db1e:	4630      	mov	r0, r6
    db20:	f000 f83c 	bl	db9c <_sbrk_r>
    db24:	6038      	str	r0, [r7, #0]
    db26:	4629      	mov	r1, r5
    db28:	4630      	mov	r0, r6
    db2a:	f000 f837 	bl	db9c <_sbrk_r>
    db2e:	1c43      	adds	r3, r0, #1
    db30:	d123      	bne.n	db7a <_malloc_r+0x92>
    db32:	230c      	movs	r3, #12
    db34:	4630      	mov	r0, r6
    db36:	6033      	str	r3, [r6, #0]
    db38:	f000 f8dc 	bl	dcf4 <__malloc_unlock>
    db3c:	e7e3      	b.n	db06 <_malloc_r+0x1e>
    db3e:	6823      	ldr	r3, [r4, #0]
    db40:	1b5b      	subs	r3, r3, r5
    db42:	d417      	bmi.n	db74 <_malloc_r+0x8c>
    db44:	2b0b      	cmp	r3, #11
    db46:	d903      	bls.n	db50 <_malloc_r+0x68>
    db48:	6023      	str	r3, [r4, #0]
    db4a:	441c      	add	r4, r3
    db4c:	6025      	str	r5, [r4, #0]
    db4e:	e004      	b.n	db5a <_malloc_r+0x72>
    db50:	6863      	ldr	r3, [r4, #4]
    db52:	42a2      	cmp	r2, r4
    db54:	bf0c      	ite	eq
    db56:	600b      	streq	r3, [r1, #0]
    db58:	6053      	strne	r3, [r2, #4]
    db5a:	4630      	mov	r0, r6
    db5c:	f000 f8ca 	bl	dcf4 <__malloc_unlock>
    db60:	f104 000b 	add.w	r0, r4, #11
    db64:	1d23      	adds	r3, r4, #4
    db66:	f020 0007 	bic.w	r0, r0, #7
    db6a:	1ac2      	subs	r2, r0, r3
    db6c:	bf1c      	itt	ne
    db6e:	1a1b      	subne	r3, r3, r0
    db70:	50a3      	strne	r3, [r4, r2]
    db72:	e7c9      	b.n	db08 <_malloc_r+0x20>
    db74:	4622      	mov	r2, r4
    db76:	6864      	ldr	r4, [r4, #4]
    db78:	e7cc      	b.n	db14 <_malloc_r+0x2c>
    db7a:	1cc4      	adds	r4, r0, #3
    db7c:	f024 0403 	bic.w	r4, r4, #3
    db80:	42a0      	cmp	r0, r4
    db82:	d0e3      	beq.n	db4c <_malloc_r+0x64>
    db84:	1a21      	subs	r1, r4, r0
    db86:	4630      	mov	r0, r6
    db88:	f000 f808 	bl	db9c <_sbrk_r>
    db8c:	3001      	adds	r0, #1
    db8e:	d1dd      	bne.n	db4c <_malloc_r+0x64>
    db90:	e7cf      	b.n	db32 <_malloc_r+0x4a>
    db92:	bf00      	nop
    db94:	2000cf04 	.word	0x2000cf04
    db98:	2000cf00 	.word	0x2000cf00

0000db9c <_sbrk_r>:
    db9c:	b538      	push	{r3, r4, r5, lr}
    db9e:	2300      	movs	r3, #0
    dba0:	4d05      	ldr	r5, [pc, #20]	; (dbb8 <_sbrk_r+0x1c>)
    dba2:	4604      	mov	r4, r0
    dba4:	4608      	mov	r0, r1
    dba6:	602b      	str	r3, [r5, #0]
    dba8:	f7fb ffe8 	bl	9b7c <_sbrk>
    dbac:	1c43      	adds	r3, r0, #1
    dbae:	d102      	bne.n	dbb6 <_sbrk_r+0x1a>
    dbb0:	682b      	ldr	r3, [r5, #0]
    dbb2:	b103      	cbz	r3, dbb6 <_sbrk_r+0x1a>
    dbb4:	6023      	str	r3, [r4, #0]
    dbb6:	bd38      	pop	{r3, r4, r5, pc}
    dbb8:	2000cf08 	.word	0x2000cf08

0000dbbc <_strtol_l.constprop.0>:
    dbbc:	2b24      	cmp	r3, #36	; 0x24
    dbbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dbc2:	4686      	mov	lr, r0
    dbc4:	4690      	mov	r8, r2
    dbc6:	d801      	bhi.n	dbcc <_strtol_l.constprop.0+0x10>
    dbc8:	2b01      	cmp	r3, #1
    dbca:	d106      	bne.n	dbda <_strtol_l.constprop.0+0x1e>
    dbcc:	f000 fe15 	bl	e7fa <__errno>
    dbd0:	2316      	movs	r3, #22
    dbd2:	6003      	str	r3, [r0, #0]
    dbd4:	2000      	movs	r0, #0
    dbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dbda:	460d      	mov	r5, r1
    dbdc:	4835      	ldr	r0, [pc, #212]	; (dcb4 <_strtol_l.constprop.0+0xf8>)
    dbde:	462a      	mov	r2, r5
    dbe0:	f815 4b01 	ldrb.w	r4, [r5], #1
    dbe4:	5d06      	ldrb	r6, [r0, r4]
    dbe6:	f016 0608 	ands.w	r6, r6, #8
    dbea:	d1f8      	bne.n	dbde <_strtol_l.constprop.0+0x22>
    dbec:	2c2d      	cmp	r4, #45	; 0x2d
    dbee:	d124      	bne.n	dc3a <_strtol_l.constprop.0+0x7e>
    dbf0:	782c      	ldrb	r4, [r5, #0]
    dbf2:	2601      	movs	r6, #1
    dbf4:	1c95      	adds	r5, r2, #2
    dbf6:	bb2b      	cbnz	r3, dc44 <_strtol_l.constprop.0+0x88>
    dbf8:	2c30      	cmp	r4, #48	; 0x30
    dbfa:	d030      	beq.n	dc5e <_strtol_l.constprop.0+0xa2>
    dbfc:	230a      	movs	r3, #10
    dbfe:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
    dc02:	2200      	movs	r2, #0
    dc04:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    dc08:	4610      	mov	r0, r2
    dc0a:	fbbc f9f3 	udiv	r9, ip, r3
    dc0e:	fb03 ca19 	mls	sl, r3, r9, ip
    dc12:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
    dc16:	2f09      	cmp	r7, #9
    dc18:	d828      	bhi.n	dc6c <_strtol_l.constprop.0+0xb0>
    dc1a:	463c      	mov	r4, r7
    dc1c:	42a3      	cmp	r3, r4
    dc1e:	dd34      	ble.n	dc8a <_strtol_l.constprop.0+0xce>
    dc20:	1c57      	adds	r7, r2, #1
    dc22:	d007      	beq.n	dc34 <_strtol_l.constprop.0+0x78>
    dc24:	4581      	cmp	r9, r0
    dc26:	d32d      	bcc.n	dc84 <_strtol_l.constprop.0+0xc8>
    dc28:	d101      	bne.n	dc2e <_strtol_l.constprop.0+0x72>
    dc2a:	45a2      	cmp	sl, r4
    dc2c:	db2a      	blt.n	dc84 <_strtol_l.constprop.0+0xc8>
    dc2e:	fb00 4003 	mla	r0, r0, r3, r4
    dc32:	2201      	movs	r2, #1
    dc34:	f815 4b01 	ldrb.w	r4, [r5], #1
    dc38:	e7eb      	b.n	dc12 <_strtol_l.constprop.0+0x56>
    dc3a:	2c2b      	cmp	r4, #43	; 0x2b
    dc3c:	bf04      	itt	eq
    dc3e:	782c      	ldrbeq	r4, [r5, #0]
    dc40:	1c95      	addeq	r5, r2, #2
    dc42:	e7d8      	b.n	dbf6 <_strtol_l.constprop.0+0x3a>
    dc44:	2b10      	cmp	r3, #16
    dc46:	d1da      	bne.n	dbfe <_strtol_l.constprop.0+0x42>
    dc48:	2c30      	cmp	r4, #48	; 0x30
    dc4a:	d1d8      	bne.n	dbfe <_strtol_l.constprop.0+0x42>
    dc4c:	782a      	ldrb	r2, [r5, #0]
    dc4e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    dc52:	2a58      	cmp	r2, #88	; 0x58
    dc54:	d1d3      	bne.n	dbfe <_strtol_l.constprop.0+0x42>
    dc56:	786c      	ldrb	r4, [r5, #1]
    dc58:	2310      	movs	r3, #16
    dc5a:	3502      	adds	r5, #2
    dc5c:	e7cf      	b.n	dbfe <_strtol_l.constprop.0+0x42>
    dc5e:	782b      	ldrb	r3, [r5, #0]
    dc60:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    dc64:	2b58      	cmp	r3, #88	; 0x58
    dc66:	d0f6      	beq.n	dc56 <_strtol_l.constprop.0+0x9a>
    dc68:	2308      	movs	r3, #8
    dc6a:	e7c8      	b.n	dbfe <_strtol_l.constprop.0+0x42>
    dc6c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
    dc70:	2f19      	cmp	r7, #25
    dc72:	d801      	bhi.n	dc78 <_strtol_l.constprop.0+0xbc>
    dc74:	3c37      	subs	r4, #55	; 0x37
    dc76:	e7d1      	b.n	dc1c <_strtol_l.constprop.0+0x60>
    dc78:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
    dc7c:	2f19      	cmp	r7, #25
    dc7e:	d804      	bhi.n	dc8a <_strtol_l.constprop.0+0xce>
    dc80:	3c57      	subs	r4, #87	; 0x57
    dc82:	e7cb      	b.n	dc1c <_strtol_l.constprop.0+0x60>
    dc84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dc88:	e7d4      	b.n	dc34 <_strtol_l.constprop.0+0x78>
    dc8a:	1c53      	adds	r3, r2, #1
    dc8c:	d108      	bne.n	dca0 <_strtol_l.constprop.0+0xe4>
    dc8e:	2322      	movs	r3, #34	; 0x22
    dc90:	4660      	mov	r0, ip
    dc92:	f8ce 3000 	str.w	r3, [lr]
    dc96:	f1b8 0f00 	cmp.w	r8, #0
    dc9a:	d09c      	beq.n	dbd6 <_strtol_l.constprop.0+0x1a>
    dc9c:	1e69      	subs	r1, r5, #1
    dc9e:	e006      	b.n	dcae <_strtol_l.constprop.0+0xf2>
    dca0:	b106      	cbz	r6, dca4 <_strtol_l.constprop.0+0xe8>
    dca2:	4240      	negs	r0, r0
    dca4:	f1b8 0f00 	cmp.w	r8, #0
    dca8:	d095      	beq.n	dbd6 <_strtol_l.constprop.0+0x1a>
    dcaa:	2a00      	cmp	r2, #0
    dcac:	d1f6      	bne.n	dc9c <_strtol_l.constprop.0+0xe0>
    dcae:	f8c8 1000 	str.w	r1, [r8]
    dcb2:	e790      	b.n	dbd6 <_strtol_l.constprop.0+0x1a>
    dcb4:	00010312 	.word	0x00010312

0000dcb8 <strtol>:
    dcb8:	4613      	mov	r3, r2
    dcba:	460a      	mov	r2, r1
    dcbc:	4601      	mov	r1, r0
    dcbe:	4802      	ldr	r0, [pc, #8]	; (dcc8 <strtol+0x10>)
    dcc0:	6800      	ldr	r0, [r0, #0]
    dcc2:	f7ff bf7b 	b.w	dbbc <_strtol_l.constprop.0>
    dcc6:	bf00      	nop
    dcc8:	2000c714 	.word	0x2000c714

0000dccc <vsniprintf>:
    dccc:	b507      	push	{r0, r1, r2, lr}
    dcce:	9300      	str	r3, [sp, #0]
    dcd0:	4613      	mov	r3, r2
    dcd2:	460a      	mov	r2, r1
    dcd4:	4601      	mov	r1, r0
    dcd6:	4803      	ldr	r0, [pc, #12]	; (dce4 <vsniprintf+0x18>)
    dcd8:	6800      	ldr	r0, [r0, #0]
    dcda:	f001 fd90 	bl	f7fe <_vsniprintf_r>
    dcde:	b003      	add	sp, #12
    dce0:	f85d fb04 	ldr.w	pc, [sp], #4
    dce4:	2000c714 	.word	0x2000c714

0000dce8 <__malloc_lock>:
    dce8:	4801      	ldr	r0, [pc, #4]	; (dcf0 <__malloc_lock+0x8>)
    dcea:	f000 bd7e 	b.w	e7ea <__retarget_lock_acquire_recursive>
    dcee:	bf00      	nop
    dcf0:	2000c804 	.word	0x2000c804

0000dcf4 <__malloc_unlock>:
    dcf4:	4801      	ldr	r0, [pc, #4]	; (dcfc <__malloc_unlock+0x8>)
    dcf6:	f000 bd7e 	b.w	e7f6 <__retarget_lock_release_recursive>
    dcfa:	bf00      	nop
    dcfc:	2000c804 	.word	0x2000c804

0000dd00 <_svfiprintf_r>:
    dd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd04:	4698      	mov	r8, r3
    dd06:	898b      	ldrh	r3, [r1, #12]
    dd08:	b09d      	sub	sp, #116	; 0x74
    dd0a:	4607      	mov	r7, r0
    dd0c:	061b      	lsls	r3, r3, #24
    dd0e:	460d      	mov	r5, r1
    dd10:	4614      	mov	r4, r2
    dd12:	d510      	bpl.n	dd36 <_svfiprintf_r+0x36>
    dd14:	690b      	ldr	r3, [r1, #16]
    dd16:	b973      	cbnz	r3, dd36 <_svfiprintf_r+0x36>
    dd18:	2140      	movs	r1, #64	; 0x40
    dd1a:	f7ff fee5 	bl	dae8 <_malloc_r>
    dd1e:	6028      	str	r0, [r5, #0]
    dd20:	6128      	str	r0, [r5, #16]
    dd22:	b930      	cbnz	r0, dd32 <_svfiprintf_r+0x32>
    dd24:	230c      	movs	r3, #12
    dd26:	603b      	str	r3, [r7, #0]
    dd28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dd2c:	b01d      	add	sp, #116	; 0x74
    dd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd32:	2340      	movs	r3, #64	; 0x40
    dd34:	616b      	str	r3, [r5, #20]
    dd36:	2300      	movs	r3, #0
    dd38:	f8cd 800c 	str.w	r8, [sp, #12]
    dd3c:	f04f 0901 	mov.w	r9, #1
    dd40:	f8df 81a0 	ldr.w	r8, [pc, #416]	; dee4 <_svfiprintf_r+0x1e4>
    dd44:	9309      	str	r3, [sp, #36]	; 0x24
    dd46:	2320      	movs	r3, #32
    dd48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    dd4c:	2330      	movs	r3, #48	; 0x30
    dd4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    dd52:	4623      	mov	r3, r4
    dd54:	469a      	mov	sl, r3
    dd56:	f813 2b01 	ldrb.w	r2, [r3], #1
    dd5a:	b10a      	cbz	r2, dd60 <_svfiprintf_r+0x60>
    dd5c:	2a25      	cmp	r2, #37	; 0x25
    dd5e:	d1f9      	bne.n	dd54 <_svfiprintf_r+0x54>
    dd60:	ebba 0b04 	subs.w	fp, sl, r4
    dd64:	d00b      	beq.n	dd7e <_svfiprintf_r+0x7e>
    dd66:	465b      	mov	r3, fp
    dd68:	4622      	mov	r2, r4
    dd6a:	4629      	mov	r1, r5
    dd6c:	4638      	mov	r0, r7
    dd6e:	f001 fd71 	bl	f854 <__ssputs_r>
    dd72:	3001      	adds	r0, #1
    dd74:	f000 80a7 	beq.w	dec6 <_svfiprintf_r+0x1c6>
    dd78:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dd7a:	445a      	add	r2, fp
    dd7c:	9209      	str	r2, [sp, #36]	; 0x24
    dd7e:	f89a 3000 	ldrb.w	r3, [sl]
    dd82:	2b00      	cmp	r3, #0
    dd84:	f000 809f 	beq.w	dec6 <_svfiprintf_r+0x1c6>
    dd88:	2300      	movs	r3, #0
    dd8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dd8e:	f10a 0a01 	add.w	sl, sl, #1
    dd92:	9304      	str	r3, [sp, #16]
    dd94:	9307      	str	r3, [sp, #28]
    dd96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    dd9a:	931a      	str	r3, [sp, #104]	; 0x68
    dd9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    dda0:	4654      	mov	r4, sl
    dda2:	2205      	movs	r2, #5
    dda4:	484f      	ldr	r0, [pc, #316]	; (dee4 <_svfiprintf_r+0x1e4>)
    dda6:	f814 1b01 	ldrb.w	r1, [r4], #1
    ddaa:	f001 fe20 	bl	f9ee <memchr>
    ddae:	9a04      	ldr	r2, [sp, #16]
    ddb0:	b9d8      	cbnz	r0, ddea <_svfiprintf_r+0xea>
    ddb2:	06d0      	lsls	r0, r2, #27
    ddb4:	bf44      	itt	mi
    ddb6:	2320      	movmi	r3, #32
    ddb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    ddbc:	0711      	lsls	r1, r2, #28
    ddbe:	bf44      	itt	mi
    ddc0:	232b      	movmi	r3, #43	; 0x2b
    ddc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    ddc6:	f89a 3000 	ldrb.w	r3, [sl]
    ddca:	2b2a      	cmp	r3, #42	; 0x2a
    ddcc:	d015      	beq.n	ddfa <_svfiprintf_r+0xfa>
    ddce:	9a07      	ldr	r2, [sp, #28]
    ddd0:	4654      	mov	r4, sl
    ddd2:	2000      	movs	r0, #0
    ddd4:	f04f 0c0a 	mov.w	ip, #10
    ddd8:	4621      	mov	r1, r4
    ddda:	f811 3b01 	ldrb.w	r3, [r1], #1
    ddde:	3b30      	subs	r3, #48	; 0x30
    dde0:	2b09      	cmp	r3, #9
    dde2:	d94b      	bls.n	de7c <_svfiprintf_r+0x17c>
    dde4:	b1b0      	cbz	r0, de14 <_svfiprintf_r+0x114>
    dde6:	9207      	str	r2, [sp, #28]
    dde8:	e014      	b.n	de14 <_svfiprintf_r+0x114>
    ddea:	eba0 0308 	sub.w	r3, r0, r8
    ddee:	46a2      	mov	sl, r4
    ddf0:	fa09 f303 	lsl.w	r3, r9, r3
    ddf4:	4313      	orrs	r3, r2
    ddf6:	9304      	str	r3, [sp, #16]
    ddf8:	e7d2      	b.n	dda0 <_svfiprintf_r+0xa0>
    ddfa:	9b03      	ldr	r3, [sp, #12]
    ddfc:	1d19      	adds	r1, r3, #4
    ddfe:	681b      	ldr	r3, [r3, #0]
    de00:	2b00      	cmp	r3, #0
    de02:	9103      	str	r1, [sp, #12]
    de04:	bfbb      	ittet	lt
    de06:	425b      	neglt	r3, r3
    de08:	f042 0202 	orrlt.w	r2, r2, #2
    de0c:	9307      	strge	r3, [sp, #28]
    de0e:	9307      	strlt	r3, [sp, #28]
    de10:	bfb8      	it	lt
    de12:	9204      	strlt	r2, [sp, #16]
    de14:	7823      	ldrb	r3, [r4, #0]
    de16:	2b2e      	cmp	r3, #46	; 0x2e
    de18:	d10a      	bne.n	de30 <_svfiprintf_r+0x130>
    de1a:	7863      	ldrb	r3, [r4, #1]
    de1c:	2b2a      	cmp	r3, #42	; 0x2a
    de1e:	d132      	bne.n	de86 <_svfiprintf_r+0x186>
    de20:	9b03      	ldr	r3, [sp, #12]
    de22:	3402      	adds	r4, #2
    de24:	1d1a      	adds	r2, r3, #4
    de26:	681b      	ldr	r3, [r3, #0]
    de28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
    de2c:	9203      	str	r2, [sp, #12]
    de2e:	9305      	str	r3, [sp, #20]
    de30:	f8df a0b4 	ldr.w	sl, [pc, #180]	; dee8 <_svfiprintf_r+0x1e8>
    de34:	2203      	movs	r2, #3
    de36:	7821      	ldrb	r1, [r4, #0]
    de38:	4650      	mov	r0, sl
    de3a:	f001 fdd8 	bl	f9ee <memchr>
    de3e:	b138      	cbz	r0, de50 <_svfiprintf_r+0x150>
    de40:	eba0 000a 	sub.w	r0, r0, sl
    de44:	2240      	movs	r2, #64	; 0x40
    de46:	9b04      	ldr	r3, [sp, #16]
    de48:	3401      	adds	r4, #1
    de4a:	4082      	lsls	r2, r0
    de4c:	4313      	orrs	r3, r2
    de4e:	9304      	str	r3, [sp, #16]
    de50:	f814 1b01 	ldrb.w	r1, [r4], #1
    de54:	2206      	movs	r2, #6
    de56:	4825      	ldr	r0, [pc, #148]	; (deec <_svfiprintf_r+0x1ec>)
    de58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    de5c:	f001 fdc7 	bl	f9ee <memchr>
    de60:	2800      	cmp	r0, #0
    de62:	d036      	beq.n	ded2 <_svfiprintf_r+0x1d2>
    de64:	4b22      	ldr	r3, [pc, #136]	; (def0 <_svfiprintf_r+0x1f0>)
    de66:	bb1b      	cbnz	r3, deb0 <_svfiprintf_r+0x1b0>
    de68:	9b03      	ldr	r3, [sp, #12]
    de6a:	3307      	adds	r3, #7
    de6c:	f023 0307 	bic.w	r3, r3, #7
    de70:	3308      	adds	r3, #8
    de72:	9303      	str	r3, [sp, #12]
    de74:	9b09      	ldr	r3, [sp, #36]	; 0x24
    de76:	4433      	add	r3, r6
    de78:	9309      	str	r3, [sp, #36]	; 0x24
    de7a:	e76a      	b.n	dd52 <_svfiprintf_r+0x52>
    de7c:	fb0c 3202 	mla	r2, ip, r2, r3
    de80:	460c      	mov	r4, r1
    de82:	2001      	movs	r0, #1
    de84:	e7a8      	b.n	ddd8 <_svfiprintf_r+0xd8>
    de86:	2300      	movs	r3, #0
    de88:	3401      	adds	r4, #1
    de8a:	f04f 0c0a 	mov.w	ip, #10
    de8e:	4619      	mov	r1, r3
    de90:	9305      	str	r3, [sp, #20]
    de92:	4620      	mov	r0, r4
    de94:	f810 2b01 	ldrb.w	r2, [r0], #1
    de98:	3a30      	subs	r2, #48	; 0x30
    de9a:	2a09      	cmp	r2, #9
    de9c:	d903      	bls.n	dea6 <_svfiprintf_r+0x1a6>
    de9e:	2b00      	cmp	r3, #0
    dea0:	d0c6      	beq.n	de30 <_svfiprintf_r+0x130>
    dea2:	9105      	str	r1, [sp, #20]
    dea4:	e7c4      	b.n	de30 <_svfiprintf_r+0x130>
    dea6:	fb0c 2101 	mla	r1, ip, r1, r2
    deaa:	4604      	mov	r4, r0
    deac:	2301      	movs	r3, #1
    deae:	e7f0      	b.n	de92 <_svfiprintf_r+0x192>
    deb0:	ab03      	add	r3, sp, #12
    deb2:	462a      	mov	r2, r5
    deb4:	a904      	add	r1, sp, #16
    deb6:	4638      	mov	r0, r7
    deb8:	9300      	str	r3, [sp, #0]
    deba:	4b0e      	ldr	r3, [pc, #56]	; (def4 <_svfiprintf_r+0x1f4>)
    debc:	f3af 8000 	nop.w
    dec0:	1c42      	adds	r2, r0, #1
    dec2:	4606      	mov	r6, r0
    dec4:	d1d6      	bne.n	de74 <_svfiprintf_r+0x174>
    dec6:	89ab      	ldrh	r3, [r5, #12]
    dec8:	065b      	lsls	r3, r3, #25
    deca:	f53f af2d 	bmi.w	dd28 <_svfiprintf_r+0x28>
    dece:	9809      	ldr	r0, [sp, #36]	; 0x24
    ded0:	e72c      	b.n	dd2c <_svfiprintf_r+0x2c>
    ded2:	ab03      	add	r3, sp, #12
    ded4:	462a      	mov	r2, r5
    ded6:	a904      	add	r1, sp, #16
    ded8:	4638      	mov	r0, r7
    deda:	9300      	str	r3, [sp, #0]
    dedc:	4b05      	ldr	r3, [pc, #20]	; (def4 <_svfiprintf_r+0x1f4>)
    dede:	f000 f80b 	bl	def8 <_printf_i>
    dee2:	e7ed      	b.n	dec0 <_svfiprintf_r+0x1c0>
    dee4:	00010412 	.word	0x00010412
    dee8:	00010418 	.word	0x00010418
    deec:	0001041c 	.word	0x0001041c
    def0:	00000000 	.word	0x00000000
    def4:	0000f855 	.word	0x0000f855

0000def8 <_printf_i>:
    def8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    defc:	7e0f      	ldrb	r7, [r1, #24]
    defe:	4691      	mov	r9, r2
    df00:	4680      	mov	r8, r0
    df02:	460c      	mov	r4, r1
    df04:	2f78      	cmp	r7, #120	; 0x78
    df06:	469a      	mov	sl, r3
    df08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    df0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
    df0e:	d807      	bhi.n	df20 <_printf_i+0x28>
    df10:	2f62      	cmp	r7, #98	; 0x62
    df12:	d80a      	bhi.n	df2a <_printf_i+0x32>
    df14:	2f00      	cmp	r7, #0
    df16:	f000 80e0 	beq.w	e0da <_printf_i+0x1e2>
    df1a:	2f58      	cmp	r7, #88	; 0x58
    df1c:	f000 80bb 	beq.w	e096 <_printf_i+0x19e>
    df20:	f104 0642 	add.w	r6, r4, #66	; 0x42
    df24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    df28:	e03a      	b.n	dfa0 <_printf_i+0xa8>
    df2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    df2e:	2b15      	cmp	r3, #21
    df30:	d8f6      	bhi.n	df20 <_printf_i+0x28>
    df32:	a101      	add	r1, pc, #4	; (adr r1, df38 <_printf_i+0x40>)
    df34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    df38:	0000df91 	.word	0x0000df91
    df3c:	0000dfa5 	.word	0x0000dfa5
    df40:	0000df21 	.word	0x0000df21
    df44:	0000df21 	.word	0x0000df21
    df48:	0000df21 	.word	0x0000df21
    df4c:	0000df21 	.word	0x0000df21
    df50:	0000dfa5 	.word	0x0000dfa5
    df54:	0000df21 	.word	0x0000df21
    df58:	0000df21 	.word	0x0000df21
    df5c:	0000df21 	.word	0x0000df21
    df60:	0000df21 	.word	0x0000df21
    df64:	0000e0c1 	.word	0x0000e0c1
    df68:	0000e035 	.word	0x0000e035
    df6c:	0000e077 	.word	0x0000e077
    df70:	0000df21 	.word	0x0000df21
    df74:	0000df21 	.word	0x0000df21
    df78:	0000e0e3 	.word	0x0000e0e3
    df7c:	0000df21 	.word	0x0000df21
    df80:	0000e035 	.word	0x0000e035
    df84:	0000df21 	.word	0x0000df21
    df88:	0000df21 	.word	0x0000df21
    df8c:	0000e07f 	.word	0x0000e07f
    df90:	682b      	ldr	r3, [r5, #0]
    df92:	f104 0642 	add.w	r6, r4, #66	; 0x42
    df96:	1d1a      	adds	r2, r3, #4
    df98:	681b      	ldr	r3, [r3, #0]
    df9a:	602a      	str	r2, [r5, #0]
    df9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    dfa0:	2301      	movs	r3, #1
    dfa2:	e0ab      	b.n	e0fc <_printf_i+0x204>
    dfa4:	6823      	ldr	r3, [r4, #0]
    dfa6:	6829      	ldr	r1, [r5, #0]
    dfa8:	061f      	lsls	r7, r3, #24
    dfaa:	f101 0004 	add.w	r0, r1, #4
    dfae:	6028      	str	r0, [r5, #0]
    dfb0:	d501      	bpl.n	dfb6 <_printf_i+0xbe>
    dfb2:	680d      	ldr	r5, [r1, #0]
    dfb4:	e003      	b.n	dfbe <_printf_i+0xc6>
    dfb6:	065e      	lsls	r6, r3, #25
    dfb8:	d5fb      	bpl.n	dfb2 <_printf_i+0xba>
    dfba:	f9b1 5000 	ldrsh.w	r5, [r1]
    dfbe:	2d00      	cmp	r5, #0
    dfc0:	6861      	ldr	r1, [r4, #4]
    dfc2:	da7a      	bge.n	e0ba <_printf_i+0x1c2>
    dfc4:	202d      	movs	r0, #45	; 0x2d
    dfc6:	2900      	cmp	r1, #0
    dfc8:	60a1      	str	r1, [r4, #8]
    dfca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    dfce:	da2d      	bge.n	e02c <_printf_i+0x134>
    dfd0:	426d      	negs	r5, r5
    dfd2:	485e      	ldr	r0, [pc, #376]	; (e14c <_printf_i+0x254>)
    dfd4:	230a      	movs	r3, #10
    dfd6:	4616      	mov	r6, r2
    dfd8:	fbb5 f1f3 	udiv	r1, r5, r3
    dfdc:	fb03 5711 	mls	r7, r3, r1, r5
    dfe0:	5dc7      	ldrb	r7, [r0, r7]
    dfe2:	f806 7d01 	strb.w	r7, [r6, #-1]!
    dfe6:	462f      	mov	r7, r5
    dfe8:	460d      	mov	r5, r1
    dfea:	42bb      	cmp	r3, r7
    dfec:	d9f4      	bls.n	dfd8 <_printf_i+0xe0>
    dfee:	2b08      	cmp	r3, #8
    dff0:	d10b      	bne.n	e00a <_printf_i+0x112>
    dff2:	6823      	ldr	r3, [r4, #0]
    dff4:	07df      	lsls	r7, r3, #31
    dff6:	d508      	bpl.n	e00a <_printf_i+0x112>
    dff8:	6923      	ldr	r3, [r4, #16]
    dffa:	6861      	ldr	r1, [r4, #4]
    dffc:	4299      	cmp	r1, r3
    dffe:	bfde      	ittt	le
    e000:	2330      	movle	r3, #48	; 0x30
    e002:	f806 3c01 	strble.w	r3, [r6, #-1]
    e006:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
    e00a:	1b92      	subs	r2, r2, r6
    e00c:	6122      	str	r2, [r4, #16]
    e00e:	464b      	mov	r3, r9
    e010:	aa03      	add	r2, sp, #12
    e012:	4621      	mov	r1, r4
    e014:	4640      	mov	r0, r8
    e016:	f8cd a000 	str.w	sl, [sp]
    e01a:	f001 fc76 	bl	f90a <_printf_common>
    e01e:	3001      	adds	r0, #1
    e020:	d171      	bne.n	e106 <_printf_i+0x20e>
    e022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e026:	b004      	add	sp, #16
    e028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e02c:	f023 0304 	bic.w	r3, r3, #4
    e030:	6023      	str	r3, [r4, #0]
    e032:	e7cd      	b.n	dfd0 <_printf_i+0xd8>
    e034:	682b      	ldr	r3, [r5, #0]
    e036:	6820      	ldr	r0, [r4, #0]
    e038:	1d19      	adds	r1, r3, #4
    e03a:	6029      	str	r1, [r5, #0]
    e03c:	0605      	lsls	r5, r0, #24
    e03e:	d501      	bpl.n	e044 <_printf_i+0x14c>
    e040:	681d      	ldr	r5, [r3, #0]
    e042:	e002      	b.n	e04a <_printf_i+0x152>
    e044:	0641      	lsls	r1, r0, #25
    e046:	d5fb      	bpl.n	e040 <_printf_i+0x148>
    e048:	881d      	ldrh	r5, [r3, #0]
    e04a:	2f6f      	cmp	r7, #111	; 0x6f
    e04c:	483f      	ldr	r0, [pc, #252]	; (e14c <_printf_i+0x254>)
    e04e:	bf14      	ite	ne
    e050:	230a      	movne	r3, #10
    e052:	2308      	moveq	r3, #8
    e054:	2100      	movs	r1, #0
    e056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    e05a:	6866      	ldr	r6, [r4, #4]
    e05c:	2e00      	cmp	r6, #0
    e05e:	60a6      	str	r6, [r4, #8]
    e060:	dbb9      	blt.n	dfd6 <_printf_i+0xde>
    e062:	6821      	ldr	r1, [r4, #0]
    e064:	f021 0104 	bic.w	r1, r1, #4
    e068:	6021      	str	r1, [r4, #0]
    e06a:	2d00      	cmp	r5, #0
    e06c:	d1b3      	bne.n	dfd6 <_printf_i+0xde>
    e06e:	2e00      	cmp	r6, #0
    e070:	d1b1      	bne.n	dfd6 <_printf_i+0xde>
    e072:	4616      	mov	r6, r2
    e074:	e7bb      	b.n	dfee <_printf_i+0xf6>
    e076:	6823      	ldr	r3, [r4, #0]
    e078:	f043 0320 	orr.w	r3, r3, #32
    e07c:	6023      	str	r3, [r4, #0]
    e07e:	2778      	movs	r7, #120	; 0x78
    e080:	4833      	ldr	r0, [pc, #204]	; (e150 <_printf_i+0x258>)
    e082:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
    e086:	6829      	ldr	r1, [r5, #0]
    e088:	6823      	ldr	r3, [r4, #0]
    e08a:	1d0e      	adds	r6, r1, #4
    e08c:	602e      	str	r6, [r5, #0]
    e08e:	061e      	lsls	r6, r3, #24
    e090:	d503      	bpl.n	e09a <_printf_i+0x1a2>
    e092:	680d      	ldr	r5, [r1, #0]
    e094:	e004      	b.n	e0a0 <_printf_i+0x1a8>
    e096:	482d      	ldr	r0, [pc, #180]	; (e14c <_printf_i+0x254>)
    e098:	e7f3      	b.n	e082 <_printf_i+0x18a>
    e09a:	065d      	lsls	r5, r3, #25
    e09c:	d5f9      	bpl.n	e092 <_printf_i+0x19a>
    e09e:	880d      	ldrh	r5, [r1, #0]
    e0a0:	07d9      	lsls	r1, r3, #31
    e0a2:	bf44      	itt	mi
    e0a4:	f043 0320 	orrmi.w	r3, r3, #32
    e0a8:	6023      	strmi	r3, [r4, #0]
    e0aa:	b10d      	cbz	r5, e0b0 <_printf_i+0x1b8>
    e0ac:	2310      	movs	r3, #16
    e0ae:	e7d1      	b.n	e054 <_printf_i+0x15c>
    e0b0:	6823      	ldr	r3, [r4, #0]
    e0b2:	f023 0320 	bic.w	r3, r3, #32
    e0b6:	6023      	str	r3, [r4, #0]
    e0b8:	e7f8      	b.n	e0ac <_printf_i+0x1b4>
    e0ba:	4824      	ldr	r0, [pc, #144]	; (e14c <_printf_i+0x254>)
    e0bc:	230a      	movs	r3, #10
    e0be:	e7cc      	b.n	e05a <_printf_i+0x162>
    e0c0:	682b      	ldr	r3, [r5, #0]
    e0c2:	6826      	ldr	r6, [r4, #0]
    e0c4:	1d18      	adds	r0, r3, #4
    e0c6:	6961      	ldr	r1, [r4, #20]
    e0c8:	6028      	str	r0, [r5, #0]
    e0ca:	0635      	lsls	r5, r6, #24
    e0cc:	681b      	ldr	r3, [r3, #0]
    e0ce:	d501      	bpl.n	e0d4 <_printf_i+0x1dc>
    e0d0:	6019      	str	r1, [r3, #0]
    e0d2:	e002      	b.n	e0da <_printf_i+0x1e2>
    e0d4:	0670      	lsls	r0, r6, #25
    e0d6:	d5fb      	bpl.n	e0d0 <_printf_i+0x1d8>
    e0d8:	8019      	strh	r1, [r3, #0]
    e0da:	2300      	movs	r3, #0
    e0dc:	4616      	mov	r6, r2
    e0de:	6123      	str	r3, [r4, #16]
    e0e0:	e795      	b.n	e00e <_printf_i+0x116>
    e0e2:	682b      	ldr	r3, [r5, #0]
    e0e4:	2100      	movs	r1, #0
    e0e6:	1d1a      	adds	r2, r3, #4
    e0e8:	602a      	str	r2, [r5, #0]
    e0ea:	681e      	ldr	r6, [r3, #0]
    e0ec:	6862      	ldr	r2, [r4, #4]
    e0ee:	4630      	mov	r0, r6
    e0f0:	f001 fc7d 	bl	f9ee <memchr>
    e0f4:	b108      	cbz	r0, e0fa <_printf_i+0x202>
    e0f6:	1b80      	subs	r0, r0, r6
    e0f8:	6060      	str	r0, [r4, #4]
    e0fa:	6863      	ldr	r3, [r4, #4]
    e0fc:	6123      	str	r3, [r4, #16]
    e0fe:	2300      	movs	r3, #0
    e100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e104:	e783      	b.n	e00e <_printf_i+0x116>
    e106:	6923      	ldr	r3, [r4, #16]
    e108:	4632      	mov	r2, r6
    e10a:	4649      	mov	r1, r9
    e10c:	4640      	mov	r0, r8
    e10e:	47d0      	blx	sl
    e110:	3001      	adds	r0, #1
    e112:	d086      	beq.n	e022 <_printf_i+0x12a>
    e114:	6823      	ldr	r3, [r4, #0]
    e116:	079b      	lsls	r3, r3, #30
    e118:	d414      	bmi.n	e144 <_printf_i+0x24c>
    e11a:	68e0      	ldr	r0, [r4, #12]
    e11c:	9b03      	ldr	r3, [sp, #12]
    e11e:	4298      	cmp	r0, r3
    e120:	bfb8      	it	lt
    e122:	4618      	movlt	r0, r3
    e124:	e77f      	b.n	e026 <_printf_i+0x12e>
    e126:	2301      	movs	r3, #1
    e128:	4632      	mov	r2, r6
    e12a:	4649      	mov	r1, r9
    e12c:	4640      	mov	r0, r8
    e12e:	47d0      	blx	sl
    e130:	3001      	adds	r0, #1
    e132:	f43f af76 	beq.w	e022 <_printf_i+0x12a>
    e136:	3501      	adds	r5, #1
    e138:	68e3      	ldr	r3, [r4, #12]
    e13a:	9903      	ldr	r1, [sp, #12]
    e13c:	1a5b      	subs	r3, r3, r1
    e13e:	42ab      	cmp	r3, r5
    e140:	dcf1      	bgt.n	e126 <_printf_i+0x22e>
    e142:	e7ea      	b.n	e11a <_printf_i+0x222>
    e144:	2500      	movs	r5, #0
    e146:	f104 0619 	add.w	r6, r4, #25
    e14a:	e7f5      	b.n	e138 <_printf_i+0x240>
    e14c:	00010423 	.word	0x00010423
    e150:	00010434 	.word	0x00010434

0000e154 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    e154:	4770      	bx	lr

0000e156 <gpio_pin_configure_dt.constprop.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    e156:	4603      	mov	r3, r0
    e158:	b4f0      	push	{r4, r5, r6, r7}
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
    e15a:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    e15c:	6800      	ldr	r0, [r0, #0]
				  spec->dt_flags | extra_flags);
    e15e:	88db      	ldrh	r3, [r3, #6]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    e160:	2501      	movs	r5, #1
	struct gpio_driver_data *data =
    e162:	6906      	ldr	r6, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    e164:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    e166:	6834      	ldr	r4, [r6, #0]
	return gpio_pin_configure(spec->port,
    e168:	bf54      	ite	pl
    e16a:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    e16e:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    e172:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    e174:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    e178:	07db      	lsls	r3, r3, #31
	const struct gpio_driver_api *api =
    e17a:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    e17c:	bf4c      	ite	mi
    e17e:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    e180:	43ac      	bicpl	r4, r5
    e182:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
    e184:	683b      	ldr	r3, [r7, #0]
}
    e186:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    e188:	4718      	bx	r3

0000e18a <gpio_pin_toggle_dt.isra.0>:
 *     gpio_pin_toggle(spec->port, spec->pin);
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
    e18a:	4603      	mov	r3, r0
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    e18c:	2101      	movs	r1, #1
    e18e:	791b      	ldrb	r3, [r3, #4]
{
	return gpio_pin_toggle(spec->port, spec->pin);
    e190:	6800      	ldr	r0, [r0, #0]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    e192:	4099      	lsls	r1, r3
	return api->port_toggle_bits(port, pins);
    e194:	6883      	ldr	r3, [r0, #8]
    e196:	695b      	ldr	r3, [r3, #20]
    e198:	4718      	bx	r3

0000e19a <arch_printk_char_out>:
}
    e19a:	2000      	movs	r0, #0
    e19c:	4770      	bx	lr

0000e19e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    e19e:	b40f      	push	{r0, r1, r2, r3}
    e1a0:	b507      	push	{r0, r1, r2, lr}
    e1a2:	a904      	add	r1, sp, #16
    e1a4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    e1a8:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    e1aa:	f7fa f9d7 	bl	855c <vprintk>

	va_end(ap);
}
    e1ae:	b003      	add	sp, #12
    e1b0:	f85d eb04 	ldr.w	lr, [sp], #4
    e1b4:	b004      	add	sp, #16
    e1b6:	4770      	bx	lr

0000e1b8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    e1b8:	4604      	mov	r4, r0
    e1ba:	b508      	push	{r3, lr}
    e1bc:	4608      	mov	r0, r1
    e1be:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    e1c0:	461a      	mov	r2, r3
    e1c2:	47a0      	blx	r4
	return z_impl_z_current_get();
    e1c4:	f7ff f9d8 	bl	d578 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    e1c8:	f7fb fb3e 	bl	9848 <z_impl_k_thread_abort>

0000e1cc <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    e1cc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    e1d0:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    e1d2:	0840      	lsrs	r0, r0, #1
    e1d4:	4770      	bx	lr

0000e1d6 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    e1d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1d8:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    e1da:	f7ff fff7 	bl	e1cc <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    e1de:	fab0 f080 	clz	r0, r0
    e1e2:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    e1e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
    e1ea:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
    e1ee:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
    e1f0:	1d17      	adds	r7, r2, #4
{
    e1f2:	460c      	mov	r4, r1
    e1f4:	3206      	adds	r2, #6
    e1f6:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    e1f8:	b956      	cbnz	r6, e210 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    e1fa:	2101      	movs	r1, #1
    e1fc:	fa01 f000 	lsl.w	r0, r1, r0
    e200:	68d9      	ldr	r1, [r3, #12]
    e202:	4301      	orrs	r1, r0
    e204:	60d9      	str	r1, [r3, #12]
		b->next = c;
    e206:	f8cc 4010 	str.w	r4, [ip, #16]
    e20a:	53dd      	strh	r5, [r3, r7]
    e20c:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    e20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    e210:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    e212:	3104      	adds	r1, #4
    e214:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    e216:	53d8      	strh	r0, [r3, r7]
    e218:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    e21c:	529e      	strh	r6, [r3, r2]
    e21e:	80c5      	strh	r5, [r0, #6]
    e220:	525d      	strh	r5, [r3, r1]
    e222:	e7f4      	b.n	e20e <free_list_add+0x38>

0000e224 <free_list_remove_bidx>:
{
    e224:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    e226:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    e22a:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    e22c:	4299      	cmp	r1, r3
    e22e:	f102 0104 	add.w	r1, r2, #4
    e232:	d10a      	bne.n	e24a <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    e234:	2301      	movs	r3, #1
    e236:	fa03 f202 	lsl.w	r2, r3, r2
    e23a:	68c3      	ldr	r3, [r0, #12]
    e23c:	ea23 0302 	bic.w	r3, r3, r2
    e240:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    e242:	2300      	movs	r3, #0
    e244:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    e248:	bd10      	pop	{r4, pc}
    e24a:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    e24c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    e250:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    e254:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    e258:	80cb      	strh	r3, [r1, #6]
    e25a:	8082      	strh	r2, [r0, #4]
}
    e25c:	e7f4      	b.n	e248 <free_list_remove_bidx+0x24>

0000e25e <free_list_remove>:
{
    e25e:	b508      	push	{r3, lr}
    e260:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    e262:	f7ff ffb3 	bl	e1cc <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    e266:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    e26a:	4618      	mov	r0, r3
}
    e26c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    e270:	f1c2 021f 	rsb	r2, r2, #31
    e274:	f7ff bfd6 	b.w	e224 <free_list_remove_bidx>

0000e278 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    e278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e27c:	fab1 f581 	clz	r5, r1
    e280:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    e284:	eb00 0889 	add.w	r8, r0, r9, lsl #2
    e288:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    e28c:	4603      	mov	r3, r0
    e28e:	460e      	mov	r6, r1
	if (b->next) {
    e290:	b1c2      	cbz	r2, e2c4 <alloc_chunk+0x4c>
    e292:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    e294:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    e298:	4618      	mov	r0, r3
    e29a:	4621      	mov	r1, r4
    e29c:	f7ff ff96 	bl	e1cc <chunk_size>
    e2a0:	42b0      	cmp	r0, r6
    e2a2:	d306      	bcc.n	e2b2 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    e2a4:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    e2a6:	4618      	mov	r0, r3
    e2a8:	f7ff ffbc 	bl	e224 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    e2ac:	4620      	mov	r0, r4
    e2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    e2b2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    e2b6:	88e0      	ldrh	r0, [r4, #6]
		} while (--i && b->next != first);
    e2b8:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
    e2ba:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    e2be:	d001      	beq.n	e2c4 <alloc_chunk+0x4c>
    e2c0:	4282      	cmp	r2, r0
    e2c2:	d1e7      	bne.n	e294 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    e2c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    e2c8:	f1c5 0220 	rsb	r2, r5, #32
    e2cc:	4094      	lsls	r4, r2
    e2ce:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    e2d0:	4014      	ands	r4, r2
    e2d2:	d0eb      	beq.n	e2ac <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    e2d4:	fa94 f2a4 	rbit	r2, r4
    e2d8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    e2dc:	1d11      	adds	r1, r2, #4
    e2de:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    e2e2:	4621      	mov	r1, r4
    e2e4:	e7df      	b.n	e2a6 <alloc_chunk+0x2e>

0000e2e6 <merge_chunks>:
{
    e2e6:	b538      	push	{r3, r4, r5, lr}
    e2e8:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    e2ea:	f7ff ff6f 	bl	e1cc <chunk_size>
{
    e2ee:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    e2f0:	4604      	mov	r4, r0
    e2f2:	4611      	mov	r1, r2
    e2f4:	4618      	mov	r0, r3
    e2f6:	f7ff ff69 	bl	e1cc <chunk_size>
    e2fa:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    e2fc:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    e2fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    e302:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    e304:	4618      	mov	r0, r3
    e306:	f7ff ff61 	bl	e1cc <chunk_size>
	void *cmem = &buf[c];
    e30a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    e30c:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    e310:	bd38      	pop	{r3, r4, r5, pc}

0000e312 <split_chunks>:
{
    e312:	b538      	push	{r3, r4, r5, lr}
    e314:	460c      	mov	r4, r1
    e316:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    e318:	f7ff ff58 	bl	e1cc <chunk_size>
	chunksz_t rsz = sz0 - lsz;
    e31c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    e31e:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
    e320:	4405      	add	r5, r0
    e322:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    e326:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    e328:	8060      	strh	r0, [r4, #2]
    e32a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    e32e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    e330:	8044      	strh	r4, [r0, #2]
    e332:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    e336:	4618      	mov	r0, r3
    e338:	4611      	mov	r1, r2
    e33a:	f7ff ff47 	bl	e1cc <chunk_size>
	void *cmem = &buf[c];
    e33e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    e340:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    e344:	bd38      	pop	{r3, r4, r5, pc}

0000e346 <free_chunk>:
{
    e346:	b538      	push	{r3, r4, r5, lr}
    e348:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    e34a:	f7ff ff3f 	bl	e1cc <chunk_size>
    e34e:	460c      	mov	r4, r1
    e350:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    e352:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    e356:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    e358:	07da      	lsls	r2, r3, #31
    e35a:	d40a      	bmi.n	e372 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    e35c:	4628      	mov	r0, r5
    e35e:	f7ff ff7e 	bl	e25e <free_list_remove>
	return c + chunk_size(h, c);
    e362:	4621      	mov	r1, r4
    e364:	4628      	mov	r0, r5
    e366:	f7ff ff31 	bl	e1cc <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    e36a:	1822      	adds	r2, r4, r0
    e36c:	4628      	mov	r0, r5
    e36e:	f7ff ffba 	bl	e2e6 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    e372:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    e376:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    e378:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    e37c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    e37e:	07db      	lsls	r3, r3, #31
    e380:	d40c      	bmi.n	e39c <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    e382:	4628      	mov	r0, r5
    e384:	f7ff ff6b 	bl	e25e <free_list_remove>
		return ((uint16_t *)cmem)[f];
    e388:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    e38c:	4622      	mov	r2, r4
    e38e:	1a61      	subs	r1, r4, r1
    e390:	4628      	mov	r0, r5
    e392:	f7ff ffa8 	bl	e2e6 <merge_chunks>
    e396:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    e39a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    e39c:	4621      	mov	r1, r4
    e39e:	4628      	mov	r0, r5
}
    e3a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    e3a4:	f7ff bf17 	b.w	e1d6 <free_list_add>

0000e3a8 <sys_heap_free>:
	if (mem == NULL) {
    e3a8:	b161      	cbz	r1, e3c4 <sys_heap_free+0x1c>
    e3aa:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    e3ac:	3904      	subs	r1, #4
    e3ae:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    e3b0:	f021 0307 	bic.w	r3, r1, #7
    e3b4:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    e3b6:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
    e3b8:	08c9      	lsrs	r1, r1, #3
    e3ba:	f022 0201 	bic.w	r2, r2, #1
    e3be:	805a      	strh	r2, [r3, #2]
    e3c0:	f7ff bfc1 	b.w	e346 <free_chunk>
}
    e3c4:	4770      	bx	lr

0000e3c6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    e3c6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    e3c8:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    e3ca:	b909      	cbnz	r1, e3d0 <sys_heap_alloc+0xa>
		return NULL;
    e3cc:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    e3ce:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    e3d0:	68ab      	ldr	r3, [r5, #8]
    e3d2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    e3d6:	d9f9      	bls.n	e3cc <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    e3d8:	310b      	adds	r1, #11
    e3da:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    e3dc:	4621      	mov	r1, r4
    e3de:	4628      	mov	r0, r5
    e3e0:	f7ff ff4a 	bl	e278 <alloc_chunk>
	if (c == 0U) {
    e3e4:	4606      	mov	r6, r0
    e3e6:	2800      	cmp	r0, #0
    e3e8:	d0f0      	beq.n	e3cc <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    e3ea:	4601      	mov	r1, r0
    e3ec:	4628      	mov	r0, r5
    e3ee:	f7ff feed 	bl	e1cc <chunk_size>
    e3f2:	42a0      	cmp	r0, r4
    e3f4:	d907      	bls.n	e406 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    e3f6:	4628      	mov	r0, r5
    e3f8:	1932      	adds	r2, r6, r4
    e3fa:	f7ff ff8a 	bl	e312 <split_chunks>
		free_list_add(h, c + chunk_sz);
    e3fe:	4611      	mov	r1, r2
    e400:	4628      	mov	r0, r5
    e402:	f7ff fee8 	bl	e1d6 <free_list_add>
	void *cmem = &buf[c];
    e406:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    e40a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    e40c:	8853      	ldrh	r3, [r2, #2]
    e40e:	3004      	adds	r0, #4
    e410:	f043 0301 	orr.w	r3, r3, #1
    e414:	8053      	strh	r3, [r2, #2]
	return mem;
    e416:	e7da      	b.n	e3ce <sys_heap_alloc+0x8>

0000e418 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    e418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e41c:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    e420:	ea19 0901 	ands.w	r9, r9, r1
{
    e424:	460f      	mov	r7, r1
    e426:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    e428:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
    e42a:	d00c      	beq.n	e446 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    e42c:	424b      	negs	r3, r1
    e42e:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    e430:	2b04      	cmp	r3, #4
    e432:	461a      	mov	r2, r3
    e434:	464f      	mov	r7, r9
    e436:	bf28      	it	cs
    e438:	2204      	movcs	r2, #4
	rew = align & -align;
    e43a:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    e43c:	b964      	cbnz	r4, e458 <sys_heap_aligned_alloc+0x40>
		return NULL;
    e43e:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    e440:	4628      	mov	r0, r5
    e442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    e446:	2904      	cmp	r1, #4
    e448:	d804      	bhi.n	e454 <sys_heap_aligned_alloc+0x3c>
}
    e44a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    e44e:	4611      	mov	r1, r2
    e450:	f7ff bfb9 	b.w	e3c6 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    e454:	2204      	movs	r2, #4
    e456:	e7f1      	b.n	e43c <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    e458:	68b3      	ldr	r3, [r6, #8]
    e45a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    e45e:	d9ee      	bls.n	e43e <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    e460:	f104 010b 	add.w	r1, r4, #11
    e464:	4439      	add	r1, r7
    e466:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    e468:	4630      	mov	r0, r6
    e46a:	08c9      	lsrs	r1, r1, #3
    e46c:	f7ff ff04 	bl	e278 <alloc_chunk>
	if (c0 == 0) {
    e470:	4680      	mov	r8, r0
    e472:	2800      	cmp	r0, #0
    e474:	d0e3      	beq.n	e43e <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    e476:	f109 0504 	add.w	r5, r9, #4
    e47a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    e47e:	1e7b      	subs	r3, r7, #1
    e480:	4435      	add	r5, r6
    e482:	441d      	add	r5, r3
    e484:	427f      	negs	r7, r7
    e486:	403d      	ands	r5, r7
    e488:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    e48c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    e48e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    e490:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    e492:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    e494:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    e498:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    e49a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    e49e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    e4a2:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    e4a6:	d208      	bcs.n	e4ba <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    e4a8:	4601      	mov	r1, r0
    e4aa:	463a      	mov	r2, r7
    e4ac:	4630      	mov	r0, r6
    e4ae:	f7ff ff30 	bl	e312 <split_chunks>
		free_list_add(h, c0);
    e4b2:	4641      	mov	r1, r8
    e4b4:	4630      	mov	r0, r6
    e4b6:	f7ff fe8e 	bl	e1d6 <free_list_add>
	return c + chunk_size(h, c);
    e4ba:	4639      	mov	r1, r7
    e4bc:	4630      	mov	r0, r6
    e4be:	f7ff fe85 	bl	e1cc <chunk_size>
    e4c2:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    e4c4:	4284      	cmp	r4, r0
    e4c6:	d207      	bcs.n	e4d8 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    e4c8:	4630      	mov	r0, r6
    e4ca:	4622      	mov	r2, r4
    e4cc:	f7ff ff21 	bl	e312 <split_chunks>
		free_list_add(h, c_end);
    e4d0:	4621      	mov	r1, r4
    e4d2:	4630      	mov	r0, r6
    e4d4:	f7ff fe7f 	bl	e1d6 <free_list_add>
	void *cmem = &buf[c];
    e4d8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    e4dc:	8873      	ldrh	r3, [r6, #2]
    e4de:	f043 0301 	orr.w	r3, r3, #1
    e4e2:	8073      	strh	r3, [r6, #2]
    e4e4:	e7ac      	b.n	e440 <sys_heap_aligned_alloc+0x28>

0000e4e6 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    e4e6:	3a04      	subs	r2, #4
{
    e4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    e4ec:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    e4ee:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    e4f0:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    e4f4:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    e4f8:	1b0e      	subs	r6, r1, r4
    e4fa:	08f7      	lsrs	r7, r6, #3
	return 31 - __builtin_clz(usable_sz);
    e4fc:	fab7 f287 	clz	r2, r7
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    e500:	f04f 0800 	mov.w	r8, #0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    e504:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
    e508:	00ad      	lsls	r5, r5, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    e50a:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    e50c:	f1c2 0220 	rsb	r2, r2, #32
    e510:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
    e512:	6004      	str	r4, [r0, #0]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    e514:	4641      	mov	r1, r8
	h->end_chunk = heap_sz;
    e516:	60a7      	str	r7, [r4, #8]
	h->avail_buckets = 0;
    e518:	f8c4 800c 	str.w	r8, [r4, #12]
		h->buckets[i].next = 0;
    e51c:	0092      	lsls	r2, r2, #2
    e51e:	f104 0010 	add.w	r0, r4, #16
    e522:	f001 f92f 	bl	f784 <memset>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    e526:	006b      	lsls	r3, r5, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    e528:	f043 0301 	orr.w	r3, r3, #1
    e52c:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    e52e:	1b7b      	subs	r3, r7, r5
		((uint16_t *)cmem)[f] = val;
    e530:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    e534:	0059      	lsls	r1, r3, #1
		((uint16_t *)cmem)[f] = val;
    e536:	f8a4 8000 	strh.w	r8, [r4]
    e53a:	8051      	strh	r1, [r2, #2]
    e53c:	19a2      	adds	r2, r4, r6
    e53e:	f824 5035 	strh.w	r5, [r4, r5, lsl #3]
    e542:	f8a2 8002 	strh.w	r8, [r2, #2]
    e546:	53a3      	strh	r3, [r4, r6]
	void *cmem = &buf[c];
    e548:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    e54c:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    e54e:	4629      	mov	r1, r5
    e550:	f042 0201 	orr.w	r2, r2, #1
    e554:	805a      	strh	r2, [r3, #2]
    e556:	4620      	mov	r0, r4
}
    e558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    e55c:	f7ff be3b 	b.w	e1d6 <free_list_add>

0000e560 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e560:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    e562:	f013 0307 	ands.w	r3, r3, #7
    e566:	d105      	bne.n	e574 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    e568:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    e56a:	2b00      	cmp	r3, #0
    e56c:	bf0c      	ite	eq
    e56e:	2000      	moveq	r0, #0
    e570:	2003      	movne	r0, #3
    e572:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    e574:	2b02      	cmp	r3, #2
    e576:	d105      	bne.n	e584 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    e578:	8b40      	ldrh	r0, [r0, #26]
    e57a:	fab0 f080 	clz	r0, r0
    e57e:	0940      	lsrs	r0, r0, #5
    e580:	0080      	lsls	r0, r0, #2
    e582:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    e584:	2b01      	cmp	r3, #1
    e586:	d105      	bne.n	e594 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    e588:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    e58a:	2b00      	cmp	r3, #0
    e58c:	bf0c      	ite	eq
    e58e:	2000      	moveq	r0, #0
    e590:	2005      	movne	r0, #5
    e592:	4770      	bx	lr
	int evt = EVT_NOP;
    e594:	2000      	movs	r0, #0
}
    e596:	4770      	bx	lr

0000e598 <validate_args>:
{
    e598:	b510      	push	{r4, lr}
    e59a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    e59c:	b100      	cbz	r0, e5a0 <validate_args+0x8>
    e59e:	b911      	cbnz	r1, e5a6 <validate_args+0xe>
		return -EINVAL;
    e5a0:	f06f 0015 	mvn.w	r0, #21
}
    e5a4:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    e5a6:	1d08      	adds	r0, r1, #4
    e5a8:	f000 f895 	bl	e6d6 <sys_notify_validate>
	if ((rv == 0)
    e5ac:	2800      	cmp	r0, #0
    e5ae:	d1f9      	bne.n	e5a4 <validate_args+0xc>
	    && ((cli->notify.flags
    e5b0:	68a3      	ldr	r3, [r4, #8]
    e5b2:	2b03      	cmp	r3, #3
    e5b4:	d9f6      	bls.n	e5a4 <validate_args+0xc>
    e5b6:	e7f3      	b.n	e5a0 <validate_args+0x8>

0000e5b8 <notify_one>:
{
    e5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5bc:	460d      	mov	r5, r1
    e5be:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    e5c0:	4619      	mov	r1, r3
    e5c2:	1d28      	adds	r0, r5, #4
{
    e5c4:	4690      	mov	r8, r2
    e5c6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    e5c8:	f000 f896 	bl	e6f8 <sys_notify_finalize>
	if (cb) {
    e5cc:	4604      	mov	r4, r0
    e5ce:	b138      	cbz	r0, e5e0 <notify_one+0x28>
		cb(mgr, cli, state, res);
    e5d0:	4633      	mov	r3, r6
    e5d2:	4642      	mov	r2, r8
    e5d4:	4629      	mov	r1, r5
    e5d6:	4638      	mov	r0, r7
    e5d8:	46a4      	mov	ip, r4
}
    e5da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    e5de:	4760      	bx	ip
}
    e5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e5e4 <transition_complete>:
{
    e5e4:	b410      	push	{r4}
	__asm__ volatile(
    e5e6:	f04f 0420 	mov.w	r4, #32
    e5ea:	f3ef 8211 	mrs	r2, BASEPRI
    e5ee:	f384 8812 	msr	BASEPRI_MAX, r4
    e5f2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    e5f6:	6141      	str	r1, [r0, #20]
}
    e5f8:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    e5fa:	2101      	movs	r1, #1
    e5fc:	f7f9 bfbc 	b.w	8578 <process_event>

0000e600 <onoff_manager_init>:
{
    e600:	b538      	push	{r3, r4, r5, lr}
    e602:	460c      	mov	r4, r1
	if ((mgr == NULL)
    e604:	4605      	mov	r5, r0
    e606:	b158      	cbz	r0, e620 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    e608:	b151      	cbz	r1, e620 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    e60a:	680b      	ldr	r3, [r1, #0]
    e60c:	b143      	cbz	r3, e620 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    e60e:	684b      	ldr	r3, [r1, #4]
    e610:	b133      	cbz	r3, e620 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    e612:	221c      	movs	r2, #28
    e614:	2100      	movs	r1, #0
    e616:	f001 f8b5 	bl	f784 <memset>
	return 0;
    e61a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    e61c:	612c      	str	r4, [r5, #16]
}
    e61e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    e620:	f06f 0015 	mvn.w	r0, #21
    e624:	e7fb      	b.n	e61e <onoff_manager_init+0x1e>

0000e626 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    e626:	b570      	push	{r4, r5, r6, lr}
    e628:	4605      	mov	r5, r0
    e62a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    e62c:	f7ff ffb4 	bl	e598 <validate_args>

	if (rv < 0) {
    e630:	1e04      	subs	r4, r0, #0
    e632:	db15      	blt.n	e660 <onoff_request+0x3a>
    e634:	f04f 0320 	mov.w	r3, #32
    e638:	f3ef 8211 	mrs	r2, BASEPRI
    e63c:	f383 8812 	msr	BASEPRI_MAX, r3
    e640:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    e644:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e648:	8b6b      	ldrh	r3, [r5, #26]
    e64a:	8b2c      	ldrh	r4, [r5, #24]
    e64c:	428b      	cmp	r3, r1
    e64e:	f004 0407 	and.w	r4, r4, #7
    e652:	d107      	bne.n	e664 <onoff_request+0x3e>
	__asm__ volatile(
    e654:	f382 8811 	msr	BASEPRI, r2
    e658:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    e65c:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    e660:	4620      	mov	r0, r4
    e662:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    e664:	2c02      	cmp	r4, #2
    e666:	d10c      	bne.n	e682 <onoff_request+0x5c>
		mgr->refs += 1U;
    e668:	3301      	adds	r3, #1
    e66a:	836b      	strh	r3, [r5, #26]
    e66c:	f382 8811 	msr	BASEPRI, r2
    e670:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    e674:	2300      	movs	r3, #0
    e676:	4622      	mov	r2, r4
    e678:	4631      	mov	r1, r6
    e67a:	4628      	mov	r0, r5
    e67c:	f7ff ff9c 	bl	e5b8 <notify_one>
    e680:	e7ee      	b.n	e660 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    e682:	2c06      	cmp	r4, #6
    e684:	d814      	bhi.n	e6b0 <onoff_request+0x8a>
    e686:	e8df f004 	tbb	[pc, r4]
    e68a:	1304      	.short	0x1304
    e68c:	1a041313 	.word	0x1a041313
    e690:	04          	.byte	0x04
    e691:	00          	.byte	0x00
	parent->next = child;
    e692:	2300      	movs	r3, #0
    e694:	6033      	str	r3, [r6, #0]
	return list->tail;
    e696:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    e698:	b93b      	cbnz	r3, e6aa <onoff_request+0x84>
	list->head = node;
    e69a:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    e69e:	b9ac      	cbnz	r4, e6cc <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    e6a0:	2102      	movs	r1, #2
    e6a2:	4628      	mov	r0, r5
    e6a4:	f7f9 ff68 	bl	8578 <process_event>
    e6a8:	e7da      	b.n	e660 <onoff_request+0x3a>
	parent->next = child;
    e6aa:	601e      	str	r6, [r3, #0]
	list->tail = node;
    e6ac:	606e      	str	r6, [r5, #4]
}
    e6ae:	e7f6      	b.n	e69e <onoff_request+0x78>
    e6b0:	f382 8811 	msr	BASEPRI, r2
    e6b4:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    e6b8:	f06f 0404 	mvn.w	r4, #4
    e6bc:	e7d0      	b.n	e660 <onoff_request+0x3a>
    e6be:	f382 8811 	msr	BASEPRI, r2
    e6c2:	f3bf 8f6f 	isb	sy
    e6c6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    e6ca:	e7c9      	b.n	e660 <onoff_request+0x3a>
    e6cc:	f382 8811 	msr	BASEPRI, r2
    e6d0:	f3bf 8f6f 	isb	sy
		if (notify) {
    e6d4:	e7c4      	b.n	e660 <onoff_request+0x3a>

0000e6d6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    e6d6:	4603      	mov	r3, r0
    e6d8:	b158      	cbz	r0, e6f2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    e6da:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    e6dc:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    e6e0:	2a01      	cmp	r2, #1
    e6e2:	d003      	beq.n	e6ec <sys_notify_validate+0x16>
    e6e4:	2a03      	cmp	r2, #3
    e6e6:	d104      	bne.n	e6f2 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    e6e8:	6802      	ldr	r2, [r0, #0]
    e6ea:	b112      	cbz	r2, e6f2 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    e6ec:	2000      	movs	r0, #0
    e6ee:	6098      	str	r0, [r3, #8]
    e6f0:	4770      	bx	lr
    e6f2:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    e6f6:	4770      	bx	lr

0000e6f8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    e6f8:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    e6fa:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    e6fc:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    e700:	2a03      	cmp	r2, #3
    e702:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    e706:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    e708:	bf14      	ite	ne
    e70a:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    e70c:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    e70e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    e710:	4770      	bx	lr

0000e712 <outs>:
{
    e712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e716:	4607      	mov	r7, r0
    e718:	4688      	mov	r8, r1
    e71a:	4615      	mov	r5, r2
    e71c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    e71e:	4614      	mov	r4, r2
    e720:	42b4      	cmp	r4, r6
    e722:	d305      	bcc.n	e730 <outs+0x1e>
    e724:	b10e      	cbz	r6, e72a <outs+0x18>
	return (int)count;
    e726:	1b60      	subs	r0, r4, r5
    e728:	e008      	b.n	e73c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    e72a:	7823      	ldrb	r3, [r4, #0]
    e72c:	2b00      	cmp	r3, #0
    e72e:	d0fa      	beq.n	e726 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    e730:	4641      	mov	r1, r8
    e732:	f814 0b01 	ldrb.w	r0, [r4], #1
    e736:	47b8      	blx	r7
		if (rc < 0) {
    e738:	2800      	cmp	r0, #0
    e73a:	daf1      	bge.n	e720 <outs+0xe>
}
    e73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e740 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    e740:	4770      	bx	lr

0000e742 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    e742:	2806      	cmp	r0, #6
    e744:	d108      	bne.n	e758 <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    e746:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    e74a:	2201      	movs	r2, #1
    e74c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    e750:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    e754:	bf20      	wfe
    while (true)
    e756:	e7fd      	b.n	e754 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    e758:	4770      	bx	lr

0000e75a <pm_state_exit_post_ops>:
    e75a:	2300      	movs	r3, #0
    e75c:	f383 8811 	msr	BASEPRI, r3
    e760:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    e764:	4770      	bx	lr

0000e766 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    e766:	f000 bdd6 	b.w	f316 <z_fatal_error>

0000e76a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    e76a:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    e76c:	6800      	ldr	r0, [r0, #0]
    e76e:	f000 bdd2 	b.w	f316 <z_fatal_error>

0000e772 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    e772:	2100      	movs	r1, #0
    e774:	2001      	movs	r0, #1
    e776:	f7ff bff6 	b.w	e766 <z_arm_fatal_error>

0000e77a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    e77a:	b508      	push	{r3, lr}
	handler();
    e77c:	f7fa fdb6 	bl	92ec <z_SysNmiOnReset>
	z_arm_int_exit();
}
    e780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    e784:	f7fa be7e 	b.w	9484 <z_arm_exc_exit>

0000e788 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    e788:	6e43      	ldr	r3, [r0, #100]	; 0x64
    e78a:	f383 880b 	msr	PSPLIM, r3
}
    e78e:	4770      	bx	lr

0000e790 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
    e790:	4770      	bx	lr

0000e792 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
    e792:	4770      	bx	lr

0000e794 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    e794:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    e798:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    e79c:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    e79e:	bf08      	it	eq
    e7a0:	f06f 0015 	mvneq.w	r0, #21
    e7a4:	4770      	bx	lr

0000e7a6 <mpu_configure_region>:
{
    e7a6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    e7a8:	890a      	ldrh	r2, [r1, #8]
    e7aa:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    e7ac:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    e7ae:	684d      	ldr	r5, [r1, #4]
    e7b0:	f002 021f 	and.w	r2, r2, #31
    e7b4:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    e7b8:	9300      	str	r3, [sp, #0]
    e7ba:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e7be:	f023 031f 	bic.w	r3, r3, #31
    e7c2:	1e6a      	subs	r2, r5, #1
    e7c4:	4413      	add	r3, r2
    e7c6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e7ca:	280f      	cmp	r0, #15
    e7cc:	9303      	str	r3, [sp, #12]
    e7ce:	d804      	bhi.n	e7da <mpu_configure_region+0x34>
	region_init(index, region_conf);
    e7d0:	4669      	mov	r1, sp
    e7d2:	f7fb f86b 	bl	98ac <region_init>
}
    e7d6:	b004      	add	sp, #16
    e7d8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    e7da:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    e7de:	e7fa      	b.n	e7d6 <mpu_configure_region+0x30>

0000e7e0 <malloc_prepare>:
}
    e7e0:	2000      	movs	r0, #0
    e7e2:	4770      	bx	lr

0000e7e4 <_stdout_hook_default>:
}
    e7e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e7e8:	4770      	bx	lr

0000e7ea <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
    e7ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e7ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e7f2:	f7fe bae7 	b.w	cdc4 <z_impl_k_mutex_lock>

0000e7f6 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
    e7f6:	f7fe bb5f 	b.w	ceb8 <z_impl_k_mutex_unlock>

0000e7fa <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    e7fa:	f7fe b935 	b.w	ca68 <z_impl_z_errno>

0000e7fe <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    e7fe:	220c      	movs	r2, #12
    e800:	6903      	ldr	r3, [r0, #16]
    e802:	b2c9      	uxtb	r1, r1
    e804:	fb01 3302 	mla	r3, r1, r2, r3
    e808:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    e80a:	f000 0007 	and.w	r0, r0, #7
    e80e:	4770      	bx	lr

0000e810 <set_on_state>:
	__asm__ volatile(
    e810:	f04f 0320 	mov.w	r3, #32
    e814:	f3ef 8211 	mrs	r2, BASEPRI
    e818:	f383 8812 	msr	BASEPRI_MAX, r3
    e81c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    e820:	6803      	ldr	r3, [r0, #0]
    e822:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e826:	f043 0302 	orr.w	r3, r3, #2
    e82a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    e82c:	f382 8811 	msr	BASEPRI, r2
    e830:	f3bf 8f6f 	isb	sy
}
    e834:	4770      	bx	lr

0000e836 <stop>:
{
    e836:	b570      	push	{r4, r5, r6, lr}
    e838:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    e83a:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    e83c:	f04f 0420 	mov.w	r4, #32
    e840:	f3ef 8511 	mrs	r5, BASEPRI
    e844:	f384 8812 	msr	BASEPRI_MAX, r4
    e848:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e84c:	260c      	movs	r6, #12
    e84e:	fb06 3401 	mla	r4, r6, r1, r3
    e852:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    e854:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    e858:	d008      	beq.n	e86c <stop+0x36>
    e85a:	42a2      	cmp	r2, r4
    e85c:	d006      	beq.n	e86c <stop+0x36>
	__asm__ volatile(
    e85e:	f385 8811 	msr	BASEPRI, r5
    e862:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    e866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    e86a:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e86c:	2201      	movs	r2, #1
    e86e:	fb06 3301 	mla	r3, r6, r1, r3
    e872:	641a      	str	r2, [r3, #64]	; 0x40
    e874:	f385 8811 	msr	BASEPRI, r5
    e878:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    e87c:	6843      	ldr	r3, [r0, #4]
    e87e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    e882:	685b      	ldr	r3, [r3, #4]
    e884:	4798      	blx	r3
	return 0;
    e886:	2000      	movs	r0, #0
    e888:	e7ef      	b.n	e86a <stop+0x34>

0000e88a <api_stop>:
	return stop(dev, subsys, CTX_API);
    e88a:	2280      	movs	r2, #128	; 0x80
    e88c:	f7ff bfd3 	b.w	e836 <stop>

0000e890 <async_start>:
{
    e890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e892:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    e894:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    e896:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    e898:	f04f 0520 	mov.w	r5, #32
    e89c:	f3ef 8611 	mrs	r6, BASEPRI
    e8a0:	f385 8812 	msr	BASEPRI_MAX, r5
    e8a4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e8a8:	250c      	movs	r5, #12
    e8aa:	fb05 4401 	mla	r4, r5, r1, r4
    e8ae:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    e8b0:	f005 0c07 	and.w	ip, r5, #7
    e8b4:	f1bc 0f01 	cmp.w	ip, #1
    e8b8:	d10c      	bne.n	e8d4 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    e8ba:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    e8bc:	f386 8811 	msr	BASEPRI, r6
    e8c0:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    e8c4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    e8c8:	6843      	ldr	r3, [r0, #4]
    e8ca:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    e8ce:	4798      	blx	r3
	return 0;
    e8d0:	2000      	movs	r0, #0
}
    e8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    e8d4:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    e8d8:	42af      	cmp	r7, r5
    e8da:	f386 8811 	msr	BASEPRI, r6
    e8de:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    e8e2:	bf0c      	ite	eq
    e8e4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    e8e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    e8ec:	e7f1      	b.n	e8d2 <async_start+0x42>

0000e8ee <api_start>:
{
    e8ee:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    e8f0:	2480      	movs	r4, #128	; 0x80
    e8f2:	9400      	str	r4, [sp, #0]
    e8f4:	f7ff ffcc 	bl	e890 <async_start>
}
    e8f8:	b002      	add	sp, #8
    e8fa:	bd10      	pop	{r4, pc}

0000e8fc <onoff_started_callback>:
{
    e8fc:	b410      	push	{r4}
	notify(mgr, 0);
    e8fe:	241c      	movs	r4, #28
	return &data->mgr[type];
    e900:	6900      	ldr	r0, [r0, #16]
    e902:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    e904:	fb03 0004 	mla	r0, r3, r4, r0
    e908:	2100      	movs	r1, #0
}
    e90a:	bc10      	pop	{r4}
	notify(mgr, 0);
    e90c:	4710      	bx	r2

0000e90e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    e90e:	2000      	movs	r0, #0
    e910:	f7fc bcfc 	b.w	b30c <nrfx_clock_start>

0000e914 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    e914:	2000      	movs	r0, #0
    e916:	f000 bb48 	b.w	efaa <nrfx_clock_stop>

0000e91a <blocking_start_callback>:
{
    e91a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    e91c:	f7fe bb08 	b.w	cf30 <z_impl_k_sem_give>

0000e920 <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
    e920:	4608      	mov	r0, r1
    e922:	b508      	push	{r3, lr}
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
    e924:	4611      	mov	r1, r2
    e926:	f7fc fc03 	bl	b130 <psa_generate_random>
	if (status != PSA_SUCCESS) {
		return -EIO;
    e92a:	2800      	cmp	r0, #0
	}

	return 0;
}
    e92c:	bf18      	it	ne
    e92e:	f06f 0004 	mvnne.w	r0, #4
    e932:	bd08      	pop	{r3, pc}

0000e934 <entropy_psa_crypto_rng_init>:
{
    e934:	b508      	push	{r3, lr}
	status = psa_crypto_init();
    e936:	f000 fb32 	bl	ef9e <psa_crypto_init>
		return -EIO;
    e93a:	2800      	cmp	r0, #0
}
    e93c:	bf18      	it	ne
    e93e:	f06f 0004 	mvnne.w	r0, #4
    e942:	bd08      	pop	{r3, pc}

0000e944 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e944:	6843      	ldr	r3, [r0, #4]
}
    e946:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e948:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    e94a:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    e94c:	600b      	str	r3, [r1, #0]
}
    e94e:	4770      	bx	lr

0000e950 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e950:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    e952:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e956:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    e958:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    e95c:	6098      	str	r0, [r3, #8]
}
    e95e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    e960:	60d9      	str	r1, [r3, #12]
    e962:	4770      	bx	lr

0000e964 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e964:	6843      	ldr	r3, [r0, #4]
}
    e966:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e968:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    e96a:	6099      	str	r1, [r3, #8]
}
    e96c:	4770      	bx	lr

0000e96e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e96e:	6843      	ldr	r3, [r0, #4]
}
    e970:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e972:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    e974:	60d9      	str	r1, [r3, #12]
}
    e976:	4770      	bx	lr

0000e978 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    e978:	6843      	ldr	r3, [r0, #4]
    e97a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    e97c:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    e97e:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    e982:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    e984:	6090      	str	r0, [r2, #8]
}
    e986:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    e988:	60d3      	str	r3, [r2, #12]
    e98a:	4770      	bx	lr

0000e98c <gpio_nrfx_manage_callback>:
{
    e98c:	b510      	push	{r4, lr}
	return port->data;
    e98e:	6903      	ldr	r3, [r0, #16]
	return list->head;
    e990:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    e992:	b1f8      	cbz	r0, e9d4 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e994:	4288      	cmp	r0, r1
    e996:	d119      	bne.n	e9cc <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    e998:	689c      	ldr	r4, [r3, #8]
	return node->next;
    e99a:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    e99c:	42a1      	cmp	r1, r4
	list->head = node;
    e99e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    e9a0:	d100      	bne.n	e9a4 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    e9a2:	6098      	str	r0, [r3, #8]
	parent->next = child;
    e9a4:	2000      	movs	r0, #0
    e9a6:	6008      	str	r0, [r1, #0]
	if (set) {
    e9a8:	b12a      	cbz	r2, e9b6 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    e9aa:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    e9ac:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    e9ae:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    e9b0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    e9b2:	b902      	cbnz	r2, e9b6 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    e9b4:	6099      	str	r1, [r3, #8]
	return 0;
    e9b6:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    e9b8:	e010      	b.n	e9dc <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e9ba:	4281      	cmp	r1, r0
    e9bc:	d106      	bne.n	e9cc <gpio_nrfx_manage_callback+0x40>
	return node->next;
    e9be:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    e9c0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    e9c2:	6898      	ldr	r0, [r3, #8]
    e9c4:	4281      	cmp	r1, r0
    e9c6:	d1ed      	bne.n	e9a4 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    e9c8:	609c      	str	r4, [r3, #8]
}
    e9ca:	e7eb      	b.n	e9a4 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    e9cc:	4604      	mov	r4, r0
    e9ce:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    e9d0:	2800      	cmp	r0, #0
    e9d2:	d1f2      	bne.n	e9ba <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    e9d4:	2a00      	cmp	r2, #0
    e9d6:	d1e8      	bne.n	e9aa <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    e9d8:	f06f 0015 	mvn.w	r0, #21
}
    e9dc:	bd10      	pop	{r4, pc}

0000e9de <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    e9de:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    e9e0:	6843      	ldr	r3, [r0, #4]
    e9e2:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    e9e4:	7a05      	ldrb	r5, [r0, #8]
    e9e6:	6844      	ldr	r4, [r0, #4]
    e9e8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    e9ec:	42a3      	cmp	r3, r4
    e9ee:	d302      	bcc.n	e9f6 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    e9f0:	f06f 0001 	mvn.w	r0, #1
}
    e9f4:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    e9f6:	795c      	ldrb	r4, [r3, #5]
    e9f8:	428c      	cmp	r4, r1
    e9fa:	d001      	beq.n	ea00 <pinctrl_lookup_state+0x22>
		(*state)++;
    e9fc:	3308      	adds	r3, #8
    e9fe:	e7f0      	b.n	e9e2 <pinctrl_lookup_state+0x4>
			return 0;
    ea00:	2000      	movs	r0, #0
    ea02:	e7f7      	b.n	e9f4 <pinctrl_lookup_state+0x16>

0000ea04 <uarte_nrfx_config_get>:
{
    ea04:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    ea06:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    ea08:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    ea0c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    ea10:	2000      	movs	r0, #0
    ea12:	4770      	bx	lr

0000ea14 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    ea14:	6843      	ldr	r3, [r0, #4]
    ea16:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    ea18:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    ea1c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    ea20:	4770      	bx	lr

0000ea22 <tx_start>:
{
    ea22:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    ea24:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    ea26:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ea28:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    ea2c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ea30:	2200      	movs	r2, #0
    ea32:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    ea36:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    ea3a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    ea3e:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    ea42:	6862      	ldr	r2, [r4, #4]
    ea44:	06d2      	lsls	r2, r2, #27
    ea46:	d511      	bpl.n	ea6c <tx_start+0x4a>
	if (data->async) {
    ea48:	6902      	ldr	r2, [r0, #16]
    ea4a:	68d2      	ldr	r2, [r2, #12]
    ea4c:	b12a      	cbz	r2, ea5a <tx_start+0x38>
		data->async->low_power_mask |= mask;
    ea4e:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
    ea52:	f041 0101 	orr.w	r1, r1, #1
    ea56:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    ea5a:	2108      	movs	r1, #8
	return config->uarte_regs;
    ea5c:	6842      	ldr	r2, [r0, #4]
    ea5e:	6812      	ldr	r2, [r2, #0]
    ea60:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    ea64:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    ea68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ea6c:	2201      	movs	r2, #1
    ea6e:	609a      	str	r2, [r3, #8]
}
    ea70:	bd10      	pop	{r4, pc}

0000ea72 <user_callback>:
	if (data->async->user_callback) {
    ea72:	6903      	ldr	r3, [r0, #16]
    ea74:	68da      	ldr	r2, [r3, #12]
    ea76:	6813      	ldr	r3, [r2, #0]
    ea78:	b10b      	cbz	r3, ea7e <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    ea7a:	6852      	ldr	r2, [r2, #4]
    ea7c:	4718      	bx	r3
}
    ea7e:	4770      	bx	lr

0000ea80 <notify_uart_rx_rdy>:
{
    ea80:	b570      	push	{r4, r5, r6, lr}
    ea82:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
    ea84:	6906      	ldr	r6, [r0, #16]
{
    ea86:	4604      	mov	r4, r0
    ea88:	460d      	mov	r5, r1
	struct uart_event evt = {
    ea8a:	2214      	movs	r2, #20
    ea8c:	2100      	movs	r1, #0
    ea8e:	a801      	add	r0, sp, #4
    ea90:	f000 fe78 	bl	f784 <memset>
    ea94:	2302      	movs	r3, #2
    ea96:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    ea9a:	68f3      	ldr	r3, [r6, #12]
	user_callback(dev, &evt);
    ea9c:	4620      	mov	r0, r4
	struct uart_event evt = {
    ea9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    eaa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	user_callback(dev, &evt);
    eaa2:	a901      	add	r1, sp, #4
	struct uart_event evt = {
    eaa4:	e9cd 3503 	strd	r3, r5, [sp, #12]
    eaa8:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    eaaa:	f7ff ffe2 	bl	ea72 <user_callback>
}
    eaae:	b006      	add	sp, #24
    eab0:	bd70      	pop	{r4, r5, r6, pc}

0000eab2 <rx_buf_release>:
{
    eab2:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
    eab4:	680e      	ldr	r6, [r1, #0]
{
    eab6:	4605      	mov	r5, r0
    eab8:	460c      	mov	r4, r1
    eaba:	b086      	sub	sp, #24
	if (*buf) {
    eabc:	b17e      	cbz	r6, eade <rx_buf_release+0x2c>
		struct uart_event evt = {
    eabe:	2214      	movs	r2, #20
    eac0:	2100      	movs	r1, #0
    eac2:	a801      	add	r0, sp, #4
    eac4:	f000 fe5e 	bl	f784 <memset>
    eac8:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    eaca:	4628      	mov	r0, r5
    eacc:	eb0d 0103 	add.w	r1, sp, r3
		struct uart_event evt = {
    ead0:	f88d 3004 	strb.w	r3, [sp, #4]
    ead4:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
    ead6:	f7ff ffcc 	bl	ea72 <user_callback>
		*buf = NULL;
    eada:	2300      	movs	r3, #0
    eadc:	6023      	str	r3, [r4, #0]
}
    eade:	b006      	add	sp, #24
    eae0:	bd70      	pop	{r4, r5, r6, pc}

0000eae2 <notify_rx_disable>:
{
    eae2:	b510      	push	{r4, lr}
    eae4:	b086      	sub	sp, #24
    eae6:	4604      	mov	r4, r0
	struct uart_event evt = {
    eae8:	2214      	movs	r2, #20
    eaea:	2100      	movs	r1, #0
    eaec:	a801      	add	r0, sp, #4
    eaee:	f000 fe49 	bl	f784 <memset>
    eaf2:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    eaf4:	4620      	mov	r0, r4
    eaf6:	a901      	add	r1, sp, #4
	struct uart_event evt = {
    eaf8:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    eafc:	f7ff ffb9 	bl	ea72 <user_callback>
}
    eb00:	b006      	add	sp, #24
    eb02:	bd10      	pop	{r4, pc}

0000eb04 <uarte_nrfx_rx_buf_rsp>:
{
    eb04:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
    eb06:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    eb08:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    eb0a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    eb0c:	f04f 0020 	mov.w	r0, #32
    eb10:	f3ef 8611 	mrs	r6, BASEPRI
    eb14:	f380 8812 	msr	BASEPRI_MAX, r0
    eb18:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    eb1c:	68ec      	ldr	r4, [r5, #12]
    eb1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
    eb20:	b198      	cbz	r0, eb4a <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
    eb22:	6e60      	ldr	r0, [r4, #100]	; 0x64
    eb24:	b9a0      	cbnz	r0, eb50 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
    eb26:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
    eb28:	68ec      	ldr	r4, [r5, #12]
    eb2a:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    eb2c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    eb30:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    eb34:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    eb38:	f042 0220 	orr.w	r2, r2, #32
    eb3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    eb40:	f386 8811 	msr	BASEPRI, r6
    eb44:	f3bf 8f6f 	isb	sy
}
    eb48:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
    eb4a:	f06f 000c 	mvn.w	r0, #12
    eb4e:	e7f7      	b.n	eb40 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
    eb50:	f06f 000f 	mvn.w	r0, #15
    eb54:	e7f4      	b.n	eb40 <uarte_nrfx_rx_buf_rsp+0x3c>

0000eb56 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    eb56:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
    eb58:	68d8      	ldr	r0, [r3, #12]
    eb5a:	b120      	cbz	r0, eb66 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
    eb5c:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
    eb5e:	68db      	ldr	r3, [r3, #12]
	return 0;
    eb60:	2000      	movs	r0, #0
	data->async->user_data = user_data;
    eb62:	605a      	str	r2, [r3, #4]
	return 0;
    eb64:	4770      	bx	lr
		return -ENOTSUP;
    eb66:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    eb6a:	4770      	bx	lr

0000eb6c <uarte_nrfx_poll_in>:
{
    eb6c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
    eb6e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    eb70:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    eb72:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    eb74:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
    eb76:	b960      	cbnz	r0, eb92 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eb78:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    eb7c:	b164      	cbz	r4, eb98 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
    eb7e:	6992      	ldr	r2, [r2, #24]
    eb80:	7812      	ldrb	r2, [r2, #0]
    eb82:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    eb84:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    eb88:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    eb8c:	2201      	movs	r2, #1
    eb8e:	601a      	str	r2, [r3, #0]
}
    eb90:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    eb92:	f06f 0085 	mvn.w	r0, #133	; 0x85
    eb96:	e7fb      	b.n	eb90 <uarte_nrfx_poll_in+0x24>
		return -1;
    eb98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eb9c:	e7f8      	b.n	eb90 <uarte_nrfx_poll_in+0x24>

0000eb9e <uarte_nrfx_rx_disable>:
{
    eb9e:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    eba0:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    eba2:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    eba4:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    eba6:	68eb      	ldr	r3, [r5, #12]
    eba8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    ebaa:	b1d2      	cbz	r2, ebe2 <uarte_nrfx_rx_disable+0x44>
	if (data->async->rx_next_buf != NULL) {
    ebac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ebae:	b153      	cbz	r3, ebc6 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    ebb0:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    ebb4:	f023 0320 	bic.w	r3, r3, #32
    ebb8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ebbc:	2300      	movs	r3, #0
    ebbe:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    ebc2:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
    ebc6:	68e8      	ldr	r0, [r5, #12]
    ebc8:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
    ebca:	f000 fdb1 	bl	f730 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    ebce:	2000      	movs	r0, #0
    ebd0:	68eb      	ldr	r3, [r5, #12]
    ebd2:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
	data->async->discard_rx_fifo = true;
    ebd6:	2301      	movs	r3, #1
    ebd8:	68ea      	ldr	r2, [r5, #12]
    ebda:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ebde:	6063      	str	r3, [r4, #4]
}
    ebe0:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    ebe2:	f06f 000d 	mvn.w	r0, #13
    ebe6:	e7fb      	b.n	ebe0 <uarte_nrfx_rx_disable+0x42>

0000ebe8 <setup_tx_cache>:
{
    ebe8:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    ebea:	68c3      	ldr	r3, [r0, #12]
    ebec:	68da      	ldr	r2, [r3, #12]
    ebee:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
    ebf0:	1a52      	subs	r2, r2, r1
    ebf2:	d00f      	beq.n	ec14 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
    ebf4:	2a08      	cmp	r2, #8
    ebf6:	bf28      	it	cs
    ebf8:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    ebfa:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
    ebfc:	68c3      	ldr	r3, [r0, #12]
    ebfe:	6999      	ldr	r1, [r3, #24]
    ec00:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    ec02:	68c3      	ldr	r3, [r0, #12]
    ec04:	6898      	ldr	r0, [r3, #8]
    ec06:	69d9      	ldr	r1, [r3, #28]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ec08:	4401      	add	r1, r0
    ec0a:	6998      	ldr	r0, [r3, #24]
    ec0c:	f000 fdad 	bl	f76a <memcpy>
	return true;
    ec10:	2001      	movs	r0, #1
}
    ec12:	bd08      	pop	{r3, pc}
		return false;
    ec14:	4610      	mov	r0, r2
    ec16:	e7fc      	b.n	ec12 <setup_tx_cache+0x2a>

0000ec18 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    ec18:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return config->uarte_regs;
    ec1a:	6806      	ldr	r6, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    ec1c:	4614      	mov	r4, r2
	uint8_t *flush_buf = buf ? buf : tmp_buf;
    ec1e:	460b      	mov	r3, r1
    return p_reg->RXD.AMOUNT;
    ec20:	f8d6 553c 	ldr.w	r5, [r6, #1340]	; 0x53c
    ec24:	b1f1      	cbz	r1, ec64 <rx_flush.isra.0+0x4c>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    ec26:	2100      	movs	r1, #0
    ec28:	4618      	mov	r0, r3
    ec2a:	f000 fdab 	bl	f784 <memset>
    ec2e:	4603      	mov	r3, r0
    ec30:	4601      	mov	r1, r0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    ec32:	f8c6 1534 	str.w	r1, [r6, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ec36:	2100      	movs	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ec38:	2001      	movs	r0, #1
    p_reg->RXD.MAXCNT = length;
    ec3a:	f8c6 4538 	str.w	r4, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ec3e:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    ec42:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ec46:	62f0      	str	r0, [r6, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ec48:	f8d6 0110 	ldr.w	r0, [r6, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    ec4c:	2800      	cmp	r0, #0
    ec4e:	d0fb      	beq.n	ec48 <rx_flush.isra.0+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ec50:	f8c6 1110 	str.w	r1, [r6, #272]	; 0x110
    ec54:	f8d6 2110 	ldr.w	r2, [r6, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    ec58:	f8d6 053c 	ldr.w	r0, [r6, #1340]	; 0x53c
	if (!buf) {
    ec5c:	b92b      	cbnz	r3, ec6a <rx_flush.isra.0+0x52>
			return rx_amount;
    ec5e:	b2c0      	uxtb	r0, r0
}
    ec60:	b002      	add	sp, #8
    ec62:	bd70      	pop	{r4, r5, r6, pc}
		flush_len = sizeof(tmp_buf);
    ec64:	2405      	movs	r4, #5
		flush_buf = tmp_buf;
    ec66:	4669      	mov	r1, sp
    ec68:	e7e3      	b.n	ec32 <rx_flush.isra.0+0x1a>
	if (rx_amount != prev_rx_amount) {
    ec6a:	4285      	cmp	r5, r0
    ec6c:	d1f7      	bne.n	ec5e <rx_flush.isra.0+0x46>
    ec6e:	191a      	adds	r2, r3, r4
	for (int i = 0; i < flush_len; i++) {
    ec70:	4293      	cmp	r3, r2
    ec72:	d101      	bne.n	ec78 <rx_flush.isra.0+0x60>
	return 0;
    ec74:	2000      	movs	r0, #0
    ec76:	e7f3      	b.n	ec60 <rx_flush.isra.0+0x48>
		if (buf[i] != dirty) {
    ec78:	f813 1b01 	ldrb.w	r1, [r3], #1
    ec7c:	2900      	cmp	r1, #0
    ec7e:	d0f7      	beq.n	ec70 <rx_flush.isra.0+0x58>
    ec80:	e7ed      	b.n	ec5e <rx_flush.isra.0+0x46>

0000ec82 <async_uart_release>:
{
    ec82:	b570      	push	{r4, r5, r6, lr}
    ec84:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    ec86:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
    ec88:	f04f 0320 	mov.w	r3, #32
    ec8c:	f3ef 8611 	mrs	r6, BASEPRI
    ec90:	f383 8812 	msr	BASEPRI_MAX, r3
    ec94:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    ec98:	68d0      	ldr	r0, [r2, #12]
    ec9a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
    ec9e:	ea23 0301 	bic.w	r3, r3, r1
    eca2:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
    eca6:	68d5      	ldr	r5, [r2, #12]
    eca8:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    ecac:	b973      	cbnz	r3, eccc <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    ecae:	2902      	cmp	r1, #2
    ecb0:	d107      	bne.n	ecc2 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
    ecb2:	2205      	movs	r2, #5
    ecb4:	6860      	ldr	r0, [r4, #4]
    ecb6:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
    ecba:	f7ff ffad 	bl	ec18 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
    ecbe:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    ecc2:	2200      	movs	r2, #0
	return config->uarte_regs;
    ecc4:	6863      	ldr	r3, [r4, #4]
    ecc6:	681b      	ldr	r3, [r3, #0]
    ecc8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    eccc:	f386 8811 	msr	BASEPRI, r6
    ecd0:	f3bf 8f6f 	isb	sy
}
    ecd4:	bd70      	pop	{r4, r5, r6, pc}

0000ecd6 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    ecd6:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    ecd8:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ecda:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    ecde:	b940      	cbnz	r0, ecf2 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    ece0:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    ece2:	079b      	lsls	r3, r3, #30
    ece4:	d406      	bmi.n	ecf4 <is_tx_ready.isra.0+0x1e>
    ece6:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    ecea:	3800      	subs	r0, #0
    ecec:	bf18      	it	ne
    ecee:	2001      	movne	r0, #1
    ecf0:	4770      	bx	lr
    ecf2:	2001      	movs	r0, #1
}
    ecf4:	4770      	bx	lr

0000ecf6 <start_tx_locked>:
{
    ecf6:	b510      	push	{r4, lr}
    ecf8:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    ecfa:	6840      	ldr	r0, [r0, #4]
    ecfc:	f7ff ffeb 	bl	ecd6 <is_tx_ready.isra.0>
    ed00:	68cb      	ldr	r3, [r1, #12]
    ed02:	b918      	cbnz	r0, ed0c <start_tx_locked+0x16>
		data->async->pending_tx = true;
    ed04:	2201      	movs	r2, #1
    ed06:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
}
    ed0a:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    ed0c:	2200      	movs	r2, #0
    ed0e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
		data->async->tx_amount = -1;
    ed12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ed16:	68cb      	ldr	r3, [r1, #12]
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    ed18:	4620      	mov	r0, r4
		data->async->tx_amount = -1;
    ed1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    ed1e:	68cb      	ldr	r3, [r1, #12]
}
    ed20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    ed24:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
    ed28:	f7ff be7b 	b.w	ea22 <tx_start>

0000ed2c <uarte_nrfx_rx_enable>:
{
    ed2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
    ed30:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
    ed34:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
    ed36:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
    ed3a:	4605      	mov	r5, r0
    ed3c:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
    ed3e:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
    ed40:	f8da 9000 	ldr.w	r9, [sl]
	if (cfg->disable_rx) {
    ed44:	2a00      	cmp	r2, #0
    ed46:	d179      	bne.n	ee3c <uarte_nrfx_rx_enable+0x110>
	if (data->async->rx_enabled || data->async->discard_rx_fifo) {
    ed48:	68e2      	ldr	r2, [r4, #12]
    ed4a:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
    ed4e:	2900      	cmp	r1, #0
    ed50:	d177      	bne.n	ee42 <uarte_nrfx_rx_enable+0x116>
    ed52:	f892 10cb 	ldrb.w	r1, [r2, #203]	; 0xcb
    ed56:	2900      	cmp	r1, #0
    ed58:	d173      	bne.n	ee42 <uarte_nrfx_rx_enable+0x116>
		MAX(timeout / RX_TIMEOUT_DIV,
    ed5a:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    ed5e:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
    ed60:	bfca      	itet	gt
    ed62:	2205      	movgt	r2, #5
    ed64:	235c      	movle	r3, #92	; 0x5c
    ed66:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    ed6a:	68e2      	ldr	r2, [r4, #12]
    ed6c:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
    ed6e:	68e3      	ldr	r3, [r4, #12]
    ed70:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
    ed74:	68e3      	ldr	r3, [r4, #12]
    ed76:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
    ed78:	2300      	movs	r3, #0
    ed7a:	68e2      	ldr	r2, [r4, #12]
    ed7c:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
    ed7e:	68e2      	ldr	r2, [r4, #12]
    ed80:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
    ed82:	68e2      	ldr	r2, [r4, #12]
    ed84:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    ed86:	f8da 3004 	ldr.w	r3, [sl, #4]
    ed8a:	06da      	lsls	r2, r3, #27
    ed8c:	d523      	bpl.n	edd6 <uarte_nrfx_rx_enable+0xaa>
		if (data->async->rx_flush_cnt) {
    ed8e:	68e1      	ldr	r1, [r4, #12]
    ed90:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
    ed94:	b1fe      	cbz	r6, edd6 <uarte_nrfx_rx_enable+0xaa>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    ed96:	42be      	cmp	r6, r7
    ed98:	bf28      	it	cs
    ed9a:	463e      	movcs	r6, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ed9c:	4640      	mov	r0, r8
    ed9e:	4632      	mov	r2, r6
    eda0:	31c4      	adds	r1, #196	; 0xc4
    eda2:	f000 fce2 	bl	f76a <memcpy>
			if (!len) {
    eda6:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
    eda8:	44b0      	add	r8, r6
			if (!len) {
    edaa:	d114      	bne.n	edd6 <uarte_nrfx_rx_enable+0xaa>
				data->async->rx_flush_cnt -= cpy_len;
    edac:	68e2      	ldr	r2, [r4, #12]
				notify_uart_rx_rdy(dev, cpy_len);
    edae:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
    edb0:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
    edb4:	4628      	mov	r0, r5
				data->async->rx_flush_cnt -= cpy_len;
    edb6:	1b9b      	subs	r3, r3, r6
    edb8:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
    edbc:	f7ff fe60 	bl	ea80 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    edc0:	68e1      	ldr	r1, [r4, #12]
    edc2:	4628      	mov	r0, r5
    edc4:	3158      	adds	r1, #88	; 0x58
    edc6:	f7ff fe74 	bl	eab2 <rx_buf_release>
				notify_rx_disable(dev);
    edca:	4628      	mov	r0, r5
    edcc:	f7ff fe89 	bl	eae2 <notify_rx_disable>
				return 0;
    edd0:	2000      	movs	r0, #0
}
    edd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    edd6:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    edd8:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    eddc:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ede0:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
    ede4:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
	data->async->rx_enabled = true;
    ede8:	2201      	movs	r2, #1
    edea:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
    edee:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
    edf2:	68e3      	ldr	r3, [r4, #12]
    edf4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    edf8:	f8da 3004 	ldr.w	r3, [sl, #4]
    edfc:	06db      	lsls	r3, r3, #27
    edfe:	d519      	bpl.n	ee34 <uarte_nrfx_rx_enable+0x108>
	__asm__ volatile(
    ee00:	f04f 0320 	mov.w	r3, #32
    ee04:	f3ef 8111 	mrs	r1, BASEPRI
    ee08:	f383 8812 	msr	BASEPRI_MAX, r3
    ee0c:	f3bf 8f6f 	isb	sy
	if (data->async) {
    ee10:	692b      	ldr	r3, [r5, #16]
    ee12:	68db      	ldr	r3, [r3, #12]
    ee14:	b12b      	cbz	r3, ee22 <uarte_nrfx_rx_enable+0xf6>
		data->async->low_power_mask |= mask;
    ee16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
    ee1a:	f042 0202 	orr.w	r2, r2, #2
    ee1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    ee22:	2208      	movs	r2, #8
	return config->uarte_regs;
    ee24:	686b      	ldr	r3, [r5, #4]
    ee26:	681b      	ldr	r3, [r3, #0]
    ee28:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    ee2c:	f381 8811 	msr	BASEPRI, r1
    ee30:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ee34:	2301      	movs	r3, #1
    ee36:	f8c9 3000 	str.w	r3, [r9]
	return 0;
    ee3a:	e7c9      	b.n	edd0 <uarte_nrfx_rx_enable+0xa4>
		return -ENOTSUP;
    ee3c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    ee40:	e7c7      	b.n	edd2 <uarte_nrfx_rx_enable+0xa6>
		return -EBUSY;
    ee42:	f06f 000f 	mvn.w	r0, #15
    ee46:	e7c4      	b.n	edd2 <uarte_nrfx_rx_enable+0xa6>

0000ee48 <rx_timeout>:
{
    ee48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
    ee4a:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    ee4c:	68e3      	ldr	r3, [r4, #12]
    ee4e:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
    ee52:	f003 07ff 	and.w	r7, r3, #255	; 0xff
    ee56:	bb13      	cbnz	r3, ee9e <rx_timeout+0x56>
    p_reg->INTENCLR = mask;
    ee58:	2210      	movs	r2, #16
	const struct device *dev = data->dev;
    ee5a:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
    ee5c:	6873      	ldr	r3, [r6, #4]
    ee5e:	681b      	ldr	r3, [r3, #0]
    ee60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    ee64:	68e3      	ldr	r3, [r4, #12]
    ee66:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
    ee6a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
    ee6c:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
    ee6e:	bf1f      	itttt	ne
    ee70:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
    ee72:	68e3      	ldrne	r3, [r4, #12]
    ee74:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
    ee76:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
    ee78:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
    ee7a:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
    ee7e:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
    ee80:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
    ee82:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
    ee84:	da0c      	bge.n	eea0 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    ee86:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    ee8a:	68e3      	ldr	r3, [r4, #12]
    ee8c:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
    ee90:	4281      	cmp	r1, r0
    ee92:	d80b      	bhi.n	eeac <rx_timeout+0x64>
    p_reg->INTENSET = mask;
    ee94:	2210      	movs	r2, #16
	return config->uarte_regs;
    ee96:	6873      	ldr	r3, [r6, #4]
    ee98:	681b      	ldr	r3, [r3, #0]
    ee9a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    ee9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    eea0:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
    eea4:	eb02 0c01 	add.w	ip, r2, r1
    eea8:	4584      	cmp	ip, r0
    eeaa:	d904      	bls.n	eeb6 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    eeac:	1a45      	subs	r5, r0, r1
	if (len > 0) {
    eeae:	2d00      	cmp	r5, #0
    eeb0:	ddf0      	ble.n	ee94 <rx_timeout+0x4c>
		clipped = true;
    eeb2:	2701      	movs	r7, #1
    eeb4:	e005      	b.n	eec2 <rx_timeout+0x7a>
	if (len > 0) {
    eeb6:	2a00      	cmp	r2, #0
    eeb8:	d0ec      	beq.n	ee94 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
    eeba:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
    eebe:	428a      	cmp	r2, r1
    eec0:	da12      	bge.n	eee8 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
    eec2:	4629      	mov	r1, r5
    eec4:	4630      	mov	r0, r6
    eec6:	f7ff fddb 	bl	ea80 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    eeca:	68e2      	ldr	r2, [r4, #12]
    eecc:	6e13      	ldr	r3, [r2, #96]	; 0x60
    eece:	442b      	add	r3, r5
    eed0:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
    eed2:	68e2      	ldr	r2, [r4, #12]
    eed4:	6f13      	ldr	r3, [r2, #112]	; 0x70
    eed6:	442b      	add	r3, r5
    eed8:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
    eeda:	2f00      	cmp	r7, #0
    eedc:	d0da      	beq.n	ee94 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
    eede:	68e0      	ldr	r0, [r4, #12]
    eee0:	3080      	adds	r0, #128	; 0x80
    eee2:	f000 fc25 	bl	f730 <z_impl_k_timer_stop>
}
    eee6:	e7d5      	b.n	ee94 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
    eee8:	1a52      	subs	r2, r2, r1
    eeea:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
    eeec:	e7d2      	b.n	ee94 <rx_timeout+0x4c>

0000eeee <uarte_nrfx_tx_abort>:
{
    eeee:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    eef0:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    eef2:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
    eef4:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
    eef6:	68da      	ldr	r2, [r3, #12]
    eef8:	6891      	ldr	r1, [r2, #8]
    eefa:	b151      	cbz	r1, ef12 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
    eefc:	2400      	movs	r4, #0
    eefe:	f882 40cd 	strb.w	r4, [r2, #205]	; 0xcd
	k_timer_stop(&data->async->tx_timeout_timer);
    ef02:	68d8      	ldr	r0, [r3, #12]
    ef04:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
    ef06:	f000 fc13 	bl	f730 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ef0a:	2301      	movs	r3, #1
	return 0;
    ef0c:	4620      	mov	r0, r4
    ef0e:	60eb      	str	r3, [r5, #12]
}
    ef10:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    ef12:	f06f 000d 	mvn.w	r0, #13
    ef16:	e7fb      	b.n	ef10 <uarte_nrfx_tx_abort+0x22>

0000ef18 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    ef18:	6b43      	ldr	r3, [r0, #52]	; 0x34
    ef1a:	6818      	ldr	r0, [r3, #0]
    ef1c:	f7ff bfe7 	b.w	eeee <uarte_nrfx_tx_abort>

0000ef20 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    ef20:	4770      	bx	lr

0000ef22 <event_clear>:
    ef22:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ef24:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ef28:	009b      	lsls	r3, r3, #2
    ef2a:	b29b      	uxth	r3, r3
    ef2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ef30:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
    ef34:	601a      	str	r2, [r3, #0]
    ef36:	681b      	ldr	r3, [r3, #0]
}
    ef38:	4770      	bx	lr

0000ef3a <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
    ef3a:	f000 bbc7 	b.w	f6cc <z_impl_k_busy_wait>

0000ef3e <nrf_modem_os_errno_set>:
{
    ef3e:	b510      	push	{r4, lr}
    ef40:	4604      	mov	r4, r0
	errno = err_code;
    ef42:	f7ff fc5a 	bl	e7fa <__errno>
    ef46:	6004      	str	r4, [r0, #0]
}
    ef48:	bd10      	pop	{r4, pc}

0000ef4a <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
    ef4a:	f000 ba7f 	b.w	f44c <k_is_in_isr>

0000ef4e <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
    ef4e:	f7fd bfef 	b.w	cf30 <z_impl_k_sem_give>

0000ef52 <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    ef52:	1c4b      	adds	r3, r1, #1
{
    ef54:	b570      	push	{r4, r5, r6, lr}
    ef56:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    ef58:	d017      	beq.n	ef8a <nrf_modem_os_sem_take+0x38>
    ef5a:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
    ef5e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    ef62:	f240 30e7 	movw	r0, #999	; 0x3e7
    ef66:	2100      	movs	r1, #0
    ef68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ef6c:	2300      	movs	r3, #0
    ef6e:	fbc4 0106 	smlal	r0, r1, r4, r6
    ef72:	f7f9 f8e7 	bl	8144 <__aeabi_uldivmod>
    ef76:	4602      	mov	r2, r0
    ef78:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    ef7a:	4628      	mov	r0, r5
    ef7c:	f7fd fff8 	bl	cf70 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
    ef80:	2800      	cmp	r0, #0
}
    ef82:	bf18      	it	ne
    ef84:	f06f 000a 	mvnne.w	r0, #10
    ef88:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
    ef8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ef8e:	4613      	mov	r3, r2
    ef90:	e7f3      	b.n	ef7a <nrf_modem_os_sem_take+0x28>

0000ef92 <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    ef92:	2000      	movs	r0, #0
{
    ef94:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    ef96:	f7fa fc0d 	bl	97b4 <sys_arch_reboot>

0000ef9a <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
    ef9a:	2000      	movs	r0, #0
    ef9c:	4770      	bx	lr

0000ef9e <psa_crypto_init>:
}
    ef9e:	2000      	movs	r0, #0
    efa0:	4770      	bx	lr

0000efa2 <SystemInit>:
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
    efa2:	4770      	bx	lr

0000efa4 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    efa4:	4700      	bx	r0

0000efa6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    efa6:	f000 bb91 	b.w	f6cc <z_impl_k_busy_wait>

0000efaa <nrfx_clock_stop>:
    clock_stop(domain);
    efaa:	f7fc b935 	b.w	b218 <clock_stop>

0000efae <rpc_handle_ctrl_message>:
    efae:	2902      	cmp	r1, #2
    efb0:	b510      	push	{r4, lr}
    efb2:	4604      	mov	r4, r0
    efb4:	d005      	beq.n	efc2 <rpc_handle_ctrl_message+0x14>
    efb6:	2904      	cmp	r1, #4
    efb8:	d001      	beq.n	efbe <rpc_handle_ctrl_message+0x10>
    efba:	2901      	cmp	r1, #1
    efbc:	d107      	bne.n	efce <rpc_handle_ctrl_message+0x20>
    efbe:	2000      	movs	r0, #0
    efc0:	bd10      	pop	{r4, pc}
    efc2:	6880      	ldr	r0, [r0, #8]
    efc4:	2800      	cmp	r0, #0
    efc6:	d0fa      	beq.n	efbe <rpc_handle_ctrl_message+0x10>
    efc8:	f7fc f866 	bl	b098 <nrf_modem_os_shm_tx_free>
    efcc:	e7f7      	b.n	efbe <rpc_handle_ctrl_message+0x10>
    efce:	6880      	ldr	r0, [r0, #8]
    efd0:	b108      	cbz	r0, efd6 <rpc_handle_ctrl_message+0x28>
    efd2:	f7fc f861 	bl	b098 <nrf_modem_os_shm_tx_free>
    efd6:	4620      	mov	r0, r4
    efd8:	f7fc fe08 	bl	bbec <rpc_transport_msg_rx_free>
    efdc:	e7ef      	b.n	efbe <rpc_handle_ctrl_message+0x10>

0000efde <rpc_list_preambles_init>:
    efde:	2200      	movs	r2, #0
    efe0:	b510      	push	{r4, lr}
    efe2:	6804      	ldr	r4, [r0, #0]
    efe4:	4294      	cmp	r4, r2
    efe6:	d100      	bne.n	efea <rpc_list_preambles_init+0xc>
    efe8:	bd10      	pop	{r4, pc}
    efea:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    efee:	684b      	ldr	r3, [r1, #4]
    eff0:	3201      	adds	r2, #1
    eff2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    eff6:	f043 0303 	orr.w	r3, r3, #3
    effa:	604b      	str	r3, [r1, #4]
    effc:	e7f2      	b.n	efe4 <rpc_list_preambles_init+0x6>

0000effe <rpc_transport_ipc_data_rx_resume>:
    effe:	2004      	movs	r0, #4
    f000:	f7fc bda2 	b.w	bb48 <nrfx_ipc_receive_event_enable>

0000f004 <rpc_transport_ipc_data_rx_suspend>:
    f004:	2004      	movs	r0, #4
    f006:	f7fc bda7 	b.w	bb58 <nrfx_ipc_receive_event_disable>

0000f00a <rpc_transport_ipc_shutdown>:
    f00a:	f7fc bd6f 	b.w	baec <nrfx_ipc_uninit>

0000f00e <rpc_transport_ipc_msg_alloc>:
    f00e:	b538      	push	{r3, r4, r5, lr}
    f010:	4604      	mov	r4, r0
    f012:	2500      	movs	r5, #0
    f014:	1d03      	adds	r3, r0, #4
    f016:	6822      	ldr	r2, [r4, #0]
    f018:	42aa      	cmp	r2, r5
    f01a:	d801      	bhi.n	f020 <rpc_transport_ipc_msg_alloc+0x12>
    f01c:	2300      	movs	r3, #0
    f01e:	e019      	b.n	f054 <rpc_transport_ipc_msg_alloc+0x46>
    f020:	f04f 0200 	mov.w	r2, #0
    f024:	e8d3 0fcf 	ldaexb	r0, [r3]
    f028:	2803      	cmp	r0, #3
    f02a:	d104      	bne.n	f036 <rpc_transport_ipc_msg_alloc+0x28>
    f02c:	e8c3 2fcc 	stlexb	ip, r2, [r3]
    f030:	f1bc 0f00 	cmp.w	ip, #0
    f034:	d1f6      	bne.n	f024 <rpc_transport_ipc_msg_alloc+0x16>
    f036:	d002      	beq.n	f03e <rpc_transport_ipc_msg_alloc+0x30>
    f038:	3308      	adds	r3, #8
    f03a:	3501      	adds	r5, #1
    f03c:	e7eb      	b.n	f016 <rpc_transport_ipc_msg_alloc+0x8>
    f03e:	eb01 1385 	add.w	r3, r1, r5, lsl #6
    f042:	4618      	mov	r0, r3
    f044:	2240      	movs	r2, #64	; 0x40
    f046:	2100      	movs	r1, #0
    f048:	f000 fb9c 	bl	f784 <memset>
    f04c:	4603      	mov	r3, r0
    f04e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    f052:	60a0      	str	r0, [r4, #8]
    f054:	4618      	mov	r0, r3
    f056:	bd38      	pop	{r3, r4, r5, pc}

0000f058 <rpc_client_msg_from_rpc_msg_get>:
    f058:	3008      	adds	r0, #8
    f05a:	4770      	bx	lr

0000f05c <rpc_client_msg_alloc>:
    f05c:	b538      	push	{r3, r4, r5, lr}
    f05e:	4605      	mov	r5, r0
    f060:	b920      	cbnz	r0, f06c <rpc_client_msg_alloc+0x10>
    f062:	f7fc fdbd 	bl	bbe0 <rpc_transport_msg_alloc>
    f066:	b980      	cbnz	r0, f08a <rpc_client_msg_alloc+0x2e>
    f068:	2000      	movs	r0, #0
    f06a:	bd38      	pop	{r3, r4, r5, pc}
    f06c:	f7fc f80c 	bl	b088 <nrf_modem_os_shm_tx_alloc>
    f070:	4604      	mov	r4, r0
    f072:	2800      	cmp	r0, #0
    f074:	d0f8      	beq.n	f068 <rpc_client_msg_alloc+0xc>
    f076:	f7fc fdb3 	bl	bbe0 <rpc_transport_msg_alloc>
    f07a:	b938      	cbnz	r0, f08c <rpc_client_msg_alloc+0x30>
    f07c:	4620      	mov	r0, r4
    f07e:	f7fc f80b 	bl	b098 <nrf_modem_os_shm_tx_free>
    f082:	2001      	movs	r0, #1
    f084:	f7fb ffd6 	bl	b034 <nrf_modem_os_event_notify>
    f088:	e7ee      	b.n	f068 <rpc_client_msg_alloc+0xc>
    f08a:	462c      	mov	r4, r5
    f08c:	60c5      	str	r5, [r0, #12]
    f08e:	f840 4f08 	str.w	r4, [r0, #8]!
    f092:	e7ea      	b.n	f06a <rpc_client_msg_alloc+0xe>

0000f094 <rpc_client_msg_send>:
    f094:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    f098:	4610      	mov	r0, r2
    f09a:	f840 1d08 	str.w	r1, [r0, #-8]!
    f09e:	f7fc bdb1 	b.w	bc04 <rpc_transport_msg_send>

0000f0a2 <rpc_client_msg_rx_free>:
    f0a2:	3808      	subs	r0, #8
    f0a4:	f7fc bda2 	b.w	bbec <rpc_transport_msg_rx_free>

0000f0a8 <rpc_client_msg_data_rx_free>:
    f0a8:	f7fc bda6 	b.w	bbf8 <rpc_transport_msg_data_rx_free>

0000f0ac <rpc_client_msg_data_tx_alloc>:
    f0ac:	f7fb bfec 	b.w	b088 <nrf_modem_os_shm_tx_alloc>

0000f0b0 <rpc_client_msg_data_tx_free>:
    f0b0:	b508      	push	{r3, lr}
    f0b2:	f7fb fff1 	bl	b098 <nrf_modem_os_shm_tx_free>
    f0b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f0ba:	2001      	movs	r0, #1
    f0bc:	f7fb bfba 	b.w	b034 <nrf_modem_os_event_notify>

0000f0c0 <sockaddr_init>:
    f0c0:	2904      	cmp	r1, #4
    f0c2:	b570      	push	{r4, r5, r6, lr}
    f0c4:	4605      	mov	r5, r0
    f0c6:	4616      	mov	r6, r2
    f0c8:	d003      	beq.n	f0d2 <sockaddr_init+0x12>
    f0ca:	2910      	cmp	r1, #16
    f0cc:	d015      	beq.n	f0fa <sockaddr_init+0x3a>
    f0ce:	2400      	movs	r4, #0
    f0d0:	e011      	b.n	f0f6 <sockaddr_init+0x36>
    f0d2:	2010      	movs	r0, #16
    f0d4:	f7fb ffca 	bl	b06c <nrf_modem_os_alloc>
    f0d8:	4604      	mov	r4, r0
    f0da:	2800      	cmp	r0, #0
    f0dc:	d0f7      	beq.n	f0ce <sockaddr_init+0xe>
    f0de:	220f      	movs	r2, #15
    f0e0:	2100      	movs	r1, #0
    f0e2:	3001      	adds	r0, #1
    f0e4:	f000 fb4e 	bl	f784 <memset>
    f0e8:	2310      	movs	r3, #16
    f0ea:	7023      	strb	r3, [r4, #0]
    f0ec:	2301      	movs	r3, #1
    f0ee:	8126      	strh	r6, [r4, #8]
    f0f0:	6063      	str	r3, [r4, #4]
    f0f2:	682b      	ldr	r3, [r5, #0]
    f0f4:	60e3      	str	r3, [r4, #12]
    f0f6:	4620      	mov	r0, r4
    f0f8:	bd70      	pop	{r4, r5, r6, pc}
    f0fa:	2024      	movs	r0, #36	; 0x24
    f0fc:	f7fb ffb6 	bl	b06c <nrf_modem_os_alloc>
    f100:	4604      	mov	r4, r0
    f102:	2800      	cmp	r0, #0
    f104:	d0e3      	beq.n	f0ce <sockaddr_init+0xe>
    f106:	2223      	movs	r2, #35	; 0x23
    f108:	2100      	movs	r1, #0
    f10a:	3001      	adds	r0, #1
    f10c:	f000 fb3a 	bl	f784 <memset>
    f110:	2324      	movs	r3, #36	; 0x24
    f112:	7023      	strb	r3, [r4, #0]
    f114:	2302      	movs	r3, #2
    f116:	4628      	mov	r0, r5
    f118:	6063      	str	r3, [r4, #4]
    f11a:	8126      	strh	r6, [r4, #8]
    f11c:	f104 0310 	add.w	r3, r4, #16
    f120:	f105 0210 	add.w	r2, r5, #16
    f124:	f850 1b04 	ldr.w	r1, [r0], #4
    f128:	4290      	cmp	r0, r2
    f12a:	f843 1b04 	str.w	r1, [r3], #4
    f12e:	d1f9      	bne.n	f124 <sockaddr_init+0x64>
    f130:	e7e1      	b.n	f0f6 <sockaddr_init+0x36>

0000f132 <sock_pollcb>:
    f132:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f134:	2500      	movs	r5, #0
    f136:	6803      	ldr	r3, [r0, #0]
    f138:	4604      	mov	r4, r0
    f13a:	9300      	str	r3, [sp, #0]
    f13c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    f13e:	4668      	mov	r0, sp
    f140:	f8ad 5006 	strh.w	r5, [sp, #6]
    f144:	f8ad 3004 	strh.w	r3, [sp, #4]
    f148:	f000 f87d 	bl	f246 <nrf_poll_one>
    f14c:	b138      	cbz	r0, f15e <sock_pollcb+0x2c>
    f14e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    f150:	4668      	mov	r0, sp
    f152:	4798      	blx	r3
    f154:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
    f158:	b10b      	cbz	r3, f15e <sock_pollcb+0x2c>
    f15a:	6365      	str	r5, [r4, #52]	; 0x34
    f15c:	63a5      	str	r5, [r4, #56]	; 0x38
    f15e:	b003      	add	sp, #12
    f160:	bd30      	pop	{r4, r5, pc}

0000f162 <sock_pkt_append>:
    f162:	2300      	movs	r3, #0
    f164:	600b      	str	r3, [r1, #0]
    f166:	6883      	ldr	r3, [r0, #8]
    f168:	b913      	cbnz	r3, f170 <sock_pkt_append+0xe>
    f16a:	e9c0 1101 	strd	r1, r1, [r0, #4]
    f16e:	4770      	bx	lr
    f170:	6019      	str	r1, [r3, #0]
    f172:	6081      	str	r1, [r0, #8]
    f174:	4770      	bx	lr

0000f176 <sock_is_stream>:
    f176:	6900      	ldr	r0, [r0, #16]
    f178:	1e43      	subs	r3, r0, #1
    f17a:	4258      	negs	r0, r3
    f17c:	4158      	adcs	r0, r3
    f17e:	4770      	bx	lr

0000f180 <sock_is_datagram>:
    f180:	6900      	ldr	r0, [r0, #16]
    f182:	1e83      	subs	r3, r0, #2
    f184:	4258      	negs	r0, r3
    f186:	4158      	adcs	r0, r3
    f188:	4770      	bx	lr

0000f18a <sock_proto_is_secure>:
    f18a:	6940      	ldr	r0, [r0, #20]
    f18c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
    f190:	d005      	beq.n	f19e <sock_proto_is_secure+0x14>
    f192:	f240 1311 	movw	r3, #273	; 0x111
    f196:	1ac3      	subs	r3, r0, r3
    f198:	4258      	negs	r0, r3
    f19a:	4158      	adcs	r0, r3
    f19c:	4770      	bx	lr
    f19e:	2001      	movs	r0, #1
    f1a0:	4770      	bx	lr

0000f1a2 <sock_is_attaching>:
    f1a2:	7f00      	ldrb	r0, [r0, #28]
    f1a4:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f1a8:	4770      	bx	lr

0000f1aa <sock_is_nonblock>:
    f1aa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    f1ac:	f000 0001 	and.w	r0, r0, #1
    f1b0:	4770      	bx	lr

0000f1b2 <sock_is_local_closed>:
    f1b2:	7f00      	ldrb	r0, [r0, #28]
    f1b4:	f3c0 0040 	ubfx	r0, r0, #1, #1
    f1b8:	4770      	bx	lr

0000f1ba <sock_is_eof>:
    f1ba:	6903      	ldr	r3, [r0, #16]
    f1bc:	2b01      	cmp	r3, #1
    f1be:	d105      	bne.n	f1cc <sock_is_eof+0x12>
    f1c0:	6980      	ldr	r0, [r0, #24]
    f1c2:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
    f1c6:	4258      	negs	r0, r3
    f1c8:	4158      	adcs	r0, r3
    f1ca:	4770      	bx	lr
    f1cc:	2000      	movs	r0, #0
    f1ce:	4770      	bx	lr

0000f1d0 <sock_has_stream_error>:
    f1d0:	7f00      	ldrb	r0, [r0, #28]
    f1d2:	09c0      	lsrs	r0, r0, #7
    f1d4:	4770      	bx	lr

0000f1d6 <sock_has_error>:
    f1d6:	6983      	ldr	r3, [r0, #24]
    f1d8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
    f1dc:	bf14      	ite	ne
    f1de:	2001      	movne	r0, #1
    f1e0:	2000      	moveq	r0, #0
    f1e2:	4770      	bx	lr

0000f1e4 <sock_has_pollcb>:
    f1e4:	6b40      	ldr	r0, [r0, #52]	; 0x34
    f1e6:	3800      	subs	r0, #0
    f1e8:	bf18      	it	ne
    f1ea:	2001      	movne	r0, #1
    f1ec:	4770      	bx	lr

0000f1ee <sock_can_read>:
    f1ee:	6840      	ldr	r0, [r0, #4]
    f1f0:	3800      	subs	r0, #0
    f1f2:	bf18      	it	ne
    f1f4:	2001      	movne	r0, #1
    f1f6:	4770      	bx	lr

0000f1f8 <sock_can_accept>:
    f1f8:	7f40      	ldrb	r0, [r0, #29]
    f1fa:	3800      	subs	r0, #0
    f1fc:	bf18      	it	ne
    f1fe:	2001      	movne	r0, #1
    f200:	4770      	bx	lr

0000f202 <sock_can_send>:
    f202:	b510      	push	{r4, lr}
    f204:	4602      	mov	r2, r0
    f206:	6904      	ldr	r4, [r0, #16]
    f208:	f7ff ffbf 	bl	f18a <sock_proto_is_secure>
    f20c:	2c01      	cmp	r4, #1
    f20e:	4601      	mov	r1, r0
    f210:	7f13      	ldrb	r3, [r2, #28]
    f212:	d103      	bne.n	f21c <sock_can_send+0x1a>
    f214:	071c      	lsls	r4, r3, #28
    f216:	f3c3 00c0 	ubfx	r0, r3, #3, #1
    f21a:	d50b      	bpl.n	f234 <sock_can_send+0x32>
    f21c:	b931      	cbnz	r1, f22c <sock_can_send+0x2a>
    f21e:	07d9      	lsls	r1, r3, #31
    f220:	d40b      	bmi.n	f23a <sock_can_send+0x38>
    f222:	f3c3 1380 	ubfx	r3, r3, #6, #1
    f226:	f1c3 0001 	rsb	r0, r3, #1
    f22a:	e003      	b.n	f234 <sock_can_send+0x32>
    f22c:	069a      	lsls	r2, r3, #26
    f22e:	f3c3 1040 	ubfx	r0, r3, #5, #1
    f232:	d4f4      	bmi.n	f21e <sock_can_send+0x1c>
    f234:	f000 0001 	and.w	r0, r0, #1
    f238:	bd10      	pop	{r4, pc}
    f23a:	2000      	movs	r0, #0
    f23c:	e7fa      	b.n	f234 <sock_can_send+0x32>

0000f23e <on_conf_dnssrv_res>:
    f23e:	f000 b84d 	b.w	f2dc <res_forward>

0000f242 <on_getifaddrs_res>:
    f242:	f000 b84b 	b.w	f2dc <res_forward>

0000f246 <nrf_poll_one>:
    f246:	b538      	push	{r3, r4, r5, lr}
    f248:	4604      	mov	r4, r0
    f24a:	6800      	ldr	r0, [r0, #0]
    f24c:	f7fd f8be 	bl	c3cc <sock_find>
    f250:	4605      	mov	r5, r0
    f252:	b928      	cbnz	r0, f260 <nrf_poll_one+0x1a>
    f254:	2001      	movs	r0, #1
    f256:	88e3      	ldrh	r3, [r4, #6]
    f258:	f043 0320 	orr.w	r3, r3, #32
    f25c:	80e3      	strh	r3, [r4, #6]
    f25e:	bd38      	pop	{r3, r4, r5, pc}
    f260:	f7ff ffa7 	bl	f1b2 <sock_is_local_closed>
    f264:	2800      	cmp	r0, #0
    f266:	d1f5      	bne.n	f254 <nrf_poll_one+0xe>
    f268:	4628      	mov	r0, r5
    f26a:	f7ff ffb4 	bl	f1d6 <sock_has_error>
    f26e:	b1f8      	cbz	r0, f2b0 <nrf_poll_one+0x6a>
    f270:	88e3      	ldrh	r3, [r4, #6]
    f272:	f043 0308 	orr.w	r3, r3, #8
    f276:	80e3      	strh	r3, [r4, #6]
    f278:	88a3      	ldrh	r3, [r4, #4]
    f27a:	07da      	lsls	r2, r3, #31
    f27c:	d507      	bpl.n	f28e <nrf_poll_one+0x48>
    f27e:	4628      	mov	r0, r5
    f280:	f7ff ffb5 	bl	f1ee <sock_can_read>
    f284:	b1e8      	cbz	r0, f2c2 <nrf_poll_one+0x7c>
    f286:	88e3      	ldrh	r3, [r4, #6]
    f288:	f043 0301 	orr.w	r3, r3, #1
    f28c:	80e3      	strh	r3, [r4, #6]
    f28e:	88a3      	ldrh	r3, [r4, #4]
    f290:	075b      	lsls	r3, r3, #29
    f292:	d507      	bpl.n	f2a4 <nrf_poll_one+0x5e>
    f294:	4628      	mov	r0, r5
    f296:	f7ff ffb4 	bl	f202 <sock_can_send>
    f29a:	b118      	cbz	r0, f2a4 <nrf_poll_one+0x5e>
    f29c:	88e3      	ldrh	r3, [r4, #6]
    f29e:	f043 0304 	orr.w	r3, r3, #4
    f2a2:	80e3      	strh	r3, [r4, #6]
    f2a4:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
    f2a8:	3800      	subs	r0, #0
    f2aa:	bf18      	it	ne
    f2ac:	2001      	movne	r0, #1
    f2ae:	e7d6      	b.n	f25e <nrf_poll_one+0x18>
    f2b0:	4628      	mov	r0, r5
    f2b2:	f7ff ff82 	bl	f1ba <sock_is_eof>
    f2b6:	2800      	cmp	r0, #0
    f2b8:	d0de      	beq.n	f278 <nrf_poll_one+0x32>
    f2ba:	88e3      	ldrh	r3, [r4, #6]
    f2bc:	f043 0310 	orr.w	r3, r3, #16
    f2c0:	e7d9      	b.n	f276 <nrf_poll_one+0x30>
    f2c2:	4628      	mov	r0, r5
    f2c4:	f7ff ff98 	bl	f1f8 <sock_can_accept>
    f2c8:	2800      	cmp	r0, #0
    f2ca:	d1dc      	bne.n	f286 <nrf_poll_one+0x40>
    f2cc:	4628      	mov	r0, r5
    f2ce:	f7ff ff74 	bl	f1ba <sock_is_eof>
    f2d2:	2800      	cmp	r0, #0
    f2d4:	d1d7      	bne.n	f286 <nrf_poll_one+0x40>
    f2d6:	e7da      	b.n	f28e <nrf_poll_one+0x48>

0000f2d8 <res_cookie_get>:
    f2d8:	68c0      	ldr	r0, [r0, #12]
    f2da:	4770      	bx	lr

0000f2dc <res_forward>:
    f2dc:	68c3      	ldr	r3, [r0, #12]
    f2de:	6018      	str	r0, [r3, #0]
    f2e0:	2001      	movs	r0, #1
    f2e2:	4770      	bx	lr

0000f2e4 <rpc_dfu_event_handler>:
    f2e4:	b510      	push	{r4, lr}
    f2e6:	4604      	mov	r4, r0
    f2e8:	6800      	ldr	r0, [r0, #0]
    f2ea:	b108      	cbz	r0, f2f0 <rpc_dfu_event_handler+0xc>
    f2ec:	f7ff fedc 	bl	f0a8 <rpc_client_msg_data_rx_free>
    f2f0:	68e0      	ldr	r0, [r4, #12]
    f2f2:	b108      	cbz	r0, f2f8 <rpc_dfu_event_handler+0x14>
    f2f4:	6004      	str	r4, [r0, #0]
    f2f6:	2001      	movs	r0, #1
    f2f8:	bd10      	pop	{r4, pc}

0000f2fa <nrf_modem_is_initialized>:
    f2fa:	f7fd bb2d 	b.w	c958 <nrf_modem_state_is_initialized>

0000f2fe <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    f2fe:	4770      	bx	lr

0000f300 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    f300:	b140      	cbz	r0, f314 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    f302:	68c3      	ldr	r3, [r0, #12]
    f304:	7858      	ldrb	r0, [r3, #1]
    f306:	f010 0001 	ands.w	r0, r0, #1
    f30a:	bf1e      	ittt	ne
    f30c:	7818      	ldrbne	r0, [r3, #0]
    f30e:	fab0 f080 	clzne	r0, r0
    f312:	0940      	lsrne	r0, r0, #5
}
    f314:	4770      	bx	lr

0000f316 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f318:	4605      	mov	r5, r0
    f31a:	460e      	mov	r6, r1
	__asm__ volatile(
    f31c:	f04f 0320 	mov.w	r3, #32
    f320:	f3ef 8711 	mrs	r7, BASEPRI
    f324:	f383 8812 	msr	BASEPRI_MAX, r3
    f328:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    f32c:	f7fe f924 	bl	d578 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    f330:	4631      	mov	r1, r6
    f332:	4604      	mov	r4, r0
    f334:	4628      	mov	r0, r5
    f336:	f7ff fe2c 	bl	ef92 <k_sys_fatal_error_handler>
	__asm__ volatile(
    f33a:	f387 8811 	msr	BASEPRI, r7
    f33e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    f342:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    f344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    f348:	f7fa ba7e 	b.w	9848 <z_impl_k_thread_abort>

0000f34c <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
    f34c:	f000 ba1a 	b.w	f784 <memset>

0000f350 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f350:	f000 ba0b 	b.w	f76a <memcpy>

0000f354 <k_heap_init>:
{
    f354:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    f356:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    f35a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    f35e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    f360:	f7ff b8c1 	b.w	e4e6 <sys_heap_init>

0000f364 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    f364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f368:	b085      	sub	sp, #20
    f36a:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    f36e:	4607      	mov	r7, r0
    f370:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f372:	4650      	mov	r0, sl
    f374:	4621      	mov	r1, r4
{
    f376:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f378:	f000 f9ac 	bl	f6d4 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    f37c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    f380:	bf08      	it	eq
    f382:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    f386:	4605      	mov	r5, r0
    f388:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    f38a:	bf04      	itt	eq
    f38c:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
    f390:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    f394:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
    f398:	f04f 0320 	mov.w	r3, #32
    f39c:	f3ef 8411 	mrs	r4, BASEPRI
    f3a0:	f383 8812 	msr	BASEPRI_MAX, r3
    f3a4:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f3a8:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    f3ac:	464a      	mov	r2, r9
    f3ae:	4641      	mov	r1, r8
    f3b0:	4638      	mov	r0, r7
    f3b2:	f7ff f831 	bl	e418 <sys_heap_aligned_alloc>
    f3b6:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    f3b8:	f7fe fa84 	bl	d8c4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    f3bc:	9b03      	ldr	r3, [sp, #12]
    f3be:	b13b      	cbz	r3, f3d0 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    f3c0:	f384 8811 	msr	BASEPRI, r4
    f3c4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    f3c8:	4618      	mov	r0, r3
    f3ca:	b005      	add	sp, #20
    f3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    f3d0:	1a28      	subs	r0, r5, r0
    f3d2:	eb66 0101 	sbc.w	r1, r6, r1
    f3d6:	2801      	cmp	r0, #1
    f3d8:	f171 0200 	sbcs.w	r2, r1, #0
    f3dc:	dbf0      	blt.n	f3c0 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    f3de:	e9cd 0100 	strd	r0, r1, [sp]
    f3e2:	465a      	mov	r2, fp
    f3e4:	4621      	mov	r1, r4
    f3e6:	4650      	mov	r0, sl
    f3e8:	f7fd ff2c 	bl	d244 <z_pend_curr>
	__asm__ volatile(
    f3ec:	f04f 0320 	mov.w	r3, #32
    f3f0:	f3ef 8411 	mrs	r4, BASEPRI
    f3f4:	f383 8812 	msr	BASEPRI_MAX, r3
    f3f8:	f3bf 8f6f 	isb	sy
	return k;
    f3fc:	e7d6      	b.n	f3ac <k_heap_aligned_alloc+0x48>

0000f3fe <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
    f3fe:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
    f400:	e9cd 2300 	strd	r2, r3, [sp]
    f404:	460a      	mov	r2, r1
    f406:	2104      	movs	r1, #4
    f408:	f7ff ffac 	bl	f364 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
    f40c:	b003      	add	sp, #12
    f40e:	f85d fb04 	ldr.w	pc, [sp], #4

0000f412 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
    f412:	b538      	push	{r3, r4, r5, lr}
    f414:	4604      	mov	r4, r0
    f416:	f04f 0320 	mov.w	r3, #32
    f41a:	f3ef 8511 	mrs	r5, BASEPRI
    f41e:	f383 8812 	msr	BASEPRI_MAX, r3
    f422:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    f426:	f7fe ffbf 	bl	e3a8 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    f42a:	f104 000c 	add.w	r0, r4, #12
    f42e:	f000 f911 	bl	f654 <z_unpend_all>
    f432:	b130      	cbz	r0, f442 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    f434:	4629      	mov	r1, r5
    f436:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    f43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    f43e:	f7fd bf65 	b.w	d30c <z_reschedule>
	__asm__ volatile(
    f442:	f385 8811 	msr	BASEPRI, r5
    f446:	f3bf 8f6f 	isb	sy
}
    f44a:	bd38      	pop	{r3, r4, r5, pc}

0000f44c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f44c:	f3ef 8005 	mrs	r0, IPSR
}
    f450:	3800      	subs	r0, #0
    f452:	bf18      	it	ne
    f454:	2001      	movne	r0, #1
    f456:	4770      	bx	lr

0000f458 <z_pm_save_idle_exit>:
{
    f458:	b508      	push	{r3, lr}
	pm_system_resume();
    f45a:	f7f9 fdf5 	bl	9048 <pm_system_resume>
}
    f45e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    f462:	f7ff bd5d 	b.w	ef20 <sys_clock_idle_exit>

0000f466 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    f466:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f46a:	428b      	cmp	r3, r1
    f46c:	d001      	beq.n	f472 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    f46e:	f7fd bf07 	b.w	d280 <z_set_prio>
}
    f472:	2000      	movs	r0, #0
    f474:	4770      	bx	lr

0000f476 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    f476:	b13a      	cbz	r2, f488 <z_impl_k_sem_init+0x12>
    f478:	428a      	cmp	r2, r1
    f47a:	d305      	bcc.n	f488 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    f47c:	e9c0 1202 	strd	r1, r2, [r0, #8]
    f480:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    f484:	2000      	movs	r0, #0
    f486:	4770      	bx	lr
		return -EINVAL;
    f488:	f06f 0015 	mvn.w	r0, #21
}
    f48c:	4770      	bx	lr

0000f48e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    f48e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    f492:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f494:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f496:	2300      	movs	r3, #0
	node->prev = NULL;
    f498:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    f49c:	4770      	bx	lr

0000f49e <unpend_thread_no_timeout>:
{
    f49e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    f4a0:	f7ff fff5 	bl	f48e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    f4a4:	7b43      	ldrb	r3, [r0, #13]
    f4a6:	f023 0302 	bic.w	r3, r3, #2
    f4aa:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    f4ac:	2300      	movs	r3, #0
    f4ae:	6083      	str	r3, [r0, #8]
}
    f4b0:	bd08      	pop	{r3, pc}

0000f4b2 <add_to_waitq_locked>:
{
    f4b2:	b538      	push	{r3, r4, r5, lr}
    f4b4:	4604      	mov	r4, r0
    f4b6:	460d      	mov	r5, r1
	unready_thread(thread);
    f4b8:	f7fd fe64 	bl	d184 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    f4bc:	7b63      	ldrb	r3, [r4, #13]
    f4be:	f043 0302 	orr.w	r3, r3, #2
    f4c2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    f4c4:	b1e5      	cbz	r5, f500 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    f4c6:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    f4c8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f4ca:	429d      	cmp	r5, r3
    f4cc:	d109      	bne.n	f4e2 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    f4ce:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    f4d0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    f4d4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    f4d6:	606c      	str	r4, [r5, #4]
}
    f4d8:	e012      	b.n	f500 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    f4da:	686a      	ldr	r2, [r5, #4]
    f4dc:	4293      	cmp	r3, r2
    f4de:	d0f6      	beq.n	f4ce <add_to_waitq_locked+0x1c>
    f4e0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    f4e2:	2b00      	cmp	r3, #0
    f4e4:	d0f3      	beq.n	f4ce <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    f4e6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    f4ea:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    f4ee:	428a      	cmp	r2, r1
    f4f0:	d0f3      	beq.n	f4da <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    f4f2:	4291      	cmp	r1, r2
    f4f4:	ddf1      	ble.n	f4da <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    f4f6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    f4f8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    f4fc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    f4fe:	605c      	str	r4, [r3, #4]
}
    f500:	bd38      	pop	{r3, r4, r5, pc}

0000f502 <z_ready_thread>:
{
    f502:	b510      	push	{r4, lr}
	__asm__ volatile(
    f504:	f04f 0320 	mov.w	r3, #32
    f508:	f3ef 8411 	mrs	r4, BASEPRI
    f50c:	f383 8812 	msr	BASEPRI_MAX, r3
    f510:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    f514:	f7fd fe02 	bl	d11c <ready_thread>
	__asm__ volatile(
    f518:	f384 8811 	msr	BASEPRI, r4
    f51c:	f3bf 8f6f 	isb	sy
}
    f520:	bd10      	pop	{r4, pc}

0000f522 <z_unpend_thread_no_timeout>:
{
    f522:	b508      	push	{r3, lr}
	__asm__ volatile(
    f524:	f04f 0220 	mov.w	r2, #32
    f528:	f3ef 8111 	mrs	r1, BASEPRI
    f52c:	f382 8812 	msr	BASEPRI_MAX, r2
    f530:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    f534:	6883      	ldr	r3, [r0, #8]
    f536:	b10b      	cbz	r3, f53c <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    f538:	f7ff ffb1 	bl	f49e <unpend_thread_no_timeout>
	__asm__ volatile(
    f53c:	f381 8811 	msr	BASEPRI, r1
    f540:	f3bf 8f6f 	isb	sy
}
    f544:	bd08      	pop	{r3, pc}

0000f546 <z_sched_wake_thread>:
{
    f546:	b538      	push	{r3, r4, r5, lr}
    f548:	4604      	mov	r4, r0
	__asm__ volatile(
    f54a:	f04f 0320 	mov.w	r3, #32
    f54e:	f3ef 8511 	mrs	r5, BASEPRI
    f552:	f383 8812 	msr	BASEPRI_MAX, r3
    f556:	f3bf 8f6f 	isb	sy
		if (!killed) {
    f55a:	7b43      	ldrb	r3, [r0, #13]
    f55c:	f013 0f28 	tst.w	r3, #40	; 0x28
    f560:	d10b      	bne.n	f57a <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    f562:	6883      	ldr	r3, [r0, #8]
    f564:	b10b      	cbz	r3, f56a <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    f566:	f7ff ff9a 	bl	f49e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f56a:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    f56c:	b951      	cbnz	r1, f584 <z_sched_wake_thread+0x3e>
    f56e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
    f572:	4620      	mov	r0, r4
    f574:	7363      	strb	r3, [r4, #13]
    f576:	f7fd fdd1 	bl	d11c <ready_thread>
	__asm__ volatile(
    f57a:	f385 8811 	msr	BASEPRI, r5
    f57e:	f3bf 8f6f 	isb	sy
}
    f582:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    f584:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    f588:	e7f3      	b.n	f572 <z_sched_wake_thread+0x2c>

0000f58a <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    f58a:	2101      	movs	r1, #1
    f58c:	3818      	subs	r0, #24
    f58e:	f7ff bfda 	b.w	f546 <z_sched_wake_thread>

0000f592 <z_unpend1_no_timeout>:
{
    f592:	b508      	push	{r3, lr}
    f594:	4603      	mov	r3, r0
	__asm__ volatile(
    f596:	f04f 0220 	mov.w	r2, #32
    f59a:	f3ef 8111 	mrs	r1, BASEPRI
    f59e:	f382 8812 	msr	BASEPRI_MAX, r2
    f5a2:	f3bf 8f6f 	isb	sy
	return list->head == list;
    f5a6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f5a8:	4283      	cmp	r3, r0
    f5aa:	d007      	beq.n	f5bc <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    f5ac:	b108      	cbz	r0, f5b2 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    f5ae:	f7ff ff76 	bl	f49e <unpend_thread_no_timeout>
	__asm__ volatile(
    f5b2:	f381 8811 	msr	BASEPRI, r1
    f5b6:	f3bf 8f6f 	isb	sy
}
    f5ba:	bd08      	pop	{r3, pc}
    f5bc:	2000      	movs	r0, #0
    f5be:	e7f8      	b.n	f5b2 <z_unpend1_no_timeout+0x20>

0000f5c0 <z_unpend_first_thread>:
{
    f5c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    f5c2:	f04f 0320 	mov.w	r3, #32
    f5c6:	f3ef 8511 	mrs	r5, BASEPRI
    f5ca:	f383 8812 	msr	BASEPRI_MAX, r3
    f5ce:	f3bf 8f6f 	isb	sy
	return list->head == list;
    f5d2:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f5d4:	42a0      	cmp	r0, r4
    f5d6:	d00d      	beq.n	f5f4 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    f5d8:	b134      	cbz	r4, f5e8 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    f5da:	4620      	mov	r0, r4
    f5dc:	f7ff ff5f 	bl	f49e <unpend_thread_no_timeout>
    f5e0:	f104 0018 	add.w	r0, r4, #24
    f5e4:	f000 f846 	bl	f674 <z_abort_timeout>
	__asm__ volatile(
    f5e8:	f385 8811 	msr	BASEPRI, r5
    f5ec:	f3bf 8f6f 	isb	sy
}
    f5f0:	4620      	mov	r0, r4
    f5f2:	bd38      	pop	{r3, r4, r5, pc}
    f5f4:	2400      	movs	r4, #0
    f5f6:	e7f7      	b.n	f5e8 <z_unpend_first_thread+0x28>

0000f5f8 <z_unpend_thread>:
{
    f5f8:	4601      	mov	r1, r0
    f5fa:	b510      	push	{r4, lr}
	__asm__ volatile(
    f5fc:	f04f 0320 	mov.w	r3, #32
    f600:	f3ef 8411 	mrs	r4, BASEPRI
    f604:	f383 8812 	msr	BASEPRI_MAX, r3
    f608:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    f60c:	6883      	ldr	r3, [r0, #8]
    f60e:	b10b      	cbz	r3, f614 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    f610:	f7ff ff45 	bl	f49e <unpend_thread_no_timeout>
	__asm__ volatile(
    f614:	f384 8811 	msr	BASEPRI, r4
    f618:	f3bf 8f6f 	isb	sy
}
    f61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f620:	f101 0018 	add.w	r0, r1, #24
    f624:	f000 b826 	b.w	f674 <z_abort_timeout>

0000f628 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f628:	4603      	mov	r3, r0
    f62a:	b920      	cbnz	r0, f636 <z_reschedule_irqlock+0xe>
    f62c:	f3ef 8205 	mrs	r2, IPSR
    f630:	b90a      	cbnz	r2, f636 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    f632:	f7f9 be7b 	b.w	932c <arch_swap>
    f636:	f383 8811 	msr	BASEPRI, r3
    f63a:	f3bf 8f6f 	isb	sy
}
    f63e:	4770      	bx	lr

0000f640 <z_reschedule_unlocked>:
	__asm__ volatile(
    f640:	f04f 0320 	mov.w	r3, #32
    f644:	f3ef 8011 	mrs	r0, BASEPRI
    f648:	f383 8812 	msr	BASEPRI_MAX, r3
    f64c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    f650:	f7ff bfea 	b.w	f628 <z_reschedule_irqlock>

0000f654 <z_unpend_all>:
{
    f654:	b538      	push	{r3, r4, r5, lr}
    f656:	4605      	mov	r5, r0
	int need_sched = 0;
    f658:	2000      	movs	r0, #0
	return list->head == list;
    f65a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f65c:	42a5      	cmp	r5, r4
    f65e:	d000      	beq.n	f662 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    f660:	b904      	cbnz	r4, f664 <z_unpend_all+0x10>
}
    f662:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    f664:	4620      	mov	r0, r4
    f666:	f7ff ffc7 	bl	f5f8 <z_unpend_thread>
		z_ready_thread(thread);
    f66a:	4620      	mov	r0, r4
    f66c:	f7ff ff49 	bl	f502 <z_ready_thread>
		need_sched = 1;
    f670:	2001      	movs	r0, #1
    f672:	e7f2      	b.n	f65a <z_unpend_all+0x6>

0000f674 <z_abort_timeout>:
{
    f674:	b510      	push	{r4, lr}
    f676:	f04f 0220 	mov.w	r2, #32
    f67a:	f3ef 8411 	mrs	r4, BASEPRI
    f67e:	f382 8812 	msr	BASEPRI_MAX, r2
    f682:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    f686:	6803      	ldr	r3, [r0, #0]
    f688:	b13b      	cbz	r3, f69a <z_abort_timeout+0x26>
			remove_timeout(to);
    f68a:	f7fe f81f 	bl	d6cc <remove_timeout>
			ret = 0;
    f68e:	2000      	movs	r0, #0
	__asm__ volatile(
    f690:	f384 8811 	msr	BASEPRI, r4
    f694:	f3bf 8f6f 	isb	sy
}
    f698:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    f69a:	f06f 0015 	mvn.w	r0, #21
    f69e:	e7f7      	b.n	f690 <z_abort_timeout+0x1c>

0000f6a0 <z_get_next_timeout_expiry>:
{
    f6a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    f6a2:	f04f 0320 	mov.w	r3, #32
    f6a6:	f3ef 8411 	mrs	r4, BASEPRI
    f6aa:	f383 8812 	msr	BASEPRI_MAX, r3
    f6ae:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    f6b2:	f7fd ffeb 	bl	d68c <next_timeout>
	__asm__ volatile(
    f6b6:	f384 8811 	msr	BASEPRI, r4
    f6ba:	f3bf 8f6f 	isb	sy
}
    f6be:	bd10      	pop	{r4, pc}

0000f6c0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    f6c0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    f6c2:	f7fe f8ff 	bl	d8c4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    f6c6:	bd08      	pop	{r3, pc}

0000f6c8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    f6c8:	f7fe b8fc 	b.w	d8c4 <sys_clock_tick_get>

0000f6cc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    f6cc:	b108      	cbz	r0, f6d2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    f6ce:	f7f9 bc81 	b.w	8fd4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    f6d2:	4770      	bx	lr

0000f6d4 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f6d4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    f6d8:	bf08      	it	eq
    f6da:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    f6de:	b538      	push	{r3, r4, r5, lr}
    f6e0:	460c      	mov	r4, r1
    f6e2:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    f6e4:	d014      	beq.n	f710 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f6e6:	4308      	orrs	r0, r1
    f6e8:	d103      	bne.n	f6f2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    f6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    f6ee:	f7fe b8e9 	b.w	d8c4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    f6f2:	f06f 0001 	mvn.w	r0, #1
    f6f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f6fa:	1b40      	subs	r0, r0, r5
    f6fc:	eb63 0101 	sbc.w	r1, r3, r1
    f700:	2900      	cmp	r1, #0
    f702:	da04      	bge.n	f70e <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    f704:	f7fe f8de 	bl	d8c4 <sys_clock_tick_get>
    f708:	1940      	adds	r0, r0, r5
    f70a:	eb41 0104 	adc.w	r1, r1, r4
}
    f70e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    f710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f714:	4601      	mov	r1, r0
    f716:	e7fa      	b.n	f70e <sys_clock_timeout_end_calc+0x3a>

0000f718 <k_timer_init>:
	timer->status = 0U;
    f718:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    f71a:	e9c0 1208 	strd	r1, r2, [r0, #32]
    f71e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    f722:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    f726:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    f72a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    f72c:	6343      	str	r3, [r0, #52]	; 0x34
}
    f72e:	4770      	bx	lr

0000f730 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    f730:	b510      	push	{r4, lr}
    f732:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    f734:	f7ff ff9e 	bl	f674 <z_abort_timeout>

	if (inactive) {
    f738:	b9b0      	cbnz	r0, f768 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    f73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f73c:	b10b      	cbz	r3, f742 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    f73e:	4620      	mov	r0, r4
    f740:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    f742:	f104 0018 	add.w	r0, r4, #24
    f746:	f7ff ff24 	bl	f592 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    f74a:	b168      	cbz	r0, f768 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    f74c:	f7ff fed9 	bl	f502 <z_ready_thread>
	__asm__ volatile(
    f750:	f04f 0320 	mov.w	r3, #32
    f754:	f3ef 8011 	mrs	r0, BASEPRI
    f758:	f383 8812 	msr	BASEPRI_MAX, r3
    f75c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    f760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f764:	f7ff bf60 	b.w	f628 <z_reschedule_irqlock>
    f768:	bd10      	pop	{r4, pc}

0000f76a <memcpy>:
    f76a:	440a      	add	r2, r1
    f76c:	1e43      	subs	r3, r0, #1
    f76e:	4291      	cmp	r1, r2
    f770:	d100      	bne.n	f774 <memcpy+0xa>
    f772:	4770      	bx	lr
    f774:	b510      	push	{r4, lr}
    f776:	f811 4b01 	ldrb.w	r4, [r1], #1
    f77a:	4291      	cmp	r1, r2
    f77c:	f803 4f01 	strb.w	r4, [r3, #1]!
    f780:	d1f9      	bne.n	f776 <memcpy+0xc>
    f782:	bd10      	pop	{r4, pc}

0000f784 <memset>:
    f784:	4402      	add	r2, r0
    f786:	4603      	mov	r3, r0
    f788:	4293      	cmp	r3, r2
    f78a:	d100      	bne.n	f78e <memset+0xa>
    f78c:	4770      	bx	lr
    f78e:	f803 1b01 	strb.w	r1, [r3], #1
    f792:	e7f9      	b.n	f788 <memset+0x4>

0000f794 <strncpy>:
    f794:	3901      	subs	r1, #1
    f796:	4603      	mov	r3, r0
    f798:	b510      	push	{r4, lr}
    f79a:	b132      	cbz	r2, f7aa <strncpy+0x16>
    f79c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    f7a0:	3a01      	subs	r2, #1
    f7a2:	f803 4b01 	strb.w	r4, [r3], #1
    f7a6:	2c00      	cmp	r4, #0
    f7a8:	d1f7      	bne.n	f79a <strncpy+0x6>
    f7aa:	441a      	add	r2, r3
    f7ac:	2100      	movs	r1, #0
    f7ae:	4293      	cmp	r3, r2
    f7b0:	d100      	bne.n	f7b4 <strncpy+0x20>
    f7b2:	bd10      	pop	{r4, pc}
    f7b4:	f803 1b01 	strb.w	r1, [r3], #1
    f7b8:	e7f9      	b.n	f7ae <strncpy+0x1a>

0000f7ba <strnlen>:
    f7ba:	4602      	mov	r2, r0
    f7bc:	4401      	add	r1, r0
    f7be:	b510      	push	{r4, lr}
    f7c0:	428a      	cmp	r2, r1
    f7c2:	4613      	mov	r3, r2
    f7c4:	d003      	beq.n	f7ce <strnlen+0x14>
    f7c6:	781c      	ldrb	r4, [r3, #0]
    f7c8:	3201      	adds	r2, #1
    f7ca:	2c00      	cmp	r4, #0
    f7cc:	d1f8      	bne.n	f7c0 <strnlen+0x6>
    f7ce:	1a18      	subs	r0, r3, r0
    f7d0:	bd10      	pop	{r4, pc}

0000f7d2 <strstr>:
    f7d2:	780a      	ldrb	r2, [r1, #0]
    f7d4:	b570      	push	{r4, r5, r6, lr}
    f7d6:	b96a      	cbnz	r2, f7f4 <strstr+0x22>
    f7d8:	bd70      	pop	{r4, r5, r6, pc}
    f7da:	429a      	cmp	r2, r3
    f7dc:	d109      	bne.n	f7f2 <strstr+0x20>
    f7de:	460c      	mov	r4, r1
    f7e0:	4605      	mov	r5, r0
    f7e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    f7e6:	2b00      	cmp	r3, #0
    f7e8:	d0f6      	beq.n	f7d8 <strstr+0x6>
    f7ea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
    f7ee:	429e      	cmp	r6, r3
    f7f0:	d0f7      	beq.n	f7e2 <strstr+0x10>
    f7f2:	3001      	adds	r0, #1
    f7f4:	7803      	ldrb	r3, [r0, #0]
    f7f6:	2b00      	cmp	r3, #0
    f7f8:	d1ef      	bne.n	f7da <strstr+0x8>
    f7fa:	4618      	mov	r0, r3
    f7fc:	e7ec      	b.n	f7d8 <strstr+0x6>

0000f7fe <_vsniprintf_r>:
    f7fe:	b530      	push	{r4, r5, lr}
    f800:	4614      	mov	r4, r2
    f802:	b09b      	sub	sp, #108	; 0x6c
    f804:	4605      	mov	r5, r0
    f806:	461a      	mov	r2, r3
    f808:	2c00      	cmp	r4, #0
    f80a:	da05      	bge.n	f818 <_vsniprintf_r+0x1a>
    f80c:	238b      	movs	r3, #139	; 0x8b
    f80e:	6003      	str	r3, [r0, #0]
    f810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f814:	b01b      	add	sp, #108	; 0x6c
    f816:	bd30      	pop	{r4, r5, pc}
    f818:	f44f 7302 	mov.w	r3, #520	; 0x208
    f81c:	9100      	str	r1, [sp, #0]
    f81e:	9104      	str	r1, [sp, #16]
    f820:	4669      	mov	r1, sp
    f822:	f8ad 300c 	strh.w	r3, [sp, #12]
    f826:	bf14      	ite	ne
    f828:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
    f82c:	4623      	moveq	r3, r4
    f82e:	9302      	str	r3, [sp, #8]
    f830:	9305      	str	r3, [sp, #20]
    f832:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f836:	f8ad 300e 	strh.w	r3, [sp, #14]
    f83a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f83c:	f7fe fa60 	bl	dd00 <_svfiprintf_r>
    f840:	1c43      	adds	r3, r0, #1
    f842:	bfbc      	itt	lt
    f844:	238b      	movlt	r3, #139	; 0x8b
    f846:	602b      	strlt	r3, [r5, #0]
    f848:	2c00      	cmp	r4, #0
    f84a:	d0e3      	beq.n	f814 <_vsniprintf_r+0x16>
    f84c:	9b00      	ldr	r3, [sp, #0]
    f84e:	2200      	movs	r2, #0
    f850:	701a      	strb	r2, [r3, #0]
    f852:	e7df      	b.n	f814 <_vsniprintf_r+0x16>

0000f854 <__ssputs_r>:
    f854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f858:	461f      	mov	r7, r3
    f85a:	688e      	ldr	r6, [r1, #8]
    f85c:	4682      	mov	sl, r0
    f85e:	460c      	mov	r4, r1
    f860:	42be      	cmp	r6, r7
    f862:	4690      	mov	r8, r2
    f864:	680b      	ldr	r3, [r1, #0]
    f866:	d82d      	bhi.n	f8c4 <__ssputs_r+0x70>
    f868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    f86c:	f412 6f90 	tst.w	r2, #1152	; 0x480
    f870:	d026      	beq.n	f8c0 <__ssputs_r+0x6c>
    f872:	6965      	ldr	r5, [r4, #20]
    f874:	6909      	ldr	r1, [r1, #16]
    f876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    f87a:	eba3 0901 	sub.w	r9, r3, r1
    f87e:	1c7b      	adds	r3, r7, #1
    f880:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    f884:	444b      	add	r3, r9
    f886:	106d      	asrs	r5, r5, #1
    f888:	429d      	cmp	r5, r3
    f88a:	bf38      	it	cc
    f88c:	461d      	movcc	r5, r3
    f88e:	0553      	lsls	r3, r2, #21
    f890:	d527      	bpl.n	f8e2 <__ssputs_r+0x8e>
    f892:	4629      	mov	r1, r5
    f894:	f7fe f928 	bl	dae8 <_malloc_r>
    f898:	4606      	mov	r6, r0
    f89a:	b360      	cbz	r0, f8f6 <__ssputs_r+0xa2>
    f89c:	464a      	mov	r2, r9
    f89e:	6921      	ldr	r1, [r4, #16]
    f8a0:	f7ff ff63 	bl	f76a <memcpy>
    f8a4:	89a3      	ldrh	r3, [r4, #12]
    f8a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    f8aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f8ae:	81a3      	strh	r3, [r4, #12]
    f8b0:	6126      	str	r6, [r4, #16]
    f8b2:	444e      	add	r6, r9
    f8b4:	6165      	str	r5, [r4, #20]
    f8b6:	eba5 0509 	sub.w	r5, r5, r9
    f8ba:	6026      	str	r6, [r4, #0]
    f8bc:	463e      	mov	r6, r7
    f8be:	60a5      	str	r5, [r4, #8]
    f8c0:	42be      	cmp	r6, r7
    f8c2:	d900      	bls.n	f8c6 <__ssputs_r+0x72>
    f8c4:	463e      	mov	r6, r7
    f8c6:	4632      	mov	r2, r6
    f8c8:	4641      	mov	r1, r8
    f8ca:	6820      	ldr	r0, [r4, #0]
    f8cc:	f000 f89d 	bl	fa0a <memmove>
    f8d0:	68a3      	ldr	r3, [r4, #8]
    f8d2:	2000      	movs	r0, #0
    f8d4:	1b9b      	subs	r3, r3, r6
    f8d6:	60a3      	str	r3, [r4, #8]
    f8d8:	6823      	ldr	r3, [r4, #0]
    f8da:	4433      	add	r3, r6
    f8dc:	6023      	str	r3, [r4, #0]
    f8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f8e2:	462a      	mov	r2, r5
    f8e4:	f000 f8ab 	bl	fa3e <_realloc_r>
    f8e8:	4606      	mov	r6, r0
    f8ea:	2800      	cmp	r0, #0
    f8ec:	d1e0      	bne.n	f8b0 <__ssputs_r+0x5c>
    f8ee:	6921      	ldr	r1, [r4, #16]
    f8f0:	4650      	mov	r0, sl
    f8f2:	f7fe f8af 	bl	da54 <_free_r>
    f8f6:	230c      	movs	r3, #12
    f8f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f8fc:	f8ca 3000 	str.w	r3, [sl]
    f900:	89a3      	ldrh	r3, [r4, #12]
    f902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f906:	81a3      	strh	r3, [r4, #12]
    f908:	e7e9      	b.n	f8de <__ssputs_r+0x8a>

0000f90a <_printf_common>:
    f90a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f90e:	4616      	mov	r6, r2
    f910:	4698      	mov	r8, r3
    f912:	688a      	ldr	r2, [r1, #8]
    f914:	4607      	mov	r7, r0
    f916:	690b      	ldr	r3, [r1, #16]
    f918:	460c      	mov	r4, r1
    f91a:	f8dd 9020 	ldr.w	r9, [sp, #32]
    f91e:	4293      	cmp	r3, r2
    f920:	bfb8      	it	lt
    f922:	4613      	movlt	r3, r2
    f924:	6033      	str	r3, [r6, #0]
    f926:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    f92a:	b10a      	cbz	r2, f930 <_printf_common+0x26>
    f92c:	3301      	adds	r3, #1
    f92e:	6033      	str	r3, [r6, #0]
    f930:	6823      	ldr	r3, [r4, #0]
    f932:	0699      	lsls	r1, r3, #26
    f934:	bf42      	ittt	mi
    f936:	6833      	ldrmi	r3, [r6, #0]
    f938:	3302      	addmi	r3, #2
    f93a:	6033      	strmi	r3, [r6, #0]
    f93c:	6825      	ldr	r5, [r4, #0]
    f93e:	f015 0506 	ands.w	r5, r5, #6
    f942:	d106      	bne.n	f952 <_printf_common+0x48>
    f944:	f104 0a19 	add.w	sl, r4, #25
    f948:	68e3      	ldr	r3, [r4, #12]
    f94a:	6832      	ldr	r2, [r6, #0]
    f94c:	1a9b      	subs	r3, r3, r2
    f94e:	42ab      	cmp	r3, r5
    f950:	dc2b      	bgt.n	f9aa <_printf_common+0xa0>
    f952:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    f956:	6822      	ldr	r2, [r4, #0]
    f958:	3b00      	subs	r3, #0
    f95a:	bf18      	it	ne
    f95c:	2301      	movne	r3, #1
    f95e:	0692      	lsls	r2, r2, #26
    f960:	d430      	bmi.n	f9c4 <_printf_common+0xba>
    f962:	f104 0243 	add.w	r2, r4, #67	; 0x43
    f966:	4641      	mov	r1, r8
    f968:	4638      	mov	r0, r7
    f96a:	47c8      	blx	r9
    f96c:	3001      	adds	r0, #1
    f96e:	d023      	beq.n	f9b8 <_printf_common+0xae>
    f970:	6823      	ldr	r3, [r4, #0]
    f972:	341a      	adds	r4, #26
    f974:	f854 2c0a 	ldr.w	r2, [r4, #-10]
    f978:	f003 0306 	and.w	r3, r3, #6
    f97c:	2b04      	cmp	r3, #4
    f97e:	bf0a      	itet	eq
    f980:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
    f984:	2500      	movne	r5, #0
    f986:	6833      	ldreq	r3, [r6, #0]
    f988:	f04f 0600 	mov.w	r6, #0
    f98c:	bf08      	it	eq
    f98e:	1aed      	subeq	r5, r5, r3
    f990:	f854 3c12 	ldr.w	r3, [r4, #-18]
    f994:	bf08      	it	eq
    f996:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    f99a:	4293      	cmp	r3, r2
    f99c:	bfc4      	itt	gt
    f99e:	1a9b      	subgt	r3, r3, r2
    f9a0:	18ed      	addgt	r5, r5, r3
    f9a2:	42b5      	cmp	r5, r6
    f9a4:	d11a      	bne.n	f9dc <_printf_common+0xd2>
    f9a6:	2000      	movs	r0, #0
    f9a8:	e008      	b.n	f9bc <_printf_common+0xb2>
    f9aa:	2301      	movs	r3, #1
    f9ac:	4652      	mov	r2, sl
    f9ae:	4641      	mov	r1, r8
    f9b0:	4638      	mov	r0, r7
    f9b2:	47c8      	blx	r9
    f9b4:	3001      	adds	r0, #1
    f9b6:	d103      	bne.n	f9c0 <_printf_common+0xb6>
    f9b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f9c0:	3501      	adds	r5, #1
    f9c2:	e7c1      	b.n	f948 <_printf_common+0x3e>
    f9c4:	18e1      	adds	r1, r4, r3
    f9c6:	1c5a      	adds	r2, r3, #1
    f9c8:	2030      	movs	r0, #48	; 0x30
    f9ca:	3302      	adds	r3, #2
    f9cc:	4422      	add	r2, r4
    f9ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    f9d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    f9d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    f9da:	e7c2      	b.n	f962 <_printf_common+0x58>
    f9dc:	2301      	movs	r3, #1
    f9de:	4622      	mov	r2, r4
    f9e0:	4641      	mov	r1, r8
    f9e2:	4638      	mov	r0, r7
    f9e4:	47c8      	blx	r9
    f9e6:	3001      	adds	r0, #1
    f9e8:	d0e6      	beq.n	f9b8 <_printf_common+0xae>
    f9ea:	3601      	adds	r6, #1
    f9ec:	e7d9      	b.n	f9a2 <_printf_common+0x98>

0000f9ee <memchr>:
    f9ee:	b2c9      	uxtb	r1, r1
    f9f0:	4603      	mov	r3, r0
    f9f2:	4402      	add	r2, r0
    f9f4:	b510      	push	{r4, lr}
    f9f6:	4293      	cmp	r3, r2
    f9f8:	4618      	mov	r0, r3
    f9fa:	d101      	bne.n	fa00 <memchr+0x12>
    f9fc:	2000      	movs	r0, #0
    f9fe:	e003      	b.n	fa08 <memchr+0x1a>
    fa00:	7804      	ldrb	r4, [r0, #0]
    fa02:	3301      	adds	r3, #1
    fa04:	428c      	cmp	r4, r1
    fa06:	d1f6      	bne.n	f9f6 <memchr+0x8>
    fa08:	bd10      	pop	{r4, pc}

0000fa0a <memmove>:
    fa0a:	4288      	cmp	r0, r1
    fa0c:	b510      	push	{r4, lr}
    fa0e:	eb01 0402 	add.w	r4, r1, r2
    fa12:	d902      	bls.n	fa1a <memmove+0x10>
    fa14:	4284      	cmp	r4, r0
    fa16:	4623      	mov	r3, r4
    fa18:	d807      	bhi.n	fa2a <memmove+0x20>
    fa1a:	1e43      	subs	r3, r0, #1
    fa1c:	42a1      	cmp	r1, r4
    fa1e:	d008      	beq.n	fa32 <memmove+0x28>
    fa20:	f811 2b01 	ldrb.w	r2, [r1], #1
    fa24:	f803 2f01 	strb.w	r2, [r3, #1]!
    fa28:	e7f8      	b.n	fa1c <memmove+0x12>
    fa2a:	4402      	add	r2, r0
    fa2c:	4601      	mov	r1, r0
    fa2e:	428a      	cmp	r2, r1
    fa30:	d100      	bne.n	fa34 <memmove+0x2a>
    fa32:	bd10      	pop	{r4, pc}
    fa34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    fa38:	f802 4d01 	strb.w	r4, [r2, #-1]!
    fa3c:	e7f7      	b.n	fa2e <memmove+0x24>

0000fa3e <_realloc_r>:
    fa3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa40:	4607      	mov	r7, r0
    fa42:	4615      	mov	r5, r2
    fa44:	460c      	mov	r4, r1
    fa46:	b921      	cbnz	r1, fa52 <_realloc_r+0x14>
    fa48:	4611      	mov	r1, r2
    fa4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    fa4e:	f7fe b84b 	b.w	dae8 <_malloc_r>
    fa52:	b922      	cbnz	r2, fa5e <_realloc_r+0x20>
    fa54:	f7fd fffe 	bl	da54 <_free_r>
    fa58:	2400      	movs	r4, #0
    fa5a:	4620      	mov	r0, r4
    fa5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa5e:	f000 f813 	bl	fa88 <_malloc_usable_size_r>
    fa62:	42a8      	cmp	r0, r5
    fa64:	d2f9      	bcs.n	fa5a <_realloc_r+0x1c>
    fa66:	4629      	mov	r1, r5
    fa68:	4638      	mov	r0, r7
    fa6a:	f7fe f83d 	bl	dae8 <_malloc_r>
    fa6e:	4606      	mov	r6, r0
    fa70:	2800      	cmp	r0, #0
    fa72:	d0f1      	beq.n	fa58 <_realloc_r+0x1a>
    fa74:	4621      	mov	r1, r4
    fa76:	462a      	mov	r2, r5
    fa78:	f7ff fe77 	bl	f76a <memcpy>
    fa7c:	4621      	mov	r1, r4
    fa7e:	4638      	mov	r0, r7
    fa80:	4634      	mov	r4, r6
    fa82:	f7fd ffe7 	bl	da54 <_free_r>
    fa86:	e7e8      	b.n	fa5a <_realloc_r+0x1c>

0000fa88 <_malloc_usable_size_r>:
    fa88:	f851 3c04 	ldr.w	r3, [r1, #-4]
    fa8c:	1f18      	subs	r0, r3, #4
    fa8e:	2b00      	cmp	r3, #0
    fa90:	bfbc      	itt	lt
    fa92:	580b      	ldrlt	r3, [r1, r0]
    fa94:	18c0      	addlt	r0, r0, r3
    fa96:	4770      	bx	lr
